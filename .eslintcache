[{"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/index.tsx":"1","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/constants/index.tsx":"2","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/App.tsx":"3","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/reportWebVitals.js":"4","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/utils/getLibrary.tsx":"5","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/index.ts":"6","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/store.ts":"7","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/types.tsx":"8","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/index.tsx":"9","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/web3/web3Manager.tsx":"10","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/containers/Layout.tsx":"11","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/index.tsx":"12","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/colors.ts":"13","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/components/tooltip.ts":"14","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/index.ts":"15","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/sagas/modals.tsx":"16","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/services/walletService.tsx":"17","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useBalance.tsx":"18","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/fortmatic.tsx":"19","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/networkConnector.tsx":"20","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/containers/Main.tsx":"21","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Auth.tsx":"22","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/404.tsx":"23","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/SuspenseSpinner.tsx":"24","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Header/Header.tsx":"25","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Sidebar.tsx":"26","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/modals.ts":"27","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/actions/index.ts":"28","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/index.tsx":"29","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useContract.tsx":"30","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/providers/manager.tsx":"31","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Home.tsx":"32","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/BuyGlq.tsx":"33","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Presale.tsx":"34","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Graphs.tsx":"35","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Templates.tsx":"36","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/utils/index.tsx":"37","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/GraphCreation.tsx":"38","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/services/graphService.tsx":"39","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/TemplateCard.tsx":"40","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/RadioCard.tsx":"41","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/enums/graphState.tsx":"42","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Graphs/GraphCard.tsx":"43","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/TemplateFile.tsx":"44","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Graphs/GraphStatus.tsx":"45","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/MotionBox.tsx":"46","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/constants/actions.ts":"47","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/diagrams.ts":"48","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/sidebar.tsx":"49","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Header/identicon.tsx":"50","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ContractCard.tsx":"51","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/WalletManager.tsx":"52","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/assets/icons/index.tsx":"53","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ModalWithdraw.tsx":"54","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/Option.tsx":"55","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useWalletContract.tsx":"56","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ModalDeposit.tsx":"57","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/PendingView.tsx":"58","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/mock/mocks.tsx":"59","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/usePrevious.tsx":"60","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Staking.tsx":"61","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/contracts/objects/topStakers.tsx":"62","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/contracts/objects/tiersAPY.tsx":"63","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useStaking.tsx":"64","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/StakingModalWithdraw.tsx":"65","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/ClaimRewards.tsx":"66","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/StakingDeposit.tsx":"67","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastInfo.tsx":"68","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastWarning.tsx":"69","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastError.tsx":"70","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastSuccess.tsx":"71"},{"size":1163,"mtime":1621889423932,"results":"72","hashOfConfig":"73"},{"size":1876,"mtime":1618961048463,"results":"74","hashOfConfig":"73"},{"size":747,"mtime":1621889423926,"results":"75","hashOfConfig":"73"},{"size":362,"mtime":1618961048483,"results":"76","hashOfConfig":"73"},{"size":218,"mtime":1618961048486,"results":"77","hashOfConfig":"73"},{"size":448,"mtime":1621889423935,"results":"78","hashOfConfig":"73"},{"size":646,"mtime":1618961048483,"results":"79","hashOfConfig":"73"},{"size":878,"mtime":1618961048484,"results":"80","hashOfConfig":"73"},{"size":1990,"mtime":1623178295136,"results":"81","hashOfConfig":"73"},{"size":1396,"mtime":1618961048486,"results":"82","hashOfConfig":"73"},{"size":1710,"mtime":1618961048463,"results":"83","hashOfConfig":"73"},{"size":2664,"mtime":1618961048474,"results":"84","hashOfConfig":"73"},{"size":1345,"mtime":1621889423935,"results":"85","hashOfConfig":"73"},{"size":183,"mtime":1618961048486,"results":"86","hashOfConfig":"73"},{"size":113,"mtime":1618961048482,"results":"87","hashOfConfig":"73"},{"size":560,"mtime":1618961048484,"results":"88","hashOfConfig":"73"},{"size":2449,"mtime":1618961048484,"results":"89","hashOfConfig":"73"},{"size":1029,"mtime":1618961048474,"results":"90","hashOfConfig":"73"},{"size":1357,"mtime":1618961048462,"results":"91","hashOfConfig":"73"},{"size":4366,"mtime":1618961048463,"results":"92","hashOfConfig":"73"},{"size":266,"mtime":1618961048464,"results":"93","hashOfConfig":"73"},{"size":1811,"mtime":1621889423933,"results":"94","hashOfConfig":"73"},{"size":537,"mtime":1621889423933,"results":"95","hashOfConfig":"73"},{"size":448,"mtime":1621889423932,"results":"96","hashOfConfig":"73"},{"size":6123,"mtime":1623178295135,"results":"97","hashOfConfig":"73"},{"size":2240,"mtime":1621889423931,"results":"98","hashOfConfig":"73"},{"size":1812,"mtime":1623178295148,"results":"99","hashOfConfig":"73"},{"size":673,"mtime":1623178295148,"results":"100","hashOfConfig":"73"},{"size":1034,"mtime":1621889848003,"results":"101","hashOfConfig":"73"},{"size":1591,"mtime":1623178295145,"results":"102","hashOfConfig":"73"},{"size":10516,"mtime":1618961048478,"results":"103","hashOfConfig":"73"},{"size":3470,"mtime":1623178295145,"results":"104","hashOfConfig":"73"},{"size":1413,"mtime":1621889423933,"results":"105","hashOfConfig":"73"},{"size":8645,"mtime":1621889423934,"results":"106","hashOfConfig":"73"},{"size":4975,"mtime":1621889423934,"results":"107","hashOfConfig":"73"},{"size":13336,"mtime":1623178295147,"results":"108","hashOfConfig":"73"},{"size":3099,"mtime":1618961048486,"results":"109","hashOfConfig":"73"},{"size":8773,"mtime":1621889423929,"results":"110","hashOfConfig":"73"},{"size":5229,"mtime":1621889423935,"results":"111","hashOfConfig":"73"},{"size":1479,"mtime":1621889423929,"results":"112","hashOfConfig":"73"},{"size":1252,"mtime":1621889423929,"results":"113","hashOfConfig":"73"},{"size":135,"mtime":1618961048468,"results":"114","hashOfConfig":"73"},{"size":9410,"mtime":1621889423930,"results":"115","hashOfConfig":"73"},{"size":768,"mtime":1619041765755,"results":"116","hashOfConfig":"73"},{"size":1860,"mtime":1619132159170,"results":"117","hashOfConfig":"73"},{"size":124,"mtime":1618961048461,"results":"118","hashOfConfig":"73"},{"size":135,"mtime":1618961048482,"results":"119","hashOfConfig":"73"},{"size":426,"mtime":1618961048482,"results":"120","hashOfConfig":"73"},{"size":916,"mtime":1623178295148,"results":"121","hashOfConfig":"73"},{"size":991,"mtime":1618961048461,"results":"122","hashOfConfig":"73"},{"size":1010,"mtime":1618961048458,"results":"123","hashOfConfig":"73"},{"size":10061,"mtime":1618961048458,"results":"124","hashOfConfig":"73"},{"size":530,"mtime":1618961048454,"results":"125","hashOfConfig":"73"},{"size":5506,"mtime":1623178295135,"results":"126","hashOfConfig":"73"},{"size":831,"mtime":1618961048458,"results":"127","hashOfConfig":"73"},{"size":1090,"mtime":1618961048475,"results":"128","hashOfConfig":"73"},{"size":6412,"mtime":1623178295134,"results":"129","hashOfConfig":"73"},{"size":2533,"mtime":1618961048458,"results":"130","hashOfConfig":"73"},{"size":8254,"mtime":1618961048476,"results":"131","hashOfConfig":"73"},{"size":541,"mtime":1618961048475,"results":"132","hashOfConfig":"73"},{"size":29734,"mtime":1623185626723,"results":"133","hashOfConfig":"73"},{"size":567,"mtime":1623178295145,"results":"134","hashOfConfig":"73"},{"size":472,"mtime":1623178295145,"results":"135","hashOfConfig":"73"},{"size":1299,"mtime":1623178295145,"results":"136","hashOfConfig":"73"},{"size":5627,"mtime":1623178295135,"results":"137","hashOfConfig":"73"},{"size":3578,"mtime":1623178295135,"results":"138","hashOfConfig":"73"},{"size":8556,"mtime":1623178295135,"results":"139","hashOfConfig":"73"},{"size":1078,"mtime":1623178295136,"results":"140","hashOfConfig":"73"},{"size":1079,"mtime":1623178295136,"results":"141","hashOfConfig":"73"},{"size":1059,"mtime":1623178295135,"results":"142","hashOfConfig":"73"},{"size":1333,"mtime":1623178295136,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"1yu3kvw",{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"146"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"146"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"146"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"146"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"146"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"146"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"146"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"146"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"146"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"222","usedDeprecatedRules":"146"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"146"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"146"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"146"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"234","usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"146"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"146"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"146"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"146"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"146"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"146"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"146"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"281","usedDeprecatedRules":"146"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"146"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"146"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"290","usedDeprecatedRules":"146"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"146"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"146"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"146"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"310","usedDeprecatedRules":"146"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"146"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"316","usedDeprecatedRules":"146"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"325","usedDeprecatedRules":"146"},"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/index.tsx",[],["326","327"],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/constants/index.tsx",["328"],"\nimport { fortmatic, injected, portis, walletconnect, walletlink, bsc } from '../connectors/index'\n\nexport const SUPPORTED_WALLETS = {\n    INJECTED: {\n      connector: injected,\n      name: 'Injected',\n      iconName: 'MetaMaskIcon',\n      description: 'Injected web3 provider.',\n      href: null,\n      primary: true\n    },\n    // BINANCE: {\n    //   connector: bsc,\n    //   name: 'Binance Chain Wallet',\n    //   iconName: 'BinanceIcon',\n    //   description: 'A Crypto Wallet for Binance Chain, Binance Smart Chain and Ethereum',\n    //   href: null,\n    // },\n    METAMASK: {\n      connector: injected,\n      name: 'MetaMask',\n      iconName: 'MetaMaskIcon',\n      description: 'Easy-to-use browser extension.',\n      href: null,\n    },\n    WALLET_CONNECT: {\n      connector: walletconnect,\n      name: 'WalletConnect',\n      iconName: 'WalletConnectIcon',\n      description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n      href: null,\n      mobile: true\n    },\n    WALLET_LINK: {\n      connector: walletlink,\n      name: 'Coinbase Wallet',\n      iconName: 'CoinbaseWalletIcon',\n      description: 'Use Coinbase Wallet app on mobile device',\n      href: null,\n    },\n    COINBASE_LINK: {\n      name: 'Open in Coinbase Wallet',\n      iconName: 'CoinbaseWalletIcon',\n      description: 'Open in Coinbase Wallet app.',\n      href: 'https://go.cb-w.com/mtUDhEZPy1',\n      mobile: true,\n      mobileOnly: true\n    },\n    FORTMATIC: {\n      connector: fortmatic,\n      name: 'Fortmatic',\n      iconName: 'FortmaticIcon',\n      description: 'Login using Fortmatic hosted wallet',\n      href: null,\n      mobile: true\n    },\n    Portis: {\n      connector: portis,\n      name: 'Portis',\n      iconName: 'PortisIcon',\n      description: 'Login using Portis hosted wallet',\n      href: null,\n      mobile: true\n    }\n  }\n  \n  export const NetworkContextName = 'NETWORK'","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/App.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/reportWebVitals.js",[],["329","330"],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/utils/getLibrary.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/index.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/store.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/types.tsx",["331","332","333"],"import { Route, Redirect } from \"react-router-dom\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport React, { useEffect, useState } from \"react\";\nimport WalletService from \"../services/walletService\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthComponent from \"../pages/Auth\"\n\nexport const CustomRoute = ({ component, ...rest }: any) => {\n  const { account } = useWeb3React();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!account) { return }\n    if (!WalletService.verifySessionIntegrity(account)) {\n      return history.push(\"/\");\n    }\n  }, [account])\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        account === undefined || localStorage.getItem(\"session\") == null ? (\n          React.createElement(AuthComponent, props)\n        ) : (\n          React.createElement(component, props)\n        )\n      }\n    />\n  );\n};","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/index.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/web3/web3Manager.tsx",["334"],"import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { network } from \"../connectors\";\nimport { useEagerConnect, useInactiveListener } from \"../hooks\";\n// import { useHornBalance } from 'src/hooks/useHornBalance'\nimport { useBalance } from \"../hooks/useBalance\";\n\nimport { NetworkContextName } from \"../constants\";\n\nexport default function Web3ReactManager({ children }: any) {\n  const { active, chainId, account } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork,\n  } = useWeb3React(NetworkContextName);\n  const { refreshBalance }: any = useBalance();\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  useEffect(() => {\n    // setting account and refreshing glq balance\n    refreshBalance();\n  }, [chainId, account]);\n\n  return children;\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/containers/Layout.tsx",["335"],"import React, { Suspense } from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport { Flex, Box } from '@chakra-ui/react';\nimport { Header } from '../components/Header/Header';\nimport { Sidebar } from '../components/Sidebar';\nimport { Main } from './Main';\n\nimport routes from '../routes';\nimport Page404 from '../pages/404';\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\n\ninterface LayoutProps {\n\n}\n\nconst Layout: React.FC<LayoutProps> = ({ }) => {\n    return (\n        <Flex minH=\"100vh\" h=\"100vh\" bgColor=\"gray.50\">\n            <Sidebar />\n            <Box as=\"section\" display=\"flex\" flexDirection=\"column\" flex=\"1\" width=\"full\">\n                <Header />\n                <Main>\n                    <Suspense fallback={<SuspenseSpinner />}>\n                        <Switch>\n                            {routes.map((route, i) => {\n                                return route.component ? (\n                                    <Route\n                                        key={i}\n                                        exact={true}\n                                        path={`/app${route.path}`}\n                                        render={(props) => <route.component {...props} />}\n                                    />\n                                ) : null\n                            })}\n                            <Redirect exact from=\"/\" to=\"/app/home\" />\n                            <Redirect exact from=\"/app\" to=\"/app/home\" />\n                            <Route component={Page404} />\n                        </Switch>\n                    </Suspense>\n                </Main>\n            </Box>\n        </Flex>\n    );\n}\n\nexport default Layout;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/index.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/colors.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/theme/components/tooltip.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/index.ts",["336"],"import {diagrams} from './diagrams';\nimport {modals} from './modals';\n\nexport default {\n  modals,\n  diagrams,\n};\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/sagas/modals.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/services/walletService.tsx",["337"],"import ManagerProvider from \"../providers/manager\"\nimport AuthResponse from \"../providers/responses/auth\"\nimport { WalletBalanceResponse } from \"../providers/responses/balance\";\nimport { ResponseSuccess } from \"../providers/responses/success\";\n\n\nexport default class WalletService {\n    public static async authWallet(addr: string, sign: string): Promise<boolean>\n    {\n        try\n        {\n            const result: AuthResponse = await ManagerProvider.authRequest({\n                address: addr,\n                signature: sign\n            })\n        \n            if (result) {\n                localStorage.setItem('session', JSON.stringify({token: result.accessToken, addr: addr}))\n            }\n            return result.auth;\n        }\n        catch (error)\n        {\n            console.error(error)\n            return false;\n        }\n    }\n\n    public static verifySessionIntegrity(currAcc: string): boolean {\n        if (localStorage.getItem(\"session\") != null) {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            if (session.addr !== currAcc) { \n              localStorage.removeItem('session')\n              return false;\n            }\n          }\n        else if (localStorage.getItem(\"session\") == null) { return false; }\n        \n        return true;\n    }\n\n    public static async getBalance(addr: string): Promise<WalletBalanceResponse | undefined> {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: WalletBalanceResponse = await ManagerProvider.fetchBalanceWallet({address: addr}, session.token)\n            return result\n        }\n        catch (error)\n        {\n            console.error(error)\n            return undefined;\n        }\n    }\n\n\n    public static async withdraw(amount: number): Promise<ResponseSuccess | String > {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: ResponseSuccess = await ManagerProvider.withdrawBalanceWallet({amount}, session.token)\n            return result\n        }\n        catch (error)\n        {\n            if (!error.success) {\n                var errorMsg: String = new String(error.msg)\n                return errorMsg\n            }\n            console.error(JSON.stringify(error))\n            return \"An internal server error occured, please try again later\";\n        }\n    }\n\n\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useBalance.tsx",["338"],"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { utils } from 'ethers';\nimport { UPDATE_BALANCE } from '../redux/actions/index';\nimport { useActiveWeb3React } from '.';\nimport { useTokenContract } from './useContract';\n\nexport function useBalance() {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useDispatch();\n  \n  const balance = useSelector(state => (state as any).modals.balance);\n\n  const tokenContract = useTokenContract(process.env.REACT_APP_GRAPHLINQ_TOKEN_CONTRACT);\n\n  const refreshBalance = useCallback(async () => {\n      if (!account || !tokenContract) {\n        return;\n      }\n      try {\n      const balanceOf = await tokenContract.balanceOf(account);\n      if (!balanceOf) return;\n  \n      const balance = parseFloat(utils.formatUnits(balanceOf, 18));\n      dispatch({ type: UPDATE_BALANCE, payload: {balance}, name: 'balance'});\n      } catch (e) { console.error(e) }\n\n  }, [account, tokenContract]);\n\n return { balance, refreshBalance }\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/fortmatic.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/connectors/networkConnector.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/containers/Main.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Auth.tsx",["339"],"import React from 'react'\nimport { Box, Tabs, TabList, Tab, TabPanels, TabPanel, Image } from '@chakra-ui/react';\nimport GLQLogo from \"../assets/logo.svg\"\nimport WalletManager from \"../components/BrowserWallet/WalletManager\"\n\ninterface AuthProps {\n\n}\n\nconst Auth: React.FC<AuthProps> = ({ }) => {\n    return (\n        <Box id=\"auth\">\n            <div className=\"auth-h\">\n                <Image src={GLQLogo}/>\n            </div>\n            <div className=\"auth-c\">\n                <div className=\"top\">\n                    <h2>Dashboard Access</h2>\n                    <p>Connect your wallet to access your dashboard.</p>\n                </div>\n                <Tabs className=\"tab\">\n                    <TabList className=\"tabt\">\n                        <Tab><span>Browser Extension</span></Tab>\n                        <Tab isDisabled><span>Wallet Direct</span></Tab>\n                        <Tab isDisabled><span>Ledger USB</span></Tab>\n                    </TabList>\n                    <TabPanels className=\"tabp\">\n                        <TabPanel>\n                            <div className=\"ls-c\">\n                                <WalletManager />\n                            </div>\n                        </TabPanel>\n                        <TabPanel>\n                            <p>Wallet Direct component</p>\n                        </TabPanel>\n                        <TabPanel>\n                            <p>Ledger USB component</p>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </div>\n            <div className=\"auth-f\">\n                New to GraphLinq Wallet ?\n                <a target=\"_blank\" href=\"https://docs.graphlinq.io/wallet\" rel=\"noreferrer\">Learn more</a>\n            </div>\n        </Box>\n    );\n}\n\nexport default Auth;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/404.tsx",["340"],"import React from 'react'\nimport { Alert } from '@chakra-ui/react';\n\ninterface Page404Props {\n\n}\n\nconst Page404: React.FC<Page404Props> = ({}) => {\n        return (\n            <>\n                <h1>Error 404</h1>\n                <Alert status=\"info\">\n                    <i className=\"fal fa-times-circle\"></i> Sorry, page not found.\n                </Alert>\n                <br />\n                <a className=\"bt\" href=\"/app/home\">Back to home <i className=\"fal fa-home\"></i></a>\n            </>\n        );\n}\n\nexport default Page404;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/SuspenseSpinner.tsx",["341"],"import { Center, Spinner } from '@chakra-ui/react';\nimport React from 'react'\n\ninterface SuspenseSpinnerProps {\n\n}\n\nexport const SuspenseSpinner: React.FC<SuspenseSpinnerProps> = ({ }) => {\n    return (\n        <Center h=\"full\">\n            <Spinner\n                thickness=\"5px\"\n                speed=\"0.65s\"\n                emptyColor=\"#2334ff\"\n                color=\"#15122b\"\n                size=\"xl\"\n            />\n        </Center>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Header/Header.tsx",["342","343","344","345","346"],"import React, { useEffect, useState } from \"react\";\nimport { Avatar, Icon, IconButton, Menu, MenuButton, MenuItem, MenuList, Link, Button, keyframes, chakra } from \"@chakra-ui/react\";\n\nimport { WalletConnectIcon, CoinbaseWalletIcon, FortmaticIcon, PortisIcon } from \"../../assets/icons\";\nimport Identicon from \"./identicon\";\n\nimport { fortmatic, injected, portis, walletconnect, walletlink } from \"../../connectors\";\n\nimport { shortenAddress } from \"../../utils/index\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useSelector } from \"react-redux\";\nimport { HiOutlineDotsHorizontal } from \"react-icons/hi\";\nimport { FiGithub, FiMessageCircle, FiMessageSquare, FiBookOpen } from \"react-icons/fi\";\nimport { NavLink } from \"react-router-dom\";\n\ninterface HeaderProps {}\n\nconst pulse = keyframes({\n    \"0%\": { transform: \"scale(0.95)\", boxShadow: \"0 0 0 0 rgba(139, 92, 246, 0.7)\" },\n    \"70%\": { transform: \"scale(1)\", boxShadow: \"0 0 0 10px rgba(139, 92, 246, 0)\" },\n    \"100%\": { transform: \"scale(0.95)\", boxShadow: \"0 0 0 0 rgba(139, 92, 246, 0)\" },\n});\n\nexport const Header: React.FC<HeaderProps> = ({}) => {\n    const { account, connector } = useWeb3React();\n    let amountBalance = useSelector((state: any) => state.modals.balance.amount);\n\n    function formatCur(num: number, min: number, max: number) {\n        const formatConfig = {\n            style: \"currency\",\n            currency: \"USD\",\n            minimumFractionDigits: min,\n            maximumFractionDigits: max,\n            currencyDisplay: \"symbol\",\n        };\n        const curFormatter = new Intl.NumberFormat(\"en-US\", formatConfig);\n\n        return curFormatter.format(num);\n    }\n    const [glqPrice, setGlqPrice] = useState(\"\");\n    const refreshGlqPrice = async () => {\n        try {\n            let response = await fetch(\"https://api.graphlinq.io/front/token\");\n            let responseJson = await response.json();\n            setGlqPrice(formatCur(responseJson.uni.glqPrice, 0, 5));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(() => {\n        refreshGlqPrice()\n    }, []);\n\n    return (\n        <header id=\"h\">\n            <div className=\"l\">\n                <button\n                    className=\"bnv\"\n                    data-nav=\"\"\n                    onClick={() => {\n                        document.body.classList.toggle(\"onav\");\n                    }}\n                >\n                    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path className=\"l-1\" d=\"M0,42h62c13,0,6,26-4,16L35,35\"></path>\n                        <path className=\"l-2\" d=\"M0,50h70\"></path>\n                        <path className=\"l-3\" d=\"M0,58h62c13,0,6-26-4-16L35,65\"></path>\n                    </svg>\n                </button>\n                <Link as={NavLink} to=\"/app/home\" className=\"bt btm\">\n                    Make a Graph <i className=\"fal fa-plus-circle\"></i>\n                </Link>\n                <chakra.div ml=\"1rem\" rounded=\"full\" textAlign=\"center\" bgColor=\"#090812\" px=\"1rem\" py=\".5rem\">\n                    <chakra.p fontSize=\"sm\">\n                        GLQ : <b>{glqPrice}</b>\n                    </chakra.p>\n                </chakra.div>\n            </div>\n            <div className=\"r\">\n                {account !== undefined && (\n                    <div className=\"rt\">\n                        <Button as={NavLink} exact to=\"staking\" className=\"bt\">\n                            Stake your GLQ\n                            <i className=\"fal fa-cube\"></i>\n                        </Button>\n\n                        <Button as={NavLink} exact to=\"buy-glq\" className=\"bt\">\n                            Buy GLQ with FIAT\n                            <i className=\"fal fa-shopping-cart\"></i>\n                        </Button>\n                        {/* <Button\n                        as={NavLink}\n                        exact\n                        to=\"private-sale\"\n                        className=\"bt\"\n                        >\n                            Private Sale\n                            <i className=\"fal fa-database\"></i>\n                        </Button> */}\n                        <div className=\"gl in\">{amountBalance} GLQ</div>\n                        <div className=\"ad in\">{shortenAddress(account)}</div>\n                    </div>\n                )}\n                <Menu>\n                    <MenuButton as={IconButton} aria-label=\"Links\" icon={<Icon as={HiOutlineDotsHorizontal} w={5} h={5} />} className=\"mn\" />\n                    <MenuList className=\"mnv\">\n                        <MenuItem as={Link} icon={<FiBookOpen />} href=\"https://docs.graphlinq.io/\" isExternal>\n                            Documentation\n                        </MenuItem>\n                        <MenuItem as={Link} icon={<FiMessageCircle />} href=\"https://discord.gg/k3tqWzub\" isExternal>\n                            Discord\n                        </MenuItem>\n                        <MenuItem as={Link} icon={<FiMessageSquare />} href=\"https://t.me/graphlinq\" isExternal>\n                            Telegram\n                        </MenuItem>\n                        <MenuItem as={Link} icon={<FiGithub />} href=\"https://github.com/GraphLinq\" isExternal>\n                            Github\n                        </MenuItem>\n                    </MenuList>\n                </Menu>\n            </div>\n        </header>\n    );\n};\n\n// eslint-disable-next-line react/prop-types\nfunction StatusIcon({ connector }: any) {\n    if (connector === injected) {\n        return <Identicon />;\n    }\n    if (connector === walletconnect) {\n        return <Avatar bgColor=\"white\" as={WalletConnectIcon} size=\"xs\" ml={-2} mr={2} />;\n    }\n    if (connector === walletlink) {\n        return <Avatar bgColor=\"white\" as={CoinbaseWalletIcon} size=\"xs\" ml={-2} mr={2} />;\n    }\n    if (connector === fortmatic) {\n        return <Avatar bgColor=\"white\" as={FortmaticIcon} size=\"xs\" ml={-2} mr={2} />;\n    }\n    if (connector === portis) {\n        return <Avatar bgColor=\"white\" as={PortisIcon} size=\"xs\" ml={-2} mr={2} />;\n    }\n    return null;\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Sidebar.tsx",["347"],"import React from 'react'\nimport { Box, Icon, Link, Image } from '@chakra-ui/react';\nimport { NavLink, Route } from 'react-router-dom';\nimport routes from '../routes/sidebar'\nimport * as Icons from 'react-icons/hi'\nimport GLQLogo from \"../assets/logo.svg\"\nimport { ContractCard } from './ContractBalance/ContractCard';\n\ninterface SidebarProps {\n\n}\n\nconst IconSidebar = ({ icon, ...props }: any) => {\n    const iconName = (Icons as any)[icon]\n    return <Icon as={iconName} {...props} />\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({ }) => {\n    return (\n        <aside id=\"a\">\n            <Box as=\"nav\" id=\"n\" h=\"100vh\">\n                <Box display=\"flex\" flexDirection=\"column\" h=\"full\">\n            <div className=\"lo\">\n               <Image src={GLQLogo}/>\n            </div>\n            <ContractCard />\n                    <Box as=\"ul\">\n                    {routes.map((route: any, i: number) => (\n                        <li key={i}>\n                            <Link\n                                as={NavLink}\n                                exact\n                                to={route.path}\n                                _activeLink={{className:'active'}}\n                            >\n                                <Route path={route.path} exact={route.exact}></Route>\n                                <IconSidebar icon={route.icon} w={4} h={4} />\n                                {route.name}\n                            </Link>\n                        </li>\n                    ))}\n                    </Box>\n                    <Box as=\"ul\" mt=\"auto\" mb=\"1rem\">\n                    <li>\n                        <Link href=\"https://ide.graphlinq.io/\" isExternal>\n                            <IconSidebar icon=\"HiOutlineTerminal\" w={4} h={4} />\n                            IDE\n                        </Link>\n                    </li>\n                    <li>\n                        <Link href=\"https://analytics.graphlinq.io/\" isExternal>\n                            <IconSidebar icon=\"HiOutlineTrendingUp\" w={4} h={4} />\n                            Analytics\n                        </Link>\n                    </li>\n                    </Box>\n                </Box>\n            </Box>\n        </aside>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/modals.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/actions/index.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/index.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useContract.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/providers/manager.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Home.tsx",["348","349","350","351"],"import React, { useEffect } from 'react'\nimport { Alert, Link } from '@chakra-ui/react';\n\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\n\ninterface HomeProps {\n\n}\n\nconst Home: React.FC<HomeProps> = ({}) => {\n    const applyCss = () => {\n        setTimeout(() => {\n            const host = (document as any)?.querySelector(\"coingecko-coin-compare-chart-widget\")?.shadowRoot;\n            if(host == null || host.querySelector(\".highcharts-background\") == null){\n                applyCss()\n                return;\n            }\n            var sheet = new CSSStyleSheet\n            host.adoptedStyleSheets = [ sheet ];\n            host.querySelector(\".cg-container .cg-widget .cg-absolute\").style.display = \"none\";\n            host.querySelector(\"style\").innerHTML += `\n                .highcharts-credits,\n                .highcharts-scrollbar,\n                .highcharts-title, \n                .highcharts-subtitle, \n                .highcharts-exporting-group,\n                .highcharts-range-selector-group{display:none!important;}\n                .highcharts-yaxis-grid .highcharts-grid-line{stroke:#201b40!important;}\n                .highcharts-series path{stroke:#3907ff!important;fill:none!important;stroke-width:1px!important}\n                .highcharts-tick{stroke:#3907ff!important;fill:none!important;stroke-width:1px!important}\n                .highcharts-axis-line,\n                .highcharts-plot-lines-0 path{stroke:none!important;fill:none!important;stroke-width:0!important}\n                .highcharts-background{fill:none!important;}\n                .highcharts-button-pressed rect{fill:#d02fb6!important;}\n                .highcharts-axis-labels text{fill:#453e68!important}\n                .highcharts-halo{fill:#3907ff!important}\n                .highcharts-crosshair{stroke:#3907ff!important}\n                .highcharts-markers > *{stroke:none!important}\n                .highcharts-markers > *{fill:#3907ff!important}\n                .highcharts-tooltip-box > *:not(text){fill:#201b40!important;stroke:none;!important;}\n                .highcharts-tooltip-box > text{fill:#aba1ca!important;stroke:none!important;}\n                .highcharts-tooltip-box > text tspan:last-child{fill:#aba1ca!important;stroke:none!important;}\n            `;\n        }, 10)\n\n        setTimeout(() => {\n            const property = (document as any).querySelector('.grph')\n            if (property != null) {\n                property.style.opacity = 1;\n            }\n        }, 1000)\n    }\n    useEffect(() => {\n        let vendor = document.createElement(\"script\")\n        vendor.src = 'https://widgets.coingecko.com/coingecko-coin-compare-chart-widget.js'\n        document.body.appendChild(vendor)\n        applyCss()\n    }, [])\n    return (\n        <>\n            <h1>\n                Price Monitoring\n                <Link href=\"https://analytics.graphlinq.io/\" to=\"/app/templates\" className=\"bt\">\n                    Go to Analytics <i className=\"fal fa-arrow-right\"></i>\n                </Link>\n            </h1>\n            <div className=\"load\">\n               <SuspenseSpinner/>\n            </div>\n            <div className=\"grph\" dangerouslySetInnerHTML={{\n                __html: '<h2>Graphlinq Protocol • <strong>GLQ</strong></h2><coingecko-coin-compare-chart-widget coin-ids=\"graphlinq-protocol\" currency=\"usd\" locale=\"us\"></coingecko-coin-compare-chart-widget>'\n            }}></div>\n        </>\n    );\n}\n\nexport default Home;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/BuyGlq.tsx",["352"],"import React from 'react'\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Alert, Box } from '@chakra-ui/react';\n\ninterface BuyGlqProps {\n\n}\n\nconst BuyGlq: React.FC<BuyGlqProps> = ({ }) => {\n\n    const { account } = useWeb3React();\n\n    const apiKey = process.env.REACT_APP_TRANSAK_API_KEY\n\n    return (\n        <Box maxW={{ sm: 'xl' }} mx={{ sm: 'auto' }} w={{ sm: 'full' }}>\n            <h1 className=\"tc\">Buy GLQ with FIAT</h1>\n            <Box className=\"priv\">\n                <Alert status=\"warning\">\n                    <i className=\"fal fa-info-circle\"></i>\n                    <p>You can buy GLQ token with fiat from the secure gateway crypto provider <a href=\"https://transak.com\" target=\"_blank\" rel=\"noreferrer\">Transak.com,</a> with only a 1% fee from your bank withdrawal or card payment.</p>\n                </Alert>\n                <iframe\n                    title=\"Buy GLQ with FIAT - Transak\"\n                    id=\"transakOnOffRampWidget\"\n                    src={\n                        \"https://global.transak.com?apiKey=\" + apiKey +\n                        \"&amp;cryptoCurrencyCode=GLQ&defaultCryptoCurrency=GLQ&cryptoCurrencyList=GLQ&hideMenu=true&themeColor=2334ff&walletAddress=\" + account}\n                    style={{ width: 520, height: 580, borderRadius: 16, overflow: \"hidden\" }} scrolling=\"no\"></iframe>\n            </Box>\n        </Box>\n    );\n}\n\nexport default BuyGlq;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Presale.tsx",["353","354","355"],"import { Alert, Box, Button, Divider, Flex, Input, Progress, Spacer, Stat, StatHelpText, StatLabel, StatNumber, useClipboard, VStack } from '@chakra-ui/react';\nimport React, { useEffect } from 'react'\nimport { usePresaleContract } from '../hooks/useContract';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { utils } from 'ethers';\n\nconst GLQRate = 715000\n\nconst Presale = () => {\n\n    const [access, setAccess] = React.useState(true);\n    const [error, setError] = React.useState(\"\");\n    const [pending, setPending] = React.useState(\"\");\n    const [success, setSuccess] = React.useState(\"\");\n\n    const { account } = useWeb3React();\n    const contract = usePresaleContract(process.env.REACT_APP_PRIVATE_PRESALE_CONTRACT);\n    const [addr, setAddr] = React.useState(process.env.REACT_APP_PRIVATE_PRESALE_CONTRACT ?? \"\")\n    const { hasCopied, onCopy } = useClipboard(addr)\n    const [raised, setRaised] = React.useState(0)\n    const [invested, setInvested] = React.useState(0)\n    const [progressRaise, setProgressRaise] = React.useState(0)\n\n\n    useEffect(() => {\n        const refreshRaisedFunds = async () => {\n            if (contract == null || !access) return\n            try {\n                const currentRaised = await contract.getTotalRaisedEth()\n                const amount = Number(utils.formatUnits(currentRaised.toString(), 'ether'))\n                const progress = (amount / 70) * 100\n\n                const currentInvestment = await contract.getAddressInvestment(account)\n                const amountInvested = Number(utils.formatUnits(currentInvestment.toString(), 'ether'))\n                \n                setRaised(Number(amount))\n                setInvested(Number(amountInvested))\n                setProgressRaise(progress)\n            } catch (e) { console.error(e) }\n\n            setTimeout(refreshRaisedFunds, 10000)\n        }\n        refreshRaisedFunds()\n\n    }, [account, access])\n    \n    const claimToken = async () => {\n        if (contract == null || !access) return\n        setError(\"\"); setSuccess(\"\");\n        try {\n            setPending(\"Pending, check your wallet extension to execute the chain transaction...\")\n            const result = await contract.claimGlq({from: account})\n            setPending(\"Waiting for Ethereum confirmations...\")\n            await result.wait()\n            setSuccess(result.hash)\n        }\n        catch (e)\n        {\n            if (e.data?.message) { setPending(\"\"); setError(`Error: ${e.data?.message}`);return; }\n            if (e.error?.message) {\n                setPending(\"\"); setError(`Error: ${e.error.message}`); return;}\n            if (e.message) { setPending(\"\"); setError(`Error: ${e.message}`); }\n        }\n    }\n\n    return (\n        <>\n            <Box maxW={{ sm: 'xl' }} mx={{ sm: 'auto' }} w={{ sm: 'full' }}>\n                <h1 className=\"tc\">{access ? \"Private Pre-sale Round\" : \"Private Pre-sale Round Access\"}</h1>\n                <Alert status=\"info\">\n                    <i className=\"fal fa-info-circle\"></i>\n                    <p>The presale is ended and the smart-contract do not accept any more transactions, do not send Ethereum, \n                        you can buy GLQ from <a target=\"_blank\" rel=\"noreferrer\" href=\"https://app.uniswap.org/#/swap?inputCurrency=0x9F9c8ec3534c3cE16F928381372BfbFBFb9F4D24\">Uniswap</a> or any of our listed CEXs.</p>\n                </Alert>\n                {error &&\n                <Alert status=\"error\">\n                    <i className=\"fal fa-times-circle\"></i>\n                    <p>{error}</p>\n                </Alert>}\n                {!success && pending &&\n                <Alert status=\"info\">\n                    <i className=\"fal fa-info-circle\"></i>\n                    <p>{pending}</p>\n                </Alert>}\n                {success &&\n                <Alert status=\"success\">\n                    <i className=\"fal fa-check-circle\"></i>\n                    <p>You successfully claimed your GLQ tokens from the Private sale, Congratulations!</p>\n                    <p><small>Transaction hash : <a href={`https://etherscan.com/tx/${success}`} target=\"_blank\" rel=\"noreferrer\">{success}</a></small></p>\n                </Alert>\n                }\n                <Box className=\"priv\">\n                    <VStack\n                        align=\"stretch\"\n                        mx=\"auto\"\n                        maxW=\"xl\"\n                        hidden={!access}\n                    >\n                        <Flex bgGradient=\"linear(to-r, indigo.500,brand.500)\" rounded=\"md\" align=\"center\">\n                            <Box>\n                                <h3>Claim GLQ Token</h3>\n                                <Divider my={2} />\n                                <p className=\"txt\">You can claim <Box as=\"span\" fontSize=\"md\" fontWeight=\"high\">{(invested *  GLQRate).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} GLQ = {invested} ETH </Box></p>\n                                <p className=\"txt\"><small>After sending ETH to the Presale Contract, Claim your GLQ Token (will be released at Uniswap listing time).</small></p>\n                            </Box>\n                            <Spacer />\n                            <Button className=\"bt\" onClick={claimToken}>\n                                Claim Token\n                            </Button>\n                        </Flex>\n                        <Stat className=\"privb\">\n                            <StatLabel>1 ETH equals</StatLabel>\n                            <StatNumber>~ {GLQRate.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} GLQ</StatNumber>\n                            <StatHelpText>~ 0.002464$ per GLQ</StatHelpText>\n                        </Stat>\n                        <Alert status=\"warning\">\n                            <i className=\"fal fa-info-circle\"></i>\n                            <p>Limited to 1 ETH per wallet</p>\n                        </Alert>\n                        <p className=\"txt\">\n                            The below address is the contract hosted on ETH network for our private presale,\n                            you can send ETH on it and will receive automatically the GLQ back.\n                        </p>\n                        <Divider />\n                        <span style={{ paddingTop: 10, float: 'right', color: '#3907ff' }}>\n                            <a target=\"_blank\" href=\"https://graphlinq.io/Cybersecurity_Audit_CTDSEC_GraphLinq_Presale.pdf\" rel=\"noreferrer\">\n                                &gt; Review the full contract audit here\n                                </a>\n                            <a style={{marginLeft: \"4rem\"}} target=\"_blank\" href=\"https://github.com/GraphLinq/GraphLinq/blob/master/NodeBlock.GraphLinqPrivateSaleContract/contracts/GraphLinqPrivateSale.sol\" rel=\"noreferrer\">\n                                &gt; View contract github\n                                </a>\n                        </span>\n                        <Flex className=\"fd in\">\n                            <Input value={addr} isReadOnly />\n                            <Button onClick={onCopy} ml={2} className=\"sbt\">\n                                {hasCopied ? \"Copied\" : \"Copy\"}\n                            </Button>\n                        </Flex>\n                        <Box>\n                            <Progress className=\"prog\" value={progressRaise}/>\n                            <p className=\"txt tc\">\n                                <small><b>{raised} / 70</b> ETH raised.</small>\n                            </p>\n                        </Box>\n                        <p className=\"txt\">\n                            Do not send ETH from exchange address or you may lose your GLQ token!\n                        </p>\n                        {/* <Alert status=\"error\" rounded=\"lg\">\n                            <AlertIcon />\n                            Do not send ETH from exchange address or you may lose your GLQ token!\n                        </Alert> */}\n                    </VStack>\n                </Box>\n                <Alert status=\"warning\">\n                    <i className=\"fal fa-info-circle\"></i>\n                    <p>\n                        Read our documentation to learn more about the pre-sale process. \n                        \n                        <Box\n                        target=\"_blank\"\n                        as=\"a\"\n                        href=\"https://docs.graphlinq.io/token/3-tokenomics\"\n                        display={{ base: 'block', sm: 'revert' }}\n                        >Read more</Box>\n                    </p>\n                </Alert>\n            </Box>\n        </>\n    );\n}\n\nexport default Presale;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Graphs.tsx",["356","357","358"],"import React, { useState, useEffect } from 'react';\nimport { VStack, Box, Flex, Text, Spacer, Alert, Link } from '@chakra-ui/react';\nimport { GraphCard } from '../components/Graphs/GraphCard';\nimport { GraphResponse } from '../providers/responses/graph';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport GraphService from '../services/graphService';\nimport { GRAPH_UPDATE } from '../redux/actions';\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\nimport { NavLink } from 'react-router-dom';\n\ninterface GraphsProps {\n\n}\n\nconst Graphs: React.FC<GraphsProps> = ({ }) => {\n\n    const [reachable, setReacheable] = useState(true)\n    const { account } = useWeb3React();\n    const dispatch = useDispatch();\n\n    const graphsList: GraphResponse[] = useSelector(\n        (state: any) => state.modals.graphs.list\n    );\n\n    const loaded: boolean = useSelector(\n        (state: any) => state.modals.graphs.loaded\n    );\n\n    useEffect(() => {\n        const refreshfnc = async () => {\n            const graphs: GraphResponse[] | undefined = await GraphService.listGraphs();\n            if (graphs === undefined) {\n                return setReacheable(false)\n             }\n\n            dispatch({\n                name: \"graphs\",\n                type: GRAPH_UPDATE,\n                payload: { graphs, loaded: true },\n            })\n\n            setTimeout(refreshfnc, 10000)\n        };\n\n        refreshfnc()\n    }, [account])\n\n    return (\n        <>\n            <h1>\n                Graphs\n                <Link as={NavLink} to=\"/app/home\" className=\"bt\">\n                    New Graph <i className=\"fal fa-plus-circle\"></i>\n                </Link>\n            </h1>\n            <Alert status=\"info\">\n                <i className=\"fal fa-info-circle\"></i> \n                <p>Below is the list of your Graphs. You can view logs, stop or delete each one of them.</p>\n            </Alert>\n            {reachable && !loaded &&\n            <SuspenseSpinner/>}\n            {!reachable &&\n            <Alert status=\"info\">\n                <i className=\"fal fa-times-circle\"></i> \n                <p>The engine main-net network can't be reached, please try again later or contact the <i>GraphLinq Support</i>.</p>\n            </Alert>\n            }\n            {graphsList.length == 0 && loaded &&\n                <Alert status=\"info\">\n                    <i className=\"fal fa-exclamation-triangle\"></i> \n                    <p>You don't have created or deployed any graph yet, refer to our <Box\n                            as=\"a\"\n                            target=\"_blank\"\n                            marginStart=\"1\"\n                            href=\"https://docs.graphlinq.io/graph\"\n                            color='amber.600'\n                            _hover={{ color: 'amber.700' }}\n                            display={{ base: 'block', sm: 'revert' }}\n                        >documentation</Box> to start your journey.</p>\n                </Alert>\n            }\n            {graphsList.length > 0 &&\n            <div className=\"table\">\n                <Box py={3} px={8} className=\"th\">\n                    <Flex alignItems=\"center\">\n                        <Box flex=\"1 1 0%\" display=\"flex\" px={2}>\n                            <Text fontSize=\"xs\">Name :</Text>\n                            <Spacer />\n                        </Box>\n                        <Box display=\"flex\" width=\"48px\" minH=\"48px\" justifyContent=\"center\" px={2} />\n                        <Box display=\"flex\" width=\"200px\" px={2}>\n                            <Text fontSize=\"xs\">Hosted API :</Text>\n                            <Spacer />\n                        </Box>\n                        <Box display=\"flex\" width=\"200px\" px={2}>\n                            <Text fontSize=\"xs\">Execution cost :</Text>\n                            <Spacer />\n                        </Box>\n                        <Box display=\"flex\" width=\"160px\" px={2}>\n                            <Text fontSize=\"xs\">Running since :</Text>\n                            <Spacer />\n                        </Box>\n                        <Box display=\"flex\" width=\"160px\" px={2}>\n                            <Text fontSize=\"xs\">Created :</Text>\n                            <Spacer />\n                        </Box>\n                        <Box display=\"flex\" width=\"135px\" minH=\"48px\" justifyContent=\"center\" px={2} />\n                        <Box display=\"flex\" width=\"40px\" minH=\"48px\" justifyContent=\"center\" />\n                    </Flex>\n                </Box>\n                <VStack spacing={8} mb={4}>\n                    {graphsList.sort((a: GraphResponse, b: GraphResponse) => { return b.state - a.state }).map((x: GraphResponse, i: number) => {\n                        return <GraphCard key={`graph-${i}`} GraphInfo={x} />\n                    })}\n                </VStack>\n            </div>\n            }\n        </>\n    );\n}\n\nexport default Graphs;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Templates.tsx",["359","360","361","362","363","364"],"import React, { Suspense, useEffect, useRef, useState } from 'react'\nimport { Alert, Box, Button, FormControl, FormLabel, Grid, GridItem, Heading, Icon, Input, SimpleGrid, useRadioGroup, Text } from '@chakra-ui/react';\nimport { HiOutlineCheckCircle, HiOutlineInformationCircle } from 'react-icons/hi';\nimport { GraphStateEnum } from '../enums/graphState';\nimport { RadioCard } from '../components/GraphCreation/RadioCard';\nimport { TemplateCard } from '../components/GraphCreation/TemplateCard';\nimport { GraphTemplate } from '../providers/responses/templateGraph';\nimport GraphService from '../services/graphService';\nimport { GraphCreation } from '../components/GraphCreation/GraphCreation';\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\n\ninterface TemplatesProps {\n\n}\n\nconst Templates: React.FC<TemplatesProps> = ({ }) => {\n\n    const [fileUpload, setFileUpload] = useState({ loaded: false, file: {} })\n    const [graphName, setGraphName] = useState(\"\")\n    const [template, selectedTemplate] = useState({ loaded: false, template: { bytes: \"\", idgraphsTemplates: 0, title: \"\", description: \"\", customImg: \"\" } })\n    const [templateLoaded, setTemplateLoaded] = useState(false)\n    const [templates, setTemplates] = useState<GraphTemplate[]>([])\n\n    useEffect(() => {\n        const fetchTemplates = async () => {\n            const templates: GraphTemplate[] = await GraphService.listGraphsTemplates()\n            setTemplates(templates)\n            setTemplateLoaded(true)\n        }\n        fetchTemplates()\n    }, [])\n\n    const { getRootProps, getRadioProps } = useRadioGroup({\n        name: \"template\",\n        onChange: (e) => {\n            const template = templates.find(x => x.key === e)\n            if (template !== undefined) {\n                selectedTemplate({ loaded: true, template: template })\n                console.log(template)\n            }\n        },\n    })\n\n    const group = getRootProps()\n\n    const [step, setStep] = useState(true);\n\n    const [graphData, setGraphData] = useState('')\n    const [isLoading, setIsLoading] = useState(false)\n    const fetchGraphData = async (template: any) => {\n        return await GraphService.decompressGraph(template)\n    }\n\n    async function updateStep() {\n        setIsLoading(true)\n        fetchGraphData(template.template.bytes)\n            .then(data => {\n                setGraphData(JSON.parse(data))\n                setStep(!step)\n                setIsLoading(false)\n            });\n    }\n\n    return (\n        <>\n            <h1>\n                Template Wizard\n                <GraphCreation className=\"bt\">\n                    Import .GLQ <i className=\"fal fa-upload\"></i>\n                </GraphCreation>\n            </h1>\n            <Alert status=\"info\">\n                <i className=\"fal fa-info-circle\"></i> GraphLinq’s Instant Deploy Wizard lets you choose a template, fill in variables and deploy it instantly without having to code or making any changes on the IDE.\n            </Alert>\n            <Grid templateColumns={[\"repeat(1, 1fr)\", \"repeat(1, 1fr)\", \"repeat(3, 1fr)\"]} gap={6}>\n                <GridItem colSpan={2} rounded=\"xl\" w=\"100%\" h=\"full\" bg=\"#15122b\" p=\"1.5rem\" display=\"flex\" flexDirection=\"column\">\n                    {step &&\n                        <TemplatesList isLoading={isLoading} templateLoaded={templateLoaded} group={group} template={template} templates={templates} getRadioProps={getRadioProps} fileUpload={fileUpload} graphName={graphName} setGraphName={setGraphName} updateStep={updateStep} />\n                    }\n                    {!step &&\n                        <Suspense fallback=\"loading\">\n                            <TemplateVars templateData={graphData} graphName={graphName} templateName={template.template.title} templateDesc={template.template.description} step={step} setStep={setStep} />\n                        </Suspense>\n                    }\n                </GridItem>\n                <GridItem colSpan={1} rounded=\"xl\" w=\"100%\" minH=\"275\" maxH=\"450px\" bg=\"#15122b\" p=\"1.5rem\" display=\"flex\" flexDirection=\"column\">\n                    <Box mx=\"auto\" textAlign=\"center\">\n                        <Icon as={HiOutlineInformationCircle} color=\"#2334ff\" w={8} h={8} />\n                        <Heading size=\"md\" color=\"#ece7fd\" my=\"0.75rem\">How to use a template ?</Heading>\n                    </Box>\n                    <Box as=\"ul\" textAlign=\"left\" mx=\"auto\" mt=\"1rel\">\n                        <li style={{ marginTop: '.5rem', marginBottom: '.5rem' }}>You can :</li>\n                        <li>- Select a template from the list</li>\n                        <li>- Fill in required variables</li>\n                        <li style={{ marginTop: '.5rem', marginBottom: '.5rem' }}>Or for more advanced user :</li>\n                        <li>- Select a template</li>\n                        <li>- Download it</li>\n                        <li>- Upload & Edit On the <a href=\"https://ide.graphlinq.io/\" target=\"_blank\" style={{ color: \"#2334ff\" }}>IDE</a> to suit their needs</li>\n                    </Box>\n                    <Box mt=\"auto\" mx=\"auto\" textAlign=\"center\">\n                        You can also make your own custom Graph from scratch using our <a href=\"https://ide.graphlinq.io/\" target=\"_blank\" style={{ color: \"#2334ff\" }}>IDE</a>\n                    </Box>\n                </GridItem>\n            </Grid>\n        </>\n    );\n}\n\nconst TemplatesList = (props: any) => {\n\n    return (\n        <>\n            <Heading size=\"md\" color=\"#ece7fd\" my=\"1rem\">Name Your Graph :</Heading>\n            <FormControl id=\"graphName\" mb=\"2.5rem\" isRequired>\n                <Input type=\"text\" variant=\"flushed\" focusBorderColor=\"#2334ff\" placeholder=\"Graph Name\" value={props.graphName} onChange={(e) => { props.setGraphName(e.target.value) }} />\n            </FormControl>\n            <Heading size=\"md\" color=\"#ece7fd\" mb=\"1.75rem\">Templates :</Heading>\n            {props.templateLoaded\n                ? < SimpleGrid className=\"ls-g\" {...props.group} height=\"400px\" overflowY=\"scroll\">\n                    {props.templates.map((template: any) => {\n                        const radio = props.getRadioProps({ value: template.key })\n                        return (\n                            <RadioCard clickable={false} fileLoaded={props.fileUpload.loaded} key={template.key} {...radio}>\n                                <TemplateCard TemplateImageUrl={template.customImg} TemplateImageAlt={template.description} TemplateTitle={template.title} />\n                            </RadioCard>\n                        )\n                    })}\n                </SimpleGrid>\n                : <SuspenseSpinner />\n            }\n            {\n                props.template.loaded && props.graphName !== \"\" &&\n                <Box ml=\"auto\" mt=\"0.75rem\">\n                    <Button as=\"a\"\n                        bgColor=\"transparent\" variant=\"outline\" borderColor=\"#aba1ca\" color=\"#aba1ca\" _hover={{ bgColor: \"#2334ff\", borderColor: '#2334ff', color: \"white\" }} mr=\"1rem\"\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(props.template.template.bytes)}`}\n                        download={`${props.template.template.key}.glq`}\n                    >\n                        Download .GLQ\n                    </Button>\n                    <Button as=\"a\"\n                        bgColor=\"transparent\" variant=\"outline\" borderColor=\"#aba1ca\" color=\"#aba1ca\" _hover={{ bgColor: \"#2334ff\", borderColor: '#2334ff', color: \"white\" }} mr=\"1rem\"\n                        href={`https://ide.graphlinq.io/?loadGraph=${props.template.template.idgraphsTemplates}`}\n                        target=\"_blank\"\n                    >\n                        Edit on IDE\n                    </Button>\n                    <Button bgColor=\"#2334ff\" color=\"white\" _hover={{ bgColor: \"#202cc3\" }} onClick={() => props.updateStep()} isLoading={props.isLoading} loadingText=\"Loading\">Next</Button>\n                </Box>\n            }\n        </>\n    );\n}\n\ninterface TemplateRoot {\n    name: string\n    nodes: TemplateNode[]\n    comments: any[]\n}\n\ninterface TemplateNode {\n    id: string\n    type: string\n    out_node?: string\n    can_be_executed: boolean\n    can_execute: boolean\n    friendly_name: string\n    block_type: string\n    _x: number\n    _y: number\n    in_parameters: TemplateInParameter[]\n    out_parameters: TemplateOutParameter[]\n}\n\ninterface TemplateInParameter {\n    id: string\n    name: string\n    type: string\n    value: any\n    assignment: string\n    assignment_node: string\n    value_is_reference: boolean\n}\n\ninterface TemplateOutParameter {\n    id: string\n    name: string\n    type: string\n    value?: string\n    assignment: string\n    assignment_node: string\n    value_is_reference: boolean\n}\n\nconst TemplateVars = (props: any) => {\n\n    const [decompTemplate, setDecompTemplate] = useState<TemplateRoot>(props.templateData)\n    const [compressedTemplate, setCompressedTemplate] = useState<any>()\n\n    const [fields, setFields] = useState(new Map())\n\n    const handleChange = (i: any, v: any, node: TemplateNode) => {\n        setFields(new Map(fields.set(i, v)));\n        setDecompTemplate((decompTemplate) => {\n            node.out_parameters[0].value = v\n            return ({\n                ...decompTemplate\n            })\n        })\n    }\n\n    useEffect(() => {\n        decompTemplate?.nodes\n            .filter(node => node.block_type === \"variable\" && node.friendly_name !== \"do_not_show\")\n            .map((node, i: number) => (\n                handleChange(i, node.out_parameters[0].value, node)\n            ))\n    }, [])\n\n    const compressGraph = async (template: any) => {\n        const compData = await GraphService.compressGraph(template)\n        setCompressedTemplate(compData)\n        return compData\n    }\n\n    const previous = () => {\n        props.setStep(true)\n        setFields(new Map())\n    }\n\n    const [error, setError] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false)\n\n    async function deployGraphTemplate(data: any, name: any) {\n        try {\n            const result: String | undefined = await GraphService.deployGraph({\n                state: GraphStateEnum.Starting,\n                bytes: data,\n                alias: name,\n                hash: undefined\n            })\n\n            if (result instanceof String) {\n                setSuccess(`${result}`)\n            } else {\n                setError('Your graph file was incomplete or invalid, please check it on the IDE')\n            }\n        }\n        catch (e) {\n            console.error(e)\n            setError('An error occured while trying to parse your file, please try again')\n        }\n        executeScroll()\n    }\n\n    async function deployTemplate() {\n        setIsLoading(true)\n        compressGraph(JSON.stringify(decompTemplate))\n            .then(data => {\n                deployGraphTemplate(data, props.graphName)\n                setIsLoading(false)\n            })\n    }\n\n    const resultRef = useRef<HTMLInputElement>(null)\n\n    const executeScroll = () => resultRef.current?.scrollIntoView()\n\n    return (\n        <>\n            {success &&\n                <Alert status=\"success\" mb=\"1rem\" ref={resultRef}>\n                    <Icon as={HiOutlineCheckCircle} color=\"#59b819\" w=\"8\" h=\"8\" />\n                    <p><b>Graph Successfully started, Congratulations !</b><br /><br />\n                        {decompTemplate?.name || 'Template'} execution unique hash : {success}\n                    </p>\n                </Alert>\n            }\n            {error &&\n                <Alert style={{ marginBottom: \"15px\", marginTop: \"15px\" }} status=\"error\" ref={resultRef}>\n                    <i className=\"fal fa-times-circle\"></i>\n                    <p>{error}</p>\n                </Alert>\n            }\n            <Heading size=\"md\" color=\"#ece7fd\" mb=\"1rem\">{props.graphName} :</Heading>\n            <Text size=\"sm\" color=\"#c4b9e5\" mb=\".5rem\"><b>Template: </b>{props.templateName}</Text>\n            <p><b>Description: </b>{props.templateDesc}</p>\n            <form>\n                {decompTemplate?.nodes\n                    .filter(node => node.block_type === \"variable\" && node.friendly_name !== \"do_not_show\")\n                    .map((node, i: number) => (\n                        <FormControl my=\"2.5rem\" id={node.id} key={node.id} isRequired>\n                            <FormLabel>{node.friendly_name} :</FormLabel>\n                            <Input id={node.id} key={node.id} type=\"text\" variant=\"flushed\" focusBorderColor=\"#2334ff\" placeholder={node.friendly_name} value={fields.get(i) || node.out_parameters[0].value || ''} onChange={(e) => handleChange(i, e.target.value, node)} />\n                        </FormControl>\n                    ))}\n            </form>\n            <Box ml=\"auto\" mt=\"auto\">\n                <Button bgColor=\"transparent\" variant=\"outline\" borderColor=\"#aba1ca\" color=\"#aba1ca\" _hover={{ bgColor: \"#2334ff\", borderColor: '#2334ff', color: \"white\" }} mr=\"1rem\" onClick={previous}>Previous</Button>\n                <Button bgColor=\"#2334ff\" color=\"white\" _hover={{ bgColor: \"#202cc3\" }} onClick={deployTemplate} isLoading={isLoading} loadingText=\"Loading\">Deploy</Button>\n            </Box>\n            </>\n    );\n}\n\nexport default Templates;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/utils/index.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/GraphCreation.tsx",["365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState, useEffect } from 'react'\nimport { Box, Button, Editable, EditableInput, Alert, AlertTitle, Text, AlertDescription, AlertIcon, EditablePreview, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, propNames, SimpleGrid, Stack, Tab, TabList, TabPanel, TabPanels, Tabs, useDisclosure, useRadioGroup, Icon, Flex } from '@chakra-ui/react';\nimport { TemplateCard } from './TemplateCard';\nimport { BlankCard } from './BlankCard';\nimport { TemplateVariables } from './TemplateVariables';\nimport { RadioCard } from './RadioCard';\nimport { TemplateFile } from './TemplateFile';\nimport GraphService from '../../services/graphService';\nimport { GraphStateEnum } from '../../enums/graphState';\nimport { FiEdit } from 'react-icons/fi';\nimport Cookies from 'js-cookie'\nimport { GraphTemplate } from '../../providers/responses/templateGraph';\n\n\nexport const GraphCreation = (props: any) => {\n\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const [fileUpload, setFileUpload] = useState({ loaded: false, file: {} })\n    const [graphName, setGraphName] = useState(\"Unnamed Graph\")\n    const [template, selectedTemplate] = useState({ loaded: false, template: { bytes: \"\", idgraphsTemplates: 0 } })\n\n    const inputFileRef = React.createRef()\n    const [templates, setTemplates] = useState<GraphTemplate[]>([])\n\n    useEffect(() => {\n        const fetchTemplates = async () => {\n            const templates: GraphTemplate[] = await GraphService.listGraphsTemplates()\n            setTemplates(templates)\n        }\n        fetchTemplates()\n    }, [])\n\n    const { getRootProps, getRadioProps } = useRadioGroup({\n        name: \"template\",\n        defaultValue: \"blank\",\n        onChange: (e) => {\n            const template = templates.find(x => x.key === e)\n            if (template !== undefined) {\n                selectedTemplate({ loaded: true, template: template })\n            }\n        },\n    })\n\n    const group = getRootProps()\n\n    const [step, setStep] = useState(true);\n    const [error, setError] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n    async function onFileChange(e: any) {\n        console.log(e.target.files[0])\n        setFileUpload({ loaded: true, file: e.target.files[0] })\n        setGraphName(e.target.files[0].name.toUpperCase().split('.GLQ')[0])\n    }\n\n    function resetEntry() {\n        selectedTemplate({ loaded: false, template: { bytes: \"\", idgraphsTemplates: 0 } })\n        setFileUpload({ loaded: false, file: {} })\n        setStep(true)\n    }\n\n    function onInputClick(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n        const element = event.target as HTMLInputElement\n        element.value = ''\n    }\n\n    function readFileDataAsBase64(file: File) {\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = (event: any) => {\n                resolve(event.target.result);\n            };\n\n            reader.onerror = (err) => {\n                reject(err);\n            };\n\n            reader.readAsBinaryString(file);\n        });\n    }\n\n    async function deployFileGraph(file: File) {\n        try {\n            const data: any = await readFileDataAsBase64(file)\n            const result: String | undefined = await GraphService.deployGraph({\n                state: GraphStateEnum.Starting,\n                bytes: data,\n                alias: graphName,\n                hash: undefined\n            })\n\n            if (result instanceof String) {\n                setSuccess(`${result}`)\n            } else {\n                setError('Your graph file was incomplete or invalid, please check it on the IDE')\n            }\n        }\n        catch (e) {\n            console.error(e)\n            setError('An error occured while trying to parse your file, please try again')\n        }\n    }\n\n\n    function updateStep() {\n        if (!step && fileUpload.loaded) {\n            deployFileGraph(fileUpload.file as File)\n            return\n        }\n        setStep(!step)\n    }\n\n    return (\n        <>\n            <button onClick={onOpen} {...props}>{props.children}</button>\n            <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\" scrollBehavior=\"inside\">\n                <ModalOverlay className=\"ov\" />\n                <ModalContent className=\"mod mod-cre\">\n                    <ModalHeader mt='0'>\n                        {step\n                        ? <h1>Import a Graph</h1>\n                        : <Box>Settings Deployment</Box>\n                        }\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        {success &&\n                            <Alert status=\"success\">\n                                <i className=\"fal fa-check-circle\"></i>\n                                <p>Graph Successfully started, Congratulations!</p>\n                                <p><small> {graphName} execution unique hash : {success}</small></p>\n                            </Alert>\n                        }\n                        {error &&\n                            <Alert style={{ marginBottom: \"15px\", marginTop: \"15px\" }} status=\"error\">\n                                <i className=\"fal fa-times-circle\"></i>\n                                <p>{error}</p>\n                            </Alert>\n                        }\n\n                        {!step && fileUpload.loaded &&\n                            <TemplateFile name={graphName} file={fileUpload.file as any} />}\n\n                    </ModalBody>\n                    <ModalFooter className=\"fot\">\n                        {fileUpload.loaded &&\n                            <Box className=\"inf\">\n                                <p>Graph file uploaded successfully: size of <b>{(fileUpload.file as any).size} bytes</b> (name: {(fileUpload.file as any).name})</p>\n                            </Box>\n                        }\n                        {!fileUpload.loaded && template.loaded &&\n                            <Box className=\"inf\">\n                                <p><b>{(template.template as any).title}</b> selected, go to IDE to setup variables and deploy the graph here by importing the file.</p>\n                            </Box>\n                        }\n                        <input ref={inputFileRef as any} id=\"files\" hidden={true} type=\"file\" onClick={onInputClick} onChange={onFileChange} />\n                        {!fileUpload.loaded && <Button onClick={() => { (inputFileRef as any).current.click() }} htmlFor=\"files\" className=\"sbt\" hidden={!step}>Import .GLQ</Button>}\n                        {!step || fileUpload.loaded &&\n                            <Button onClick={() => { resetEntry() }} className=\"sbt\">Cancel</Button>}\n                        {!step &&\n                            <Button className=\"sbt\" mr={3} onClick={() => { setSuccess(\"\"); setStep(!step); }}>Previous</Button>\n                        }\n                        {!success &&\n                            <div>\n                                {fileUpload.loaded && !step &&\n                                    <Button className=\"bt\" onClick={() => updateStep()}>Next</Button>}\n                                {fileUpload.loaded && step &&\n                                    <Button className=\"bt\" onClick={() => updateStep()}>Create</Button>}\n\n                                {!fileUpload.loaded && template.loaded &&\n                                    <Button className=\"bt\" onClick={() => {\n                                        var host = window.location.hostname.replace('app.', '')\n                                        console.log(host)\n                                        Cookies.set('graph', template.template.bytes, { domain: host });\n                                        window.open(`https://ide.graphlinq.io/?loadGraph=${template.template.idgraphsTemplates}`, \"_blank\")\n                                    }}>Go to IDE</Button>}\n\n                            </div>}\n\n                        {/* {!success &&\n                            <Button colorScheme=\"brand\" onClick={() => updateStep()}>\n                                {fileUpload.loaded && !step &&\n                                <span>Next</span>}\n                                {fileUpload.loaded && step &&\n                                <span>Deploy</span>}\n                                \n                                {!fileUpload.loaded && step &&\n                                <span>Go to IDE</span>}\n                                { {step ? \"Next\" : \"Create\"} }\n                            </Button>\n                        } */}\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/services/graphService.tsx",["392","393","394","395"],"import { GraphStateEnum } from \"../enums/graphState\";\nimport { ErrorResponse } from \"../providers/error\";\nimport ManagerProvider from \"../providers/manager\"\nimport { DeployGraphRequest } from \"../providers/requests/deploy\";\nimport AuthResponse from \"../providers/responses/auth\"\nimport { DeployGraphResponse } from \"../providers/responses/deploy\";\nimport { GraphResponse } from \"../providers/responses/graph\";\nimport { GraphLogs, Log } from \"../providers/responses/logs\";\nimport { GraphStateResponse } from \"../providers/responses/state\";\nimport { GraphStateRequest } from \"../providers/requests/state\"\nimport { ResponseSuccess } from \"../providers/responses/success\";\nimport { CompressGraphResponse } from \"../providers/responses/compress\";\nimport { DecompressGraphResponse } from \"../providers/responses/decompress\";\nimport { GraphTemplate, TemplateGraphResponse } from \"../providers/responses/templateGraph\";\n\nexport default class GraphService {\n    public static async deployGraph(request: DeployGraphRequest): Promise<String | undefined>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: DeployGraphResponse = await ManagerProvider.deployGraph(request, session.token)\n            return new String(result.hash)\n        }\n        catch (error)\n        {\n            console.error(error)\n            return undefined;\n        }\n    }\n\n    public static async listGraphs(): Promise<GraphResponse[] | undefined>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: GraphResponse[] = await ManagerProvider.listGraphs(session.token)\n            \n            result.forEach(x => { x.loadedAt = new Date(x.loadedAt); x.createdAt = new Date(x.createdAt) })\n            return result\n        }\n        catch (error)\n        {\n            console.error(error)\n            return undefined;\n        }\n    }\n\n    public static async graphState(hash: string): Promise<GraphStateResponse | undefined>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: GraphStateResponse = await ManagerProvider.fetchGraphState({ hash }, session.token)\n            return result\n        }\n        catch (error)\n        {\n            console.error(error)\n            return undefined;\n        }\n    }\n\n    public static async graphLogs(hash: string): Promise<Log[] | undefined>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: GraphLogs = await ManagerProvider.fetchGraphLogs({ hash }, session.token)\n            return result.logs\n        }\n        catch (error)\n        {\n            console.error(error)\n            return undefined;\n        }\n    }\n\n    public static async setGraphState(state: GraphStateEnum, hash: string): Promise<boolean>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: ResponseSuccess = await ManagerProvider.updateGraphState({ state, hash }, session.token)\n            return result.success\n        }\n        catch (error)\n        {\n            console.error(error)\n            return false;\n        }\n    }\n\n    public static async compressGraph(toCompress: any): Promise<string>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: CompressGraphResponse = await ManagerProvider.compressGraphData({ data: toCompress }, session.token)\n            return result.compressed\n        }\n        catch (error)\n        {\n            console.error(error)\n            return error;\n        }\n    }\n\n    public static async decompressGraph(toDecompress: any): Promise<string>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: DecompressGraphResponse = await ManagerProvider.decompressGraphData({ data: toDecompress }, session.token)\n            return result.decompressed\n        }\n        catch (error)\n        {\n            console.error(error)\n            return error;\n        }\n    }\n\n    public static async removeGraph(hash: string): Promise<boolean>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: ResponseSuccess = await ManagerProvider.stopAndDeleteGraph({ state: GraphStateEnum.Stopped, hash }, session.token)\n            return result.success\n        }\n        catch (error)\n        {\n            console.error(error)\n            return false;\n        }\n    }\n    public static async listGraphsTemplates(): Promise<GraphTemplate[]>\n    {\n        try\n        {\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\n            const result: TemplateGraphResponse = await ManagerProvider.getGraphsTemplates(session.token)\n            if (result.success) {\n                return result.templates\n            }\n        }\n        catch (error) {\n            console.error(error)    \n        }\n        return []\n    }\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/TemplateCard.tsx",["396","397","398"],"import React from 'react'\nimport { Box, Image, Badge, useRadio } from '@chakra-ui/react';\nimport TemplateLogo from \"../../assets/radio/r-02.svg\"\nimport TemplateLogoSelect from \"../../assets/radio/r-03.svg\"\n\ninterface TemplateCardProps {\n    TemplateImageUrl: string,\n    TemplateImageAlt: string,\n    TemplateTitle: string,\n}\n\nexport const TemplateCard: React.FC<TemplateCardProps> = (props) => {\n\n    return (\n        <>\n            {props.TemplateImageUrl == \"none\"\n                ? <div className=\"lgc\">\n                    <Box\n                        className=\"lg-nsl\"\n                        h=\"50px\"\n                        maxH=\"50px\"\n                        bgImage={\"url('\" + TemplateLogo + \"')\"}\n                        bgPosition=\"center\"\n                        bgRepeat=\"no-repeat\"\n                    />\n                    <Box\n                        className=\"lg-sl\"\n                        h=\"50px\"\n                        maxH=\"50px\"\n                        bgImage={\"url('\" + TemplateLogoSelect + \"')\"}\n                        bgPosition=\"center\"\n                        bgRepeat=\"no-repeat\"\n                    />\n                    {props.TemplateTitle}\n                </div>\n                : <>\n                    <Box textAlign=\"center\">\n                        <Image m=\"auto\" h=\"100px\" src={props.TemplateImageUrl} />\n                        {props.TemplateTitle}\n                    </Box>\n                </>\n            }\n        </>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/RadioCard.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/enums/graphState.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Graphs/GraphCard.tsx",["399","400","401","402","403","404","405","406","407","408"],"import React, { useEffect, useRef } from 'react'\nimport { Flex, Text, Link, Spacer, Button, Icon, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Menu, MenuButton, IconButton, MenuList, MenuItem, useDisclosure, Portal, Box, LinkOverlay, LinkBox, MenuDivider, Skeleton } from '@chakra-ui/react';\nimport { HiOutlineEye, HiOutlineDotsHorizontal } from 'react-icons/hi';\nimport { MotionBox } from '../MotionBox'\nimport { GraphStatus } from './GraphStatus';\nimport { GraphResponse } from '../../providers/responses/graph';\nimport { GraphStateEnum } from '../../enums/graphState';\nimport GraphService from '../../services/graphService';\nimport { Log } from '../../providers/responses/logs';\nimport useInterval from '../../hooks/useInterval'\nimport Cookies from 'js-cookie'\n\ninterface GraphCardProps {\n    GraphInfo: GraphResponse,\n    GraphName?: string,\n    GraphIDELink?: string,\n    GraphExecCost?: number,\n    GraphExecTime?: string,\n    GraphCreation?: string,\n    Status?: number\n}\n\nfunction timeSinceExecution(date: any): string {\n    var now: Date = new Date();\n\n    var timeStart = date.getTime();\n    var timeEnd = now.getTime();\n    var hourDiff = timeEnd - timeStart; //in ms\n    var secDiff = hourDiff / 1000; //in s\n    var minDiff = hourDiff / 60 / 1000; //in minutes\n    var hDiff = hourDiff / 3600 / 1000; //in hours\n\n    const hours = Math.floor(hDiff);\n    const minutes = (minDiff - 60 * hours).toFixed(2)\n\n    return `${hours} hours, ${minutes} minutes.`\n}\n\nexport const GraphCard: React.FC<GraphCardProps> = ({\n    GraphInfo = undefined,\n    GraphName = \"Default\",\n    GraphIDELink = \"https://ide.graphlinq.io/\",\n    GraphExecCost = null,\n    GraphExecTime = \"—\",\n    GraphCreation = \"—\",\n    Status = 0,\n    ...props\n}) => {\n\n    const [logs, setLogs] = React.useState([])\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const [inLogs, setInLogs] = React.useState<boolean>(false);\n\n    const bottomRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [])\n\n    const scrollToBottom = () => {\n        if (bottomRef && bottomRef.current) {\n            bottomRef.current.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"start\",\n            });\n        }\n    };\n\n    async function tickLogs() {\n        setLogs((await GraphService.graphLogs(GraphInfo?.hashGraph ?? \"\")) as any)\n        scrollToBottom()\n    }\n\n    useEffect(() => {\n        let interval: NodeJS.Timeout | null;\n\n        if (inLogs) {\n            tickLogs()\n            interval = setInterval(async () => {\n                if (interval) {\n                    tickLogs()\n                }\n            }, 5000);\n        }\n\n        return () => {\n            if (interval) clearInterval(interval);\n        };\n    }, [inLogs]);\n\n    function onLogsOpen() {\n        onOpen()\n        setInLogs(true)\n    }\n\n    function onLogsClose() {\n        onClose()\n        setInLogs(false)\n    }\n\n    function getColorLog(type: string): string {\n        switch (type) {\n            case \"info\":\n                return \"blue.400\"\n            case \"success\":\n                return \"emerald.500\"\n            case \"warn\":\n                return \"amber.500\"\n        }\n        return \"\"\n    }\n\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n    async function changeGraphState(state: GraphStateEnum) {\n        setIsLoading(true)\n        const result: boolean = await GraphService.setGraphState(state, GraphInfo?.hashGraph ?? \"\")\n        if (result && GraphInfo !== undefined) {\n            GraphInfo.state = state\n        }\n        setIsLoading(false)\n    }\n\n    async function removeGraph() {\n        setIsLoading(true)\n        const result: boolean = await GraphService.removeGraph(GraphInfo?.hashGraph ?? \"\")\n        setIsLoading(false)\n    }\n\n    async function deployGraph() {\n        setIsLoading(true)\n        const hash: String | undefined = await GraphService.deployGraph({\n            state: GraphStateEnum.Starting,\n            bytes: GraphInfo?.lastLoadedBytes ?? \"\",\n            alias: GraphInfo?.alias ?? \"Unnamed\",\n            hash: GraphInfo?.hashGraph\n        })\n        if (hash !== undefined && GraphInfo !== undefined) {\n            GraphInfo.state = GraphStateEnum.Starting\n        }\n        setIsLoading(false)\n    }\n\n    async function exportGlqFile()\n    {\n        const element = document.createElement(\"a\");\n        const file = new Blob([(GraphInfo?.lastLoadedBytes as any)], \n                    {type: 'text/plain;charset=utf-8'});\n        element.href = URL.createObjectURL(file);\n        element.download = `${GraphInfo?.alias}.glq`;\n        document.body.appendChild(element);\n        element.click();\n    }\n\n    return (\n        <MotionBox as=\"article\">\n            <Flex alignItems=\"center\">\n                <Box flex=\"1 1 0%\" display=\"flex\" alignItems=\"center\" px={2}>\n                    <GraphStatus state={GraphInfo?.state ?? 0} />\n                    <Flex flexDirection=\"column\">\n                        <Link fontWeight=\"semibold\" textColor=\"#aba1ca\" href={GraphIDELink} isExternal>\n                            {GraphInfo?.alias}\n                        </Link>\n                        <Text as=\"samp\" className=\"hash\" maxWidth=\"200px\" isTruncated>{GraphInfo?.hashGraph}</Text>\n                    </Flex>\n                    <Spacer />\n                </Box>\n\n                <Box display=\"flex\" width=\"48px\" minH=\"48px\" justifyContent=\"center\" px={2} />\n                {GraphInfo?.hostedApi &&\n                <Box display=\"flex\" width=\"200px\" px={2}>\n                    <Skeleton isLoaded={!isLoading}>\n                    \n                        <Link fontSize=\"xs\" fontWeight=\"semibold\" textColor=\"#aba1ca\" href={`https://api-hosted.graphlinq.io/${GraphInfo?.hashGraph}`} isExternal>\n                        api-hosted.graphlinq.io/{GraphInfo?.hashGraph.substr(0, 6)}..\n                        </Link>\n                          \n                        <Spacer />\n                    </Skeleton>\n                </Box>\n                }\n                <Box display=\"flex\" width=\"200px\" px={2}>\n                    <Skeleton isLoaded={!isLoading}>\n                        <Text className=\"txx\">{GraphInfo?.lastExecutionCost || \"—\"} GLQ</Text>\n                        <Spacer />\n                    </Skeleton>\n                </Box>\n                <Box display=\"flex\" width=\"160px\" px={2}>\n                    <Skeleton isLoaded={!isLoading}>\n                        <Text className=\"txx\">{(GraphInfo?.state === GraphStateEnum.Started) ? timeSinceExecution(GraphInfo?.loadedAt) : \"—\"}</Text>\n                        <Spacer />\n                    </Skeleton>\n                </Box>\n                <Box display=\"flex\" width=\"160px\" px={2}>\n                    <Skeleton isLoaded={!isLoading}>\n                        <Text className=\"txx\">{GraphInfo?.createdAt.toLocaleString()}</Text>\n                    </Skeleton>\n                    <Spacer />\n                </Box>\n                <Button onClick={onLogsOpen} mr={3} className=\"bt\">\n                    View Logs <i className=\"fal fa-eye\"></i>\n                </Button>\n\n                <Modal onClose={onClose} isOpen={isOpen} scrollBehavior=\"inside\" size=\"full\">\n                    <ModalOverlay className=\"ov\"/>\n                    <ModalContent className=\"mod mod-log\">\n                        <ModalHeader mb=\".5rem\"><h2>Logs</h2></ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            {logs === undefined && <Text textColor=\"amber.500\">No logs available...</Text>}\n                            {logs !== undefined && logs.map((x: Log, i: number) => {\n                                return <Text textColor={getColorLog(x.type)} key={`txt-${i}`}>[{x.type}] ({new Date(x.timestamp).toLocaleString()}):<br /> {x.message}</Text>\n                            })}\n                            <div ref={bottomRef}></div>\n                        </ModalBody>\n                        <ModalFooter className=\"fot\">\n                            <Button className=\"sbt\" onClick={onLogsClose}>Close</Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n                <Menu>\n                    <MenuButton\n                        as={IconButton}\n                        aria-label=\"Links\"\n                        icon={<Icon as={HiOutlineDotsHorizontal} w={5} h={5} />}\n                        className=\"mn\"\n                    />\n                    <MenuList className=\"mnv\">\n                        <MenuItem onClick={() => { deployGraph() }}><i className=\"fal fa-play\"></i> Start</MenuItem>\n                        <MenuItem onClick={() => { changeGraphState(GraphStateEnum.Restarting) }}><i className=\"fal fa-play\"></i> Force restart</MenuItem>\n                        <MenuItem onClick={() => { changeGraphState(GraphStateEnum.Stopped) }}><i className=\"fal fa-stop\"></i> Stop</MenuItem>\n                        <MenuItem onClick={() => { exportGlqFile() }}><i className=\"fal fa-file\"></i> Export as .GLQ File</MenuItem>\n                        <MenuItem onClick={() => { removeGraph() }}><i className=\"fal fa-trash\"></i> Delete</MenuItem>\n                    </MenuList>\n                </Menu>\n            </Flex>\n        </MotionBox>\n    );\n}\n\nexport default GraphCard;","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/GraphCreation/TemplateFile.tsx",["409","410","411","412","413"],"import React from 'react'\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react'\nimport { Alert, AlertIcon, Grid, Heading } from '@chakra-ui/react';\n\ninterface TemplateFileProps {\n    file: File\n    name: string\n}\n\nexport const TemplateFile: React.FC<TemplateFileProps> = (props: TemplateFileProps) => {\n\n    return (\n        <>\n            <FormControl isRequired>\n                <Alert status=\"info\">\n                    <i className=\"fal fa-info-circle\"></i> \n                    <p>You're about to deploy a new graph named \"{props.name}\" based on the file {props.file.name} you uploaded,\n                    it will be directly launched with the STARTING state over the Engine.</p>\n                </Alert>\n            </FormControl>\n        </>\n    )\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Graphs/GraphStatus.tsx",["414"],"import { Tooltip, Box } from '@chakra-ui/react';\nimport React from 'react'\nimport { GraphStateEnum } from '../../enums/graphState';\n\ninterface GraphStatusProps {\n    state: number,\n}\n\nexport const GraphStatus: React.FC<GraphStatusProps> = ({ state }) => {\n    return (\n            <StatusIcon status={state} />\n    );\n}\n\nfunction StatusIcon({ status }: any) {\n    if (status === GraphStateEnum.Stopped) { /* stopped */\n        return (\n            <Tooltip hasArrow arrowSize={10} label=\"Stopped\" bg=\"gray.900\" color=\"white\" size=\"xs\" placement=\"top\">\n                <i className=\"tool fal fa-stop\"></i>\n            </Tooltip >\n        );\n    }\n    if (status === GraphStateEnum.Starting || status === GraphStateEnum.Started) { /* running */\n        return (\n            <Tooltip hasArrow arrowSize={10} label=\"Running\" bg=\"gray.900\" color=\"white\" size=\"xs\" placement=\"top\">\n                <i className=\"tool play\"></i>\n            </Tooltip >\n        );\n    }\n    if (status === GraphStateEnum.InError) { /* error */\n        return (\n            <Tooltip hasArrow arrowSize={10} label=\"In Error State\" bg=\"gray.900\" color=\"white\" size=\"xs\" placement=\"top\">\n                <i className=\"tool fal fa-times-circle\"></i>\n            </Tooltip >\n        );\n    }\n    if (status === GraphStateEnum.Restarting) { /* restarting */\n        return (\n            <Tooltip hasArrow arrowSize={10} label=\"Restarting\" bg=\"gray.900\" color=\"white\" size=\"xs\" placement=\"top\">\n                <i className=\"tool fal fa-sync\"></i>\n            </Tooltip >\n        );\n    }\n    if (status === GraphStateEnum.InPause) { /* paused */\n        return (\n            <Tooltip hasArrow arrowSize={10} label=\"Paused\" bg=\"gray.900\" color=\"white\" size=\"xs\" placement=\"top\">\n                <i className=\"tool fal fa-pause\"></i>\n            </Tooltip >\n        );\n    }\n    return null;\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/MotionBox.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/constants/actions.ts",["415"],"import { AnyAction } from \"redux\";\n\nexport const RESET_REDUX_STATE = \"RESET_REDUX_STATE\"\nexport const DIAGRAM_UPDATE = \"DIAGRAM_UPDATE\"","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/redux/reducers/diagrams.ts",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/routes/sidebar.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Header/identicon.tsx",["416"],"import React, { useEffect, useRef } from 'react';\nimport { Avatar, forwardRef, AvatarProps } from '@chakra-ui/react';\n\nimport styled from 'styled-components';\n\nimport Jazzicon from 'jazzicon';\nimport { useActiveWeb3React } from '../../hooks';\n\nconst StyledIdenticonContainer = styled.div`\n  margin:auto;\n  height: 1rem;\n  width: 1rem;\n  border-radius: 1.125rem;\n  background-color: #CED0D9;\n`\n\nexport default function Identicon() {\n  const ref = useRef()\n\n  const { account } = useActiveWeb3React()\n\n  useEffect(() => {\n    if (account && ref.current) {\n      (ref as any).current.innerHTML = ''\n      const jazzicon = (ref as any).current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)))\n      jazzicon.style.display = 'block';\n    }\n  }, [account])\n\n  return (\n    <JazzAvatar ref={ref as any} />\n  )\n}\n\nconst JazzAvatar = forwardRef<AvatarProps, \"div\">((props, ref) => (\n  <Avatar\n    bgColor=\"white\"\n    size=\"xs\"\n    ml={-2}\n    mr={2}\n    ref={ref}\n    {...props}\n  />\n))\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ContractCard.tsx",["417","418","419","420","421","422","423","424","425","426"],"import { Box, Button, ButtonGroup, Icon, Text } from '@chakra-ui/react';\nimport { FiArrowDownLeft } from 'react-icons/fi';\nimport { ModalDeposit } from './ModalDeposit';\nimport { ModalWithdraw } from './ModalWithdraw';\nimport React, { useEffect, useState } from \"react\";\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\nimport { useWalletContract } from \"../../hooks/useWalletContract\"\n\ninterface ContractCardProps {\n\n}\n\nexport const ContractCard: React.FC<ContractCardProps> = ({ }) => {\n\n    const { account } = useWeb3React();\n    const {balance, refreshBalanceContract} =  useWalletContract();\n\n    useEffect(()  => {\n        refreshBalanceContract();\n    }, [account])\n\n    return (\n        <div className=\"bal\">\n            <h2>Cloud Contract Balance</h2>\n            <div className=\"val in\"><strong>{balance.amount}</strong> GLQ</div>\n            <div className=\"act\">\n                <ModalDeposit />\n                <ModalWithdraw />\n            </div>\n        </div>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/WalletManager.tsx",["427","428","429","430","431","432","433"],"import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\n\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  OPEN_MODAL,\n  CLOSE_MODAL,\n  ACCOUNT_UPDATE,\n} from \"../../redux/actions/index\";\n\nimport { isMobile } from \"react-device-detect\";\nimport { bsc, fortmatic, injected, portis } from \"../../connectors/index\";\nimport { OVERLAY_READY } from \"../../connectors/fortmatic\";\n\nimport { SUPPORTED_WALLETS } from \"../../constants/index\";\nimport usePrevious from \"../../hooks/usePrevious\";\n\nimport Option from \"./Option\";\nimport PendingView from \"./PendingView\";\nimport { useHistory } from \"react-router-dom\";\nimport WalletService from \"../../services/walletService\";\nimport Web3 from \"web3\"\nimport { Alert, AlertDescription, AlertIcon, AlertTitle, Box, Text, Link } from \"@chakra-ui/react\";\n\nconst WALLET_VIEWS = {\n  OPTIONS: \"options\",\n  OPTIONS_SECONDARY: \"options_secondary\",\n  ACCOUNT: \"account\",\n  PENDING: \"pending\",\n};\n\nconst WalletManager = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { active, account, connector, activate, error, library } = useWeb3React();\n\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n\n  const [pendingWallet, setPendingWallet] = useState();\n\n  const [pendingError, setPendingError] = useState(false);\n\n  const previousAccount = usePrevious(account);\n\n  const walletModalOpen = useSelector(\n    (state: any) => state.modals.walletManager.show\n  );\n\n  const binanceWalletSign = async (web3: any) => {\n    return new Promise<string>((res, rej) => {\n      web3\n      .request({\n        method: 'eth_sign',\n        params: [account, process.env.REACT_APP_SIGN_KEY as string],\n      })\n      .then((result: any) => {\n       res(result)\n      })\n      .catch((error: any) => {\n        rej(error)\n    });\n    })\n\n  }\n\n  useEffect(() => {\n    if (!account) { return }\n    if (WalletService.verifySessionIntegrity(account)) {\n      return history.push(\"/\");\n    }\n      (async () => {\n        console.log(activate)\n        let web3: any = undefined\n        let signature: string = \"\"\n        const firstChain = (connector as any).supportedChainIds[0]\n        // if ((window as any).BinanceChain !== undefined && firstChain !== 100) {\n        //   web3 = (window as any).BinanceChain\n        //   try {\n        //     signature = await binanceWalletSign(web3)\n        //   } catch (e) { console.error(e)}\n        // }\n        // else \n        if ((window as any).ethereum !== undefined) {\n          web3 = new Web3((window as any).ethereum)\n          try {\n            signature = await web3.eth.personal.sign(process.env.REACT_APP_SIGN_KEY as string, account, \"\")\n          } catch (e) { console.error(e) }\n        }\n        const result = await WalletService.authWallet(account, signature)\n\n        if (result) {\n          dispatch({\n            name: \"walletManager\",\n            type: ACCOUNT_UPDATE,\n            payload: {\n              account,\n            },\n          });\n          return history.push(\"/\");\n        }\n    })()\n  }, [account])\n\n  const toggleWalletModal = () => {\n    if (walletModalOpen) dispatch({ type: CLOSE_MODAL, name: \"walletManager\" });\n    else dispatch({ type: OPEN_MODAL, name: \"walletManager\" });\n  };\n\n  // close on connection, when logged out before\n  useEffect(() => {\n    if (account && !previousAccount && walletModalOpen) {\n      toggleWalletModal();\n    }\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen]);\n\n  // always reset to account view\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false);\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [walletModalOpen]);\n\n  // close modal when a connection is successful\n  const activePrevious = usePrevious(active);\n  const connectorPrevious = usePrevious(connector);\n  useEffect(() => {\n    if (\n      walletModalOpen &&\n      ((active && !activePrevious) ||\n        (connector && connector !== connectorPrevious && !error))\n    ) {\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [\n    setWalletView,\n    active,\n    error,\n    connector,\n    walletModalOpen,\n    activePrevious,\n    connectorPrevious,\n  ]);\n\n  const tryActivation = async (connector: any) => {\n    Object.keys(SUPPORTED_WALLETS).map((key) => {\n      if (connector === (SUPPORTED_WALLETS as any)[key].connector) {\n        return (SUPPORTED_WALLETS as any)[key].name;\n      }\n      return true;\n    });\n\n    setPendingWallet(connector); // set wallet for pending view\n    setWalletView(WALLET_VIEWS.PENDING);\n\n    // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\n    if (\n      connector instanceof WalletConnectConnector &&\n      connector.walletConnectProvider?.wc?.uri\n    ) {\n      connector.walletConnectProvider = undefined;\n    }\n\n    connector &&\n      activate(connector, undefined, true).catch((error) => {\n        if (error instanceof UnsupportedChainIdError) {\n          activate(connector); // a little janky...can't use setError because the connector isn't set\n        } else {\n          setPendingError(true);\n        }\n      });\n  };\n\n  // close wallet modal if fortmatic modal is active\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal();\n    });\n  }, [toggleWalletModal]);\n\n  // get wallets user can switch too, depending on device/browser\n  function getOptions() {\n    const isMetamask =\n      (window as any).ethereum && (window as any).ethereum.isMetaMask;\n    return Object.keys(SUPPORTED_WALLETS).map((key) => {\n      const option = (SUPPORTED_WALLETS as any)[key];\n      // check for mobile options\n      if (isMobile) {\n        // disable portis on mobile for now\n        if (option.connector === portis) {\n          return null;\n        }\n\n        if (\n          !(window as any).web3 &&\n          !(window as any).ethereum &&\n          option.mobile\n        ) {\n          return (\n            <Option\n              onClick={() => {\n                option.connector !== connector &&\n                  !option.href &&\n                  tryActivation(option.connector);\n              }}\n              id={`connect-${key}`}\n              key={key}\n              active={option.connector && option.connector === connector}\n              link={option.href}\n              header={option.name}\n              icon={option.iconName}\n            />\n          );\n        }\n        return null;\n      }\n\n      // overwrite injected when needed\n      if (option.connector === injected || option.connector === bsc) {\n        // don't show injected if there's no injected provider\n        if (!((window as any).web3 || (window as any).ethereum)) {\n          if (option.name === \"MetaMask\") {\n            return (\n              <Option\n                id={`connect-${key}`}\n                key={key}\n                header=\"Install Metamask\"\n                subheader={undefined}\n                link=\"https://metamask.io/\"\n                icon={\"MetaMaskIcon\"}\n              />\n            );\n          }\n          else if (option.name === \"Binance Chain Wallet\") {\n            return (\n              <Option\n                id={`connect-${key}`}\n                key={key}\n                header=\"Install Binance Chain Wallet\"\n                subheader={undefined}\n                link=\"https://chrome.google.com/webstore/detail/binance-chain-wallet/fhbohimaelbohpjbbldcngcnapndodjp\"\n                icon={\"BinanceIcon\"}\n              />\n            );\n          }\n          return null; // dont want to return install twice\n        }\n        // don't return metamask if injected provider isn't metamask\n        if (option.name === \"MetaMask\" && !isMetamask) {\n          return null;\n        }\n        // likewise for generic\n        if (option.name === \"Injected\" && isMetamask) {\n          return null;\n        }\n      }\n\n      // return rest of options\n      return (\n        !isMobile &&\n        !option.mobileOnly && (\n          <Option\n            id={`connect-${key}`}\n            onClick={() => {\n              option.connector === connector\n                ? setWalletView(WALLET_VIEWS.ACCOUNT)\n                : !option.href && tryActivation(option.connector);\n            }}\n            key={key}\n            active={option.connector === connector}\n            link={option.href}\n            header={option.name}\n            subheader={undefined} // use option.descriptio to bring back multi-line\n            icon={option.iconName}\n          />\n        )\n      );\n    });\n  }\n\n  function getContent() {\n    if (error) {\n      console.log(error);\n      return (\n        <Alert\n          status=\"error\"\n          variant=\"subtle\"\n        >\n          <AlertIcon boxSize=\"40px\" mr={0} />\n          <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n            {error instanceof UnsupportedChainIdError\n              ? \"Wrong Network\"\n              : \"Error connecting\"}\n          </AlertTitle>\n          <AlertDescription maxWidth=\"sm\">\n            {error instanceof UnsupportedChainIdError ? (\n              <Box>\n                <Text>Please connect to the appropriate Ethereum network (Ropsten Or Mainnet).</Text>\n                <Link href=\"https://docs.graphlinq.io/wallet/1-index\" textDecoration=\"underline\" isExternal>Check out the documentation about wallet</Link>\n              </Box>\n            ) : (\n                \"Error connecting. Try refreshing the page.\"\n              )}\n          </AlertDescription>\n        </Alert>\n      );\n    }\n\n    return (\n      <>\n        {walletView === WALLET_VIEWS.PENDING ? (\n          <PendingView\n            connector={pendingWallet}\n            error={pendingError}\n            setPendingError={setPendingError}\n            tryActivation={tryActivation}\n          />\n        ) : (\n            <>{getOptions()}</>\n          )}\n      </>\n    );\n  }\n\n  return <>{getContent()}</>;\n};\n\nexport default WalletManager;\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/assets/icons/index.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ModalWithdraw.tsx",["434","435","436","437","438","439","440","441","442"],"import React, { useState, useEffect } from 'react'\nimport { Button, Icon, Text, Alert, AlertDescription, AlertIcon, AlertTitle, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Stack, useDisclosure } from '@chakra-ui/react';\nimport { FiArrowDownLeft } from 'react-icons/fi';\nimport { useActiveWeb3React } from '../../hooks';\nimport WalletService from '../../services/walletService';\nimport { ResponseSuccess } from '../../providers/responses/success';\nimport { useWalletContract } from '../../hooks/useWalletContract';\n\ninterface ModalWithdrawProps {\n\n}\n\nexport const ModalWithdraw: React.FC<ModalWithdrawProps> = ({ }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const finalRef = React.useRef()\n    const { account } = useActiveWeb3React()\n    const [dueBalance, setDueBalance] = useState(0)\n    const [amountWithdraw, setAmountWithdraw] = useState(\"0.0\");\n    const [error, setError] = useState(\"\");\n    const [pending, setPending] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n    const {refreshBalanceContract} =  useWalletContract();\n\n    const format = (val: string) => val + ` GLQ`;\n    const parse = (val: string) => val.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1');\n\n    useEffect(() => {\n        const getCloudBalance = async () => {\n            try {\n                const result = await WalletService.getBalance(account ?? \"\")\n                if (result?.due_balance) {\n                    setDueBalance(result.due_balance)\n                }\n            } catch (e) {\n                console.error(e)\n            }\n        }\n        getCloudBalance()\n    }, [account])\n\n    async function doWithdraw()\n    {\n        const asNumber: number = parseFloat(amountWithdraw)\n        if (asNumber <= 0) {\n            setError(`Invalid amount to withdraw from the balance contract: ${asNumber} GLQ`)\n            return \n        }\n\n        setPending(\"Pending, waiting for server response...\")\n        const result: ResponseSuccess | String = await WalletService.withdraw(asNumber)\n        if (result instanceof String) {\n            setPending(\"\"); setError(result.toString());\n            return;\n        }\n        if (result.success) {\n            setPending(\"\")\n            setError(\"\")\n            setSuccess(result.hash)\n        }\n\n        setTimeout(() => {\n            refreshBalanceContract()\n        }, 1000)\n    }\n\n    return (\n        <>\n            <button className=\"sbt\" ref={finalRef as any} onClick={onOpen}>Withdraw <i className=\"fal fa-long-arrow-down\"></i></button>\n            <Modal finalFocusRef={finalRef as any} isOpen={isOpen} onClose={onClose} key=\"test\" isCentered>\n                <ModalOverlay className=\"ov\" />\n                <ModalContent className=\"mod mod-dep\">\n                    <header><h2>Cloud Balance Withdraw</h2></header>\n                    <ModalCloseButton className=\"clo\" />\n                    <ModalBody class=\"fred\">\n                        <Stack spacing={3} p=\"4\">\n                            {error &&\n                            <Alert status=\"error\">\n                                <i className=\"fal fa-times-circle\"></i> \n                                <p>{error}</p>\n                            </Alert>\n                            }\n                            {!success && pending &&\n                            <Alert status=\"info\">\n                                <i className=\"fal fa-info-circle\"></i> \n                                <p>{pending}</p>\n                            </Alert>\n                            }\n                            {success &&\n                            <Alert status=\"success\">\n                                <i className=\"fal fa-check-circle\"></i>\n                                <p>Withdraw successfully completed !</p>\n                                <p><small>Transaction hash : <a href={`https://etherscan.com/tx/${success}`} target=\"_blank\">{success}</a></small></p>\n                            </Alert>\n                            }\n                            <Alert status=\"info\" className=\"alert-m\">\n                                <i className=\"fal fa-info-circle\"></i>\n                                <p>You currently have <b>{dueBalance} GLQ</b> of execution cost from executed graphs to burn.</p>\n                            </Alert>\n                            <NumberInput className=\"fd in\"\n                                placeholder=\"GLQ Amount\"\n                                onChange={(value) => { setAmountWithdraw(parse(value)) }}\n                                value={format(amountWithdraw)}\n                                size=\"lg\"\n                                defaultValue={0}\n                                min={0}\n                                focusBorderColor=\"#3907ff\"\n                                step={0.1}>\n                                <NumberInputField />\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper color=\"#3907ff\" />\n                                    <NumberDecrementStepper color=\"#3907ff\" />\n                                </NumberInputStepper>\n                            </NumberInput>\n                            <Button onClick={doWithdraw} className=\"bt\">Withdraw</Button>\n                        </Stack>\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/Option.tsx",["443","444","445"],"import React from 'react'\nimport { Button, Text, Box, Icon, Spacer, Link } from '@chakra-ui/react';\nimport * as WalletIcons from \"../../assets/icons\";\n\nexport default function Option({\n    link = \"\",\n    clickable = true,\n    size = 0,\n    onClick = () => { },\n    color = \"\",\n    header = \"\",\n    subheader = \"\",\n    icon = \"\",\n    active = false,\n    id = \"\"\n}) {\n    const content = (\n        <Button\n            id={id}\n            isActive={active}\n            _active={{ backgroundColor: \"indigo.50\" }}\n            onClick={onClick}\n        >\n            <span>{header}</span>\n            <Icon as={(WalletIcons as any)[icon]} w={6} h={6} />\n        </Button>\n    )\n    if (link) {\n        return (\n            <Link href={link} isExternal>\n                {content}\n            </Link>\n        )\n    }\n\n    return content\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useWalletContract.tsx",["446"],"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { utils } from 'ethers';\nimport { UPDATE_BALANCE_CONTRACT } from '../redux/actions/index';\nimport { useActiveWeb3React } from '.';\nimport { useBalanceContract } from './useContract';\n\nexport function useWalletContract() {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useDispatch();\n  \n  const balance = useSelector(state => (state as any).modals.balanceContract);\n\n  const contract = useBalanceContract(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\n\n  const refreshBalanceContract = useCallback(async () => {\n      if (!account || !contract) {\n        return;\n      }\n      try {\n      const balanceOf = await contract.getBalance(account);\n      if (!balanceOf) return;\n  \n      const balance = parseFloat(utils.formatUnits(balanceOf, 18));\n      dispatch({ type: UPDATE_BALANCE_CONTRACT, payload: {balanceContract: balance}, name: 'balanceContract'});\n      } catch (e) { console.error(e) }\n\n  }, [account, contract]);\n\n return { balance, refreshBalanceContract }\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/ContractBalance/ModalDeposit.tsx",["447","448","449","450","451","452","453","454","455","456"],"import React, { useState } from 'react'\nimport { Button, Icon, Text, Alert, AlertDescription, AlertIcon, AlertTitle, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Stack, useDisclosure } from '@chakra-ui/react';\nimport { FiArrowUpRight } from 'react-icons/fi';\nimport { useBalanceContract, useTokenContract } from '../../hooks/useContract';\nimport { getDecimalsAmount } from '../../utils';\nimport { useActiveWeb3React } from '../../hooks';\nimport { utils } from 'ethers';\nimport { useBalance } from '../../hooks/useBalance';\nimport { useWalletContract } from '../../hooks/useWalletContract';\n\ninterface ModalDepositProps {\n\n}\n\nexport const ModalDeposit: React.FC<ModalDepositProps> = ({ }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const finalRef = React.useRef()\n    const contract = useBalanceContract(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\n    const tokenContract = useTokenContract(process.env.REACT_APP_GRAPHLINQ_TOKEN_CONTRACT)\n\n\n    const {balance, refreshBalance} =  useBalance();\n    const {refreshBalanceContract} =  useWalletContract();\n    \n    const { account } = useActiveWeb3React()\n    const [amountDeposit, setAmountDeposit] = useState(\"0.0\");\n    const [error, setError] = useState(\"\");\n    const [pending, setPending] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n\n    const format = (val: string) => val + ` GLQ`;\n    const parse = (val: string) => val.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1');\n\n    async function doDeposit()\n    {\n        if (contract == null || tokenContract == null) { return }\n        refreshBalance()\n\n        const asNumber: number = parseFloat(amountDeposit)\n        if (asNumber <= 0) {\n            setError(`Invalid amount to deposit on the balance contract: ${asNumber} GLQ`)\n            return \n        }\n        \n        const decimalAmount: any = utils.parseEther(amountDeposit)\n        try {\n            const allowance = await tokenContract.allowance(account, process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\n            const wei = utils.parseEther('10000000')\n            if (parseFloat(allowance) < parseFloat(decimalAmount)) {\n                console.log(`${allowance} vs ${decimalAmount}`)\n                setPending(\"Allowance pending, please allow the use of your token balance for the contract...\")\n                const approveTx = await tokenContract.approve(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT, wei.toString());\n                setPending(\"Waiting for confirmations...\")\n                await approveTx.wait()\n                setPending(\"Allowance successfully increased, waiting for deposit transaction...\")\n            }\n            const currentBalanceDecimal: any = utils.parseEther(balance.amount.toString())\n            if (parseFloat(decimalAmount) > parseFloat(currentBalanceDecimal)) {\n                setPending(\"\"); setError(`You only have ${balance.amount} GLQ in your wallet.`);\n                return;\n            }\n\n            setPending(\"Pending, check your wallet extension to execute the chain transaction...\")\n            const result = await contract.addBalance(decimalAmount.toString())\n            setPending(\"Waiting for confirmations...\")\n            await result.wait()\n            setSuccess(result.hash)\n\n            refreshBalanceContract()\n        }\n        catch (e)\n        {\n            console.error(e)\n            if (e.data?.message) { setPending(\"\"); setError(`Error: ${e.data?.message}`);return; }\n            if (e.message) { setPending(\"\"); setError(`Error: ${e.message}`); }\n        }\n    }\n\n    return (\n        <>\n            <button className=\"sbt\" ref={finalRef as any} onClick={onOpen}>Deposit <i className=\"fal fa-long-arrow-up\"></i></button>\n            <Modal finalFocusRef={finalRef as any} isOpen={isOpen} onClose={onClose} key=\"test\" isCentered>\n                <ModalOverlay className=\"ov\" />\n                <ModalContent className=\"mod mod-dep\">\n                    <header><h2>Cloud Balance Deposit</h2></header>\n                    <ModalCloseButton className=\"clo\" />\n                    <ModalBody class=\"fred\">\n                        <Stack spacing={3} p=\"4\">\n                            {error &&\n                            <Alert status=\"error\">\n                                <i className=\"fal fa-times-circle\"></i> \n                                <p>{error}</p>\n                            </Alert>\n                            }\n                            {!success && pending &&\n                            <Alert status=\"info\">\n                                <i className=\"fal fa-info-circle\"></i> \n                                <p>{pending}</p>\n                            </Alert>\n                            }\n                            {success &&\n                            <Alert status=\"success\" className=\"alert-m\">\n                                <i className=\"fal fa-check-circle\"></i> \n                                <p>Deposit successfully completed !\n                                <br/><small>Transaction hash : <a href={`https://etherscan.com/tx/${success}`} target=\"_blank\">{success}</a></small></p>\n                            </Alert>\n                            }\n                            <NumberInput className=\"fd in\"\n                                placeholder=\"GLQ Amount\"\n                                onChange={(value) => { setAmountDeposit(parse(value)) }}\n                                value={format(amountDeposit)}\n                                size=\"lg\"\n                                defaultValue={0}\n                                min={0}\n                                focusBorderColor=\"#3907ff\"\n                                step={0.1}>\n                                <NumberInputField />\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper color=\"#3907ff\" />\n                                    <NumberDecrementStepper color=\"#3907ff\" />\n                                </NumberInputStepper>\n                            </NumberInput>\n                            <Button onClick={doDeposit} className=\"bt\">Deposit</Button>\n                        </Stack>\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/BrowserWallet/PendingView.tsx",["457","458"],"import React from 'react'\nimport styled from 'styled-components'\nimport { darken } from 'polished'\nimport { SUPPORTED_WALLETS } from '../../constants/index'\nimport { injected } from '../../connectors/index'\nimport Option from './Option'\nimport { Alert, AlertIcon, Button, Spacer } from '@chakra-ui/react'\n\nexport default function PendingView({\n    connector,\n    error = false,\n    setPendingError,\n    tryActivation\n}: any) {\n    const isMetamask = (window as any)?.ethereum?.isMetaMask\n\n    return (\n        <>\n                {error ? (\n                    <Alert variant=\"left-accent\" status=\"error\" mb={3} py={2} borderRadius=\"md\">\n                        <AlertIcon />\n                            Error connecting.\n                        <Spacer />\n                        <Button\n                            variant=\"ghost\"\n                            colorScheme=\"red\"\n                            onClick={() => {\n                                setPendingError(false)\n                                connector && tryActivation(connector)\n                            }}>\n                            Try Again\n                            </Button>\n                    </Alert>\n                ) : (\n                <Alert variant=\"left-accent\" status=\"warning\" mb={3} py={2} borderRadius=\"md\">\n                    <AlertIcon />\n                    Initializing...\n                    </Alert>\n                    )}\n            {\n                Object.keys(SUPPORTED_WALLETS).map(key => {\n                    const option = (SUPPORTED_WALLETS as any)[key]\n                    if (option.connector === connector) {\n                        if (option.connector === injected) {\n                            if (isMetamask && option.name !== 'MetaMask') {\n                                return null\n                            }\n                            if (!isMetamask && option.name === 'MetaMask') {\n                                return null\n                            }\n                        }\n                        return (\n                            <Option\n                                id={`connect-${key}`}\n                                key={key}\n                                clickable={false}\n                                header={option.name}\n                                subheader={option.description}\n                                icon={option.iconName} />\n                        )\n                    }\n                    return null\n                })\n            }\n        </>\n    )\n}\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/mock/mocks.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/usePrevious.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/pages/Staking.tsx",["459","460","461","462","463","464","465","466","467","468","469","470","471"],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/contracts/objects/topStakers.tsx",["472"],"import { BigNumber } from \"@ethersproject/bignumber\";\nimport { utils } from 'ethers';\n\nexport interface Staker {\n    wallet: string\n    amount: string\n}\n\nexport default class TopStakers {\n\n    public stakers: Staker[]\n    constructor(address: any[], amounts: BigNumber[])\n    {\n        this.stakers = []\n\n        for (var i = 0; i <= 2; i++) {\n            if (address[i] != 0) {\n                this.stakers.push({\n                    wallet: address[i],\n                    amount: utils.formatUnits(amounts[i], 18)\n                })\n            }\n        }\n    }\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/contracts/objects/tiersAPY.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/hooks/useStaking.tsx",["473","474"],"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { utils } from 'ethers';\nimport { useActiveWeb3React } from '.';\nimport { useStakingContract } from './useContract';\nimport { UPDATE_STAKING_BALANCE } from '../redux/actions/index';\n\nexport function useStaking() {\n\tconst { account } = useActiveWeb3React()\n\tconst dispatch = useDispatch();\n\n\tconst balance = useSelector(state => (state as any).modals.staking.amount);\n\n\tconst stakingContract = useStakingContract(process.env.REACT_APP_STAKING_CONTRACT);\n\n\tconst refreshBalance = useCallback(async() => {\n\t\tif (!account || !stakingContract) {\n\t\t\treturn;\n\t\t  }\n\t\ttry {\n\t\t\tconst balanceOf = await stakingContract.getDepositedGLQ(account);\n\t\t\tif (!balanceOf) return;\n\n\t\t\tconst balance = parseFloat(utils.formatUnits(balanceOf, 18));\n\t\t\tconsole.log(balance)\n\t\t\tdispatch({ type: UPDATE_STAKING_BALANCE, payload: { balance }, name: 'staking'});\n\t\t} catch (e) { console.error(e) }\n\t}, [account, stakingContract])\n\n\tconst refreshTiersAPY = useCallback(async() => {\n\t\tif (!account || !stakingContract) {\n\t\t\treturn;\n\t\t  }\n\t\ttry {\n\t\t\tconst tiers = await stakingContract.getTiersAPY()\n\t\t\tconsole.log(tiers)\n\n\t\t} catch (e) { console.error(e) }\n\t}, [account, stakingContract])\n\n\treturn { balance, refreshBalance }\n}","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/StakingModalWithdraw.tsx",["475"],"import React, { useState } from \"react\";\nimport {\n    Alert,\n    Button,\n    chakra,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Spacer,\n    Spinner,\n    useDisclosure,\n} from \"@chakra-ui/react\";\nimport { useStakingContract } from \"../../hooks/useContract\";\n\ninterface StakingModalWithdrawProps {\n    withdrawAmount: any;\n    tx: number;\n    setTx: any;\n    claimable: any;\n}\n\nexport const StakingModalWithdraw: React.FC<StakingModalWithdrawProps> = (props: any) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [error, setError] = useState(\"\");\n    const [pending, setPending] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n    const [disabled, setDisabled] = useState(false);\n    const stakingContract = useStakingContract(process.env.REACT_APP_STAKING_CONTRACT);\n\n    async function doWithdraw() {\n        try {\n            setDisabled(true);\n            // if (props.claimable <= 0) {\n            //     setError(`You need to have claimable rewards to withdraw your staked GLQ.`);\n            //     setDisabled(false);\n            //     return;\n            // }\n            if (props.withdrawAmount <= 0) {\n                setError(`Invalid amount to withdraw from the staking contract: ${props.withdrawAmount} GLQ`);\n                setDisabled(false);\n                return;\n            }\n\n            setPending(\"Pending, waiting for response...\");\n            if (stakingContract == null) {\n                setDisabled(false);\n                return;\n            }\n            const result = await stakingContract.withdrawGlq();\n            setPending(\"Waiting for confirmations...\");\n            const txReceipt = await result.wait();\n            if (result instanceof String) {\n                setPending(\"\");\n                setError(result.toString());\n                setDisabled(false);\n                return;\n            }\n            if (txReceipt.status === 1) {\n                setPending(\"\");\n                setError(\"\");\n                setSuccess(txReceipt.transactionHash);\n                props.setTx(props.tx + 1);\n                onClose();\n            }\n\n            setTimeout(() => {\n                props.setTx(props.tx + 1);\n            }, 1000);\n        } catch (e) {\n            if (e.data?.originalError?.message) {\n                setPending(\"\");\n                setError(`Error: ${e.data?.originalError.message}`);\n                return;\n            }\n            if (e.message) {\n                setPending(\"\");\n                setError(`Error: ${e.message}`);\n            }\n            setDisabled(false);\n        }\n    }\n\n    return (\n        <>\n            <button style={{ marginTop: 20 }} className=\"bt\" onClick={onOpen}>\n                Withdraw\n            </button>\n            <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\" scrollBehavior=\"inside\" isCentered>\n                <ModalOverlay className=\"ov\" />\n                <ModalContent className=\"mod mod-cre\">\n                    <ModalHeader mt=\"0\">\n                        <chakra.h1 color=\"#F4F1FF\">Withdraw staked GLQ</chakra.h1>\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody color=\"#B6ADD6\" my=\"2rem\">\n                        {error && (\n                            <Alert status=\"error\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" mb=\"1rem\">\n                                <i className=\"fal fa-times-circle\"></i>\n                                <p>{error}</p>\n                            </Alert>\n                        )}\n                        {!success && pending && (\n                            <Alert status=\"info\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" mb=\"1rem\">\n                                <i className=\"fal fa-info-circle\"></i>\n                                <p>{pending}</p>\n                                <Spacer />\n                                <Spinner thickness=\"2px\" speed=\"0.65s\" emptyColor=\"#15122b\" color=\"blue.600\" size=\"md\" />\n                            </Alert>\n                        )}\n                        {success && (\n                            <Alert status=\"success\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" mb=\"1rem\">\n                                <i className=\"fal fa-check-circle\"></i>\n                                <p>\n                                    Successfully completed !\n                                    <br />\n                                    <small>\n                                        Transaction hash :{\" \"}\n                                        <a href={`https://etherscan.com/tx/${success}`} target=\"_blank\">\n                                            {success}\n                                        </a>\n                                    </small>\n                                </p>\n                            </Alert>\n                        )}\n                        Are you sure you want to withdraw all your staked GLQ ?\n                    </ModalBody>\n                    <ModalFooter className=\"fot\">\n                        <Button className=\"bt\" style={{ padding: 15, fontSize: \"15px\" }} onClick={doWithdraw} isDisabled={disabled}>\n                            Yes, I'm sure\n                        </Button>\n                        <Button colorScheme=\"base\" style={{ padding: 15, fontSize: \"15px\", fontWeight: 500 }} onClick={onClose}>\n                            No, cancel\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n};\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/ClaimRewards.tsx",["476"],"import React from \"react\";\nimport { createStandaloneToast } from \"@chakra-ui/react\";\nimport { ToastSuccess } from \"../Toasts/ToastSuccess\";\nimport { ToastError } from \"../Toasts/ToastError\";\nimport { ToastWarning } from \"../Toasts/ToastWarning\";\nimport { ToastInfo } from \"../Toasts/ToastInfo\";\n\nimport { useStakingContract } from \"../../hooks/useContract\";\n\ninterface ClaimRewardsProps {\n    claimable: any;\n    waitingPercentAPR: any;\n    error: any;\n    setError: any;\n    pending: any;\n    setPending: any;\n    success: any;\n    setSuccess: any;\n    tx: number;\n    setTx: any;\n    rewardValue: string\n}\n\nexport const ClaimRewards: React.FC<ClaimRewardsProps> = (props) => {\n    const toast = createStandaloneToast();\n    const stakingContract = useStakingContract(process.env.REACT_APP_STAKING_CONTRACT);\n\n    async function doClaim() {\n        if (stakingContract == null) {\n            return;\n        }\n        try {\n            if (props.claimable <= 0) {\n                props.setError(`Nothing to claim.`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description=\"Nothing to claim.\" />,\n                });\n                return;\n            }\n            const result = await stakingContract.claimGlq();\n            props.setPending(\"Waiting for confirmations...\");\n            toast({\n                position: \"bottom-right\",\n                render: () => <ToastInfo description=\"Waiting for confirmations...\" />,\n            });\n            const txReceipt = await result.wait();\n            if (txReceipt.status === 1) {\n                props.setPending(\"\");\n                props.setError(\"\");\n                props.setSuccess(txReceipt.transactionHash);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastSuccess description=\"Rewards successfully claimed !\" />,\n                });\n            }\n            if (result instanceof String) {\n                props.setPending(\"\");\n                props.setError(result.toString());\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={result.toString()} />,\n                });\n                return;\n            }\n            props.setTx(props.tx + 1);\n        } catch (e) {\n            if (e.data?.originalError.message) {\n                props.setPending(\"\");\n                props.setError(`Error: ${e.data?.originalError.message}`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={`Error: ${e.data?.originalError.message}`} />,\n                });\n                return;\n            }\n            if (e.message) {\n                props.setPending(\"\");\n                props.setError(`Error: ${e.message}`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={`Error: ${e.message}`} />,\n                });\n            }\n        }\n    }\n\n    return (\n        <>\n            <div className=\"sub\">My claimable rewards</div>\n            <p>\n                <strong>{props.claimable.toFixed(4)}</strong> GLQ\n                <small>{props.rewardValue}</small>\n                <button style={{ marginTop: 10, marginBottom: 10 }} className=\"bt\" onClick={doClaim}>\n                    Claim Rewards\n                </button>\n                <small>~ {props.waitingPercentAPR.toFixed(8)}% of staked GLQ</small>\n            </p>\n        </>\n    );\n};\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Staking/StakingDeposit.tsx",["477","478","479","480","481"],"import React, { useState } from \"react\";\nimport {\n    Alert,\n    Button,\n    chakra,\n    createStandaloneToast,\n    Image,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    InputRightElement,\n    NumberInput,\n    NumberInputField,\n    Spacer,\n    Spinner,\n} from \"@chakra-ui/react\";\nimport { ToastSuccess } from \"../Toasts/ToastSuccess\";\nimport { ToastError } from \"../Toasts/ToastError\";\nimport { ToastWarning } from \"../Toasts/ToastWarning\";\nimport { ToastInfo } from \"../Toasts/ToastInfo\";\n\nimport { useActiveWeb3React } from \"../../hooks/index\";\nimport { useStakingContract, useTokenContract } from \"../../hooks/useContract\";\nimport { useBalance } from \"../../hooks/useBalance\";\nimport { useWalletContract } from \"../../hooks/useWalletContract\";\nimport { utils } from \"ethers\";\n\ninterface StakingDepositProps {\n    tx: number;\n    setTx: any;\n}\n\nexport const StakingDeposit: React.FC<StakingDepositProps> = (props: any) => {\n    const { account } = useActiveWeb3React();\n    const { balance, refreshBalance } = useBalance();\n    const [amountToStake, setAmountToStake] = useState(0);\n    const toast = createStandaloneToast();\n    const [error, setError] = useState(\"\");\n    const [pending, setPending] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n    const stakingContract = useStakingContract(process.env.REACT_APP_STAKING_CONTRACT);\n    const tokenContract = useTokenContract(process.env.REACT_APP_GRAPHLINQ_TOKEN_CONTRACT);\n\n    const { refreshBalanceContract } = useWalletContract();\n\n    const format = (val: string) => val + ` GLQ`;\n    const parse = (val: string) => val.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1\");\n\n    const maxAmount = () => {\n        console.log(balance.amount);\n        setAmountToStake(balance.amount);\n    };\n\n    async function doStake(e: any) {\n        e.preventDefault();\n        if (stakingContract == null || tokenContract == null) {\n            return;\n        }\n        refreshBalance();\n\n        const asNumber: number = amountToStake;\n        if (asNumber <= 0) {\n            setError(`Invalid amount to deposit on the staking contract: ${asNumber} GLQ`);\n            toast({\n                position: \"bottom-right\",\n                render: () => <ToastError description={`Invalid amount to deposit on the staking contract: ${asNumber} GLQ`} />,\n            });\n            return;\n        }\n\n        const decimalAmount: any = utils.parseEther(amountToStake.toString());\n        try {\n            const allowance = await tokenContract.allowance(account, process.env.REACT_APP_STAKING_CONTRACT);\n            const wei = utils.parseEther(\"10000000\");\n            if (parseFloat(allowance) < parseFloat(decimalAmount)) {\n                setPending(\"Allowance pending, please allow the use of your token balance for the contract...\");\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastWarning description=\"Allowance pending, please allow the use of your token balance for the contract...\" />,\n                });\n                const approveTx = await tokenContract.approve(process.env.REACT_APP_STAKING_CONTRACT, wei.toString());\n                setPending(\"Waiting for confirmations...\");\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastInfo description=\"Waiting for confirmations...\" />,\n                });\n                await approveTx.wait();\n                setPending(\"Allowance successfully increased, waiting for deposit transaction...\");\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastSuccess description=\"Allowance successfully increased, waiting for deposit transaction...\" />,\n                });\n            }\n            const currentBalanceDecimal: any = utils.parseEther(balance.amount.toString());\n            if (parseFloat(decimalAmount) > parseFloat(currentBalanceDecimal)) {\n                setPending(\"\");\n                setError(`You only have ${balance.amount} GLQ in your wallet.`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={`You only have ${balance.amount} GLQ in your wallet.`} />,\n                });\n                return;\n            }\n\n            setPending(\"Pending, check your wallet extension to execute the chain transaction...\");\n            toast({\n                position: \"bottom-right\",\n                render: () => <ToastWarning description=\"Pending, check your wallet extension to execute the chain transaction...\" />,\n            });\n            const result = await stakingContract.depositGlq(decimalAmount.toString());\n            setPending(\"Waiting for confirmations...\");\n            toast({\n                position: \"bottom-right\",\n                render: () => <ToastInfo description=\"Waiting for confirmations...\" />,\n            });\n            const txReceipt = await result.wait();\n            if (txReceipt.status === 1) {\n                setSuccess(txReceipt.transactionHash);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastSuccess title=\"Deposit successfully completed !\" description={txReceipt.transactionHash} isLink />,\n                });\n            }\n\n            props.setTx(props.tx + 1);\n            refreshBalanceContract();\n        } catch (e) {\n            //console.error(e);\n            if (e.data?.message) {\n                setPending(\"\");\n                setError(`Error: ${e.data?.message}`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={e.data?.message} />,\n                });\n                return;\n            }\n            if (e.message) {\n                setPending(\"\");\n                setError(`Error: ${e.message}`);\n                toast({\n                    position: \"bottom-right\",\n                    render: () => <ToastError description={e.message} />,\n                });\n            }\n        }\n    }\n\n    return (\n        <form>\n            {error && (\n                <Alert status=\"error\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" my=\"1rem\">\n                    <i className=\"fal fa-times-circle\"></i>\n                    <p>{error}</p>\n                </Alert>\n            )}\n            {!success && pending && (\n                <Alert status=\"info\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" my=\"1rem\">\n                    <i className=\"fal fa-info-circle\"></i>\n                    <p>{pending}</p>\n                    <Spacer />\n                    <Spinner thickness=\"2px\" speed=\"0.65s\" emptyColor=\"#15122b\" color=\"blue.600\" size=\"md\" />\n                </Alert>\n            )}\n            {success && (\n                <Alert status=\"success\" className=\"mod\" py=\"2rem\" px=\"3rem\" mx=\"auto\" my=\"1rem\">\n                    <i className=\"fal fa-check-circle\"></i>\n                    <p>\n                        Successfully completed !\n                        <br />\n                        <small>\n                            Transaction hash :{\" \"}\n                            <a href={`https://etherscan.com/tx/${success}`} target=\"_blank\">\n                                {success}\n                            </a>\n                        </small>\n                    </p>\n                </Alert>\n            )}\n            <div>\n                <InputGroup rounded=\"full\">\n                    <NumberInput\n                        className=\"in\"\n                        placeholder=\"0.00\"\n                        variant=\"unstyled\"\n                        onChange={(value) => {\n                            parse(value);\n                            setAmountToStake(parseFloat(value));\n                        }}\n                        value={format(amountToStake.toString())}\n                        defaultValue={0.0}\n                        min={0.0}\n                    >\n                        <NumberInputField />\n                    </NumberInput>\n                    <InputRightElement width=\"4.5rem\" top=\"50%\" transform=\"translateY(-50%)\">\n                        <Button rounded=\"full\" colorScheme=\"blackAlpha\" h=\"1.75rem\" size=\"sm\" onClick={maxAmount}>\n                            Max\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n            </div>\n            <button className=\"bt\" onClick={doStake}>\n                Stake now\n            </button>\n        </form>\n    );\n};\n","/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastInfo.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastWarning.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastError.tsx",[],"/Users/nuixw/Documents/Localhost/GraphLinq.AppInterface/src/components/Toasts/ToastSuccess.tsx",["482","483"],"import React from \"react\";\nimport { Box, chakra, Flex, Icon } from \"@chakra-ui/react\";\nimport {HiOutlineCheckCircle} from 'react-icons/hi'\nimport { isLineBreak } from \"typescript\";\n\ninterface ToastSuccessProps {\n    title?: string\n    description?: string\n    isLink?: boolean\n}\n\nexport const ToastSuccess: React.FC<ToastSuccessProps> = (props) => {\n  return (\n      <Flex\n        maxW=\"sm\"\n        w=\"full\"\n        mx=\"auto\"\n        bg=\"gray.800\"\n        shadow=\"md\"\n        rounded=\"lg\"\n        overflow=\"hidden\"\n        className=\"mod\"\n      >\n        <Flex justifyContent=\"center\" alignItems=\"center\" w={12} bg=\"green.500\">\n          <Icon as={HiOutlineCheckCircle} color=\"white\" boxSize={6} />\n        </Flex>\n\n        <Box mx={-3} py={2} px={4}>\n          <Box mx={3}>\n            <chakra.span\n              color=\"green.400\"\n              fontWeight=\"bold\"\n            >\n              {props.title}\n            </chakra.span>\n            <chakra.p\n              color=\"gray.200\"\n              fontSize=\"sm\"\n            >\n                { props.isLink\n                ? props.description\n                : <p>Transaction hash : <a href={`https://etherscan.com/tx/${props.description}`} target=\"_blank\">{props.description}</a></p>\n                }\n            </chakra.p>\n          </Box>\n        </Box>\n      </Flex>\n  );\n};\n",{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","severity":1,"message":"489","line":2,"column":66,"nodeType":"490","messageId":"491","endLine":2,"endColumn":69},{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","severity":1,"message":"492","line":1,"column":17,"nodeType":"490","messageId":"491","endLine":1,"endColumn":25},{"ruleId":"488","severity":1,"message":"493","line":3,"column":28,"nodeType":"490","messageId":"491","endLine":3,"endColumn":36},{"ruleId":"494","severity":1,"message":"495","line":17,"column":6,"nodeType":"496","endLine":17,"endColumn":15,"suggestions":"497"},{"ruleId":"494","severity":1,"message":"498","line":36,"column":6,"nodeType":"496","endLine":36,"endColumn":24,"suggestions":"499"},{"ruleId":"500","severity":1,"message":"501","line":16,"column":40,"nodeType":"502","messageId":"503","endLine":16,"endColumn":43},{"ruleId":"504","severity":1,"message":"505","line":4,"column":1,"nodeType":"506","endLine":7,"endColumn":3},{"ruleId":"507","severity":1,"message":"508","line":67,"column":40,"nodeType":"509","messageId":"510","endLine":67,"endColumn":61},{"ruleId":"494","severity":1,"message":"511","line":29,"column":6,"nodeType":"496","endLine":29,"endColumn":30,"suggestions":"512"},{"ruleId":"500","severity":1,"message":"501","line":10,"column":36,"nodeType":"502","messageId":"503","endLine":10,"endColumn":39},{"ruleId":"500","severity":1,"message":"501","line":8,"column":42,"nodeType":"502","messageId":"503","endLine":8,"endColumn":44},{"ruleId":"500","severity":1,"message":"501","line":8,"column":65,"nodeType":"502","messageId":"503","endLine":8,"endColumn":68},{"ruleId":"488","severity":1,"message":"513","line":18,"column":7,"nodeType":"490","messageId":"491","endLine":18,"endColumn":12},{"ruleId":"500","severity":1,"message":"501","line":24,"column":47,"nodeType":"502","messageId":"503","endLine":24,"endColumn":49},{"ruleId":"488","severity":1,"message":"514","line":25,"column":22,"nodeType":"490","messageId":"491","endLine":25,"endColumn":31},{"ruleId":"494","severity":1,"message":"515","line":53,"column":8,"nodeType":"496","endLine":53,"endColumn":10,"suggestions":"516"},{"ruleId":"488","severity":1,"message":"517","line":128,"column":10,"nodeType":"490","messageId":"491","endLine":128,"endColumn":20},{"ruleId":"500","severity":1,"message":"501","line":18,"column":49,"nodeType":"502","messageId":"503","endLine":18,"endColumn":52},{"ruleId":"488","severity":1,"message":"518","line":2,"column":10,"nodeType":"490","messageId":"491","endLine":2,"endColumn":15},{"ruleId":"500","severity":1,"message":"501","line":10,"column":36,"nodeType":"502","messageId":"503","endLine":10,"endColumn":38},{"ruleId":"519","severity":1,"message":"520","line":18,"column":25,"nodeType":"509","messageId":"521","endLine":18,"endColumn":42,"fix":"522"},{"ruleId":"494","severity":1,"message":"523","line":58,"column":8,"nodeType":"496","endLine":58,"endColumn":10,"suggestions":"524"},{"ruleId":"500","severity":1,"message":"501","line":9,"column":40,"nodeType":"502","messageId":"503","endLine":9,"endColumn":43},{"ruleId":"488","severity":1,"message":"525","line":11,"column":20,"nodeType":"490","messageId":"491","endLine":11,"endColumn":29},{"ruleId":"488","severity":1,"message":"526","line":18,"column":18,"nodeType":"490","messageId":"491","endLine":18,"endColumn":25},{"ruleId":"494","severity":1,"message":"527","line":45,"column":8,"nodeType":"496","endLine":45,"endColumn":25,"suggestions":"528"},{"ruleId":"500","severity":1,"message":"501","line":17,"column":40,"nodeType":"502","messageId":"503","endLine":17,"endColumn":43},{"ruleId":"494","severity":1,"message":"529","line":48,"column":8,"nodeType":"496","endLine":48,"endColumn":17,"suggestions":"530"},{"ruleId":"531","severity":1,"message":"532","line":70,"column":32,"nodeType":"533","messageId":"503","endLine":70,"endColumn":34},{"ruleId":"500","severity":1,"message":"501","line":16,"column":46,"nodeType":"502","messageId":"503","endLine":16,"endColumn":49},{"ruleId":"488","severity":1,"message":"534","line":18,"column":24,"nodeType":"490","messageId":"491","endLine":18,"endColumn":37},{"ruleId":"535","severity":1,"message":"536","line":98,"column":52,"nodeType":"537","messageId":"538","endLine":98,"endColumn":133,"fix":"539"},{"ruleId":"535","severity":1,"message":"536","line":101,"column":88,"nodeType":"537","messageId":"538","endLine":101,"endColumn":169,"fix":"540"},{"ruleId":"488","severity":1,"message":"541","line":198,"column":12,"nodeType":"490","messageId":"491","endLine":198,"endColumn":30},{"ruleId":"494","severity":1,"message":"542","line":218,"column":8,"nodeType":"496","endLine":218,"endColumn":10,"suggestions":"543"},{"ruleId":"488","severity":1,"message":"544","line":2,"column":23,"nodeType":"490","messageId":"491","endLine":2,"endColumn":31},{"ruleId":"488","severity":1,"message":"545","line":2,"column":33,"nodeType":"490","messageId":"491","endLine":2,"endColumn":46},{"ruleId":"488","severity":1,"message":"546","line":2,"column":55,"nodeType":"490","messageId":"491","endLine":2,"endColumn":65},{"ruleId":"488","severity":1,"message":"547","line":2,"column":67,"nodeType":"490","messageId":"491","endLine":2,"endColumn":71},{"ruleId":"488","severity":1,"message":"548","line":2,"column":73,"nodeType":"490","messageId":"491","endLine":2,"endColumn":89},{"ruleId":"488","severity":1,"message":"549","line":2,"column":91,"nodeType":"490","messageId":"491","endLine":2,"endColumn":100},{"ruleId":"488","severity":1,"message":"550","line":2,"column":102,"nodeType":"490","messageId":"491","endLine":2,"endColumn":117},{"ruleId":"488","severity":1,"message":"551","line":2,"column":119,"nodeType":"490","messageId":"491","endLine":2,"endColumn":124},{"ruleId":"488","severity":1,"message":"552","line":2,"column":216,"nodeType":"490","messageId":"491","endLine":2,"endColumn":225},{"ruleId":"488","severity":1,"message":"553","line":2,"column":227,"nodeType":"490","messageId":"491","endLine":2,"endColumn":237},{"ruleId":"488","severity":1,"message":"554","line":2,"column":239,"nodeType":"490","messageId":"491","endLine":2,"endColumn":244},{"ruleId":"488","severity":1,"message":"555","line":2,"column":246,"nodeType":"490","messageId":"491","endLine":2,"endColumn":249},{"ruleId":"488","severity":1,"message":"556","line":2,"column":251,"nodeType":"490","messageId":"491","endLine":2,"endColumn":258},{"ruleId":"488","severity":1,"message":"557","line":2,"column":260,"nodeType":"490","messageId":"491","endLine":2,"endColumn":268},{"ruleId":"488","severity":1,"message":"558","line":2,"column":270,"nodeType":"490","messageId":"491","endLine":2,"endColumn":279},{"ruleId":"488","severity":1,"message":"559","line":2,"column":281,"nodeType":"490","messageId":"491","endLine":2,"endColumn":285},{"ruleId":"488","severity":1,"message":"560","line":2,"column":317,"nodeType":"490","messageId":"491","endLine":2,"endColumn":321},{"ruleId":"488","severity":1,"message":"561","line":2,"column":323,"nodeType":"490","messageId":"491","endLine":2,"endColumn":327},{"ruleId":"488","severity":1,"message":"562","line":3,"column":10,"nodeType":"490","messageId":"491","endLine":3,"endColumn":22},{"ruleId":"488","severity":1,"message":"563","line":4,"column":10,"nodeType":"490","messageId":"491","endLine":4,"endColumn":19},{"ruleId":"488","severity":1,"message":"564","line":5,"column":10,"nodeType":"490","messageId":"491","endLine":5,"endColumn":27},{"ruleId":"488","severity":1,"message":"565","line":6,"column":10,"nodeType":"490","messageId":"491","endLine":6,"endColumn":19},{"ruleId":"488","severity":1,"message":"566","line":10,"column":10,"nodeType":"490","messageId":"491","endLine":10,"endColumn":16},{"ruleId":"488","severity":1,"message":"567","line":33,"column":27,"nodeType":"490","messageId":"491","endLine":33,"endColumn":40},{"ruleId":"488","severity":1,"message":"568","line":44,"column":11,"nodeType":"490","messageId":"491","endLine":44,"endColumn":16},{"ruleId":"569","severity":1,"message":"570","line":160,"column":32,"nodeType":"571","messageId":"572","endLine":160,"endColumn":34},{"ruleId":"569","severity":1,"message":"570","line":160,"column":53,"nodeType":"571","messageId":"572","endLine":160,"endColumn":55},{"ruleId":"488","severity":1,"message":"573","line":2,"column":10,"nodeType":"490","messageId":"491","endLine":2,"endColumn":23},{"ruleId":"488","severity":1,"message":"574","line":5,"column":8,"nodeType":"490","messageId":"491","endLine":5,"endColumn":20},{"ruleId":"488","severity":1,"message":"575","line":10,"column":10,"nodeType":"490","messageId":"491","endLine":10,"endColumn":27},{"ruleId":"507","severity":1,"message":"508","line":23,"column":20,"nodeType":"509","messageId":"510","endLine":23,"endColumn":43},{"ruleId":"488","severity":1,"message":"576","line":2,"column":22,"nodeType":"490","messageId":"491","endLine":2,"endColumn":27},{"ruleId":"488","severity":1,"message":"577","line":2,"column":29,"nodeType":"490","messageId":"491","endLine":2,"endColumn":37},{"ruleId":"531","severity":1,"message":"532","line":16,"column":37,"nodeType":"533","messageId":"503","endLine":16,"endColumn":39},{"ruleId":"488","severity":1,"message":"578","line":2,"column":205,"nodeType":"490","messageId":"491","endLine":2,"endColumn":211},{"ruleId":"488","severity":1,"message":"579","line":2,"column":218,"nodeType":"490","messageId":"491","endLine":2,"endColumn":229},{"ruleId":"488","severity":1,"message":"580","line":2,"column":231,"nodeType":"490","messageId":"491","endLine":2,"endColumn":238},{"ruleId":"488","severity":1,"message":"581","line":2,"column":240,"nodeType":"490","messageId":"491","endLine":2,"endColumn":251},{"ruleId":"488","severity":1,"message":"582","line":3,"column":10,"nodeType":"490","messageId":"491","endLine":3,"endColumn":22},{"ruleId":"488","severity":1,"message":"583","line":10,"column":8,"nodeType":"490","messageId":"491","endLine":10,"endColumn":19},{"ruleId":"488","severity":1,"message":"584","line":11,"column":8,"nodeType":"490","messageId":"491","endLine":11,"endColumn":15},{"ruleId":"488","severity":1,"message":"585","line":29,"column":9,"nodeType":"490","messageId":"491","endLine":29,"endColumn":16},{"ruleId":"494","severity":1,"message":"586","line":89,"column":8,"nodeType":"496","endLine":89,"endColumn":16,"suggestions":"587"},{"ruleId":"488","severity":1,"message":"588","line":126,"column":15,"nodeType":"490","messageId":"491","endLine":126,"endColumn":30},{"ruleId":"488","severity":1,"message":"589","line":2,"column":23,"nodeType":"490","messageId":"491","endLine":2,"endColumn":32},{"ruleId":"488","severity":1,"message":"551","line":2,"column":34,"nodeType":"490","messageId":"491","endLine":2,"endColumn":39},{"ruleId":"488","severity":1,"message":"549","line":3,"column":17,"nodeType":"490","messageId":"491","endLine":3,"endColumn":26},{"ruleId":"488","severity":1,"message":"590","line":3,"column":28,"nodeType":"490","messageId":"491","endLine":3,"endColumn":32},{"ruleId":"488","severity":1,"message":"591","line":3,"column":34,"nodeType":"490","messageId":"491","endLine":3,"endColumn":41},{"ruleId":"488","severity":1,"message":"592","line":1,"column":19,"nodeType":"490","messageId":"491","endLine":1,"endColumn":22},{"ruleId":"488","severity":1,"message":"593","line":1,"column":10,"nodeType":"490","messageId":"491","endLine":1,"endColumn":19},{"ruleId":"488","severity":1,"message":"594","line":9,"column":7,"nodeType":"490","messageId":"491","endLine":9,"endColumn":31},{"ruleId":"488","severity":1,"message":"592","line":1,"column":10,"nodeType":"490","messageId":"491","endLine":1,"endColumn":13},{"ruleId":"488","severity":1,"message":"595","line":1,"column":15,"nodeType":"490","messageId":"491","endLine":1,"endColumn":21},{"ruleId":"488","severity":1,"message":"596","line":1,"column":23,"nodeType":"490","messageId":"491","endLine":1,"endColumn":34},{"ruleId":"488","severity":1,"message":"560","line":1,"column":36,"nodeType":"490","messageId":"491","endLine":1,"endColumn":40},{"ruleId":"488","severity":1,"message":"547","line":1,"column":42,"nodeType":"490","messageId":"491","endLine":1,"endColumn":46},{"ruleId":"488","severity":1,"message":"597","line":2,"column":10,"nodeType":"490","messageId":"491","endLine":2,"endColumn":25},{"ruleId":"488","severity":1,"message":"493","line":5,"column":28,"nodeType":"490","messageId":"491","endLine":5,"endColumn":36},{"ruleId":"488","severity":1,"message":"598","line":6,"column":10,"nodeType":"490","messageId":"491","endLine":6,"endColumn":33},{"ruleId":"500","severity":1,"message":"501","line":13,"column":59,"nodeType":"502","messageId":"503","endLine":13,"endColumn":62},{"ruleId":"494","severity":1,"message":"599","line":20,"column":8,"nodeType":"496","endLine":20,"endColumn":17,"suggestions":"600"},{"ruleId":"488","severity":1,"message":"601","line":2,"column":10,"nodeType":"490","messageId":"491","endLine":2,"endColumn":15},{"ruleId":"488","severity":1,"message":"602","line":39,"column":56,"nodeType":"490","messageId":"491","endLine":39,"endColumn":63},{"ruleId":"488","severity":1,"message":"603","line":53,"column":9,"nodeType":"490","messageId":"491","endLine":53,"endColumn":26},{"ruleId":"488","severity":1,"message":"604","line":79,"column":15,"nodeType":"490","messageId":"491","endLine":79,"endColumn":25},{"ruleId":"494","severity":1,"message":"605","line":106,"column":6,"nodeType":"496","endLine":106,"endColumn":15,"suggestions":"606"},{"ruleId":"494","severity":1,"message":"607","line":108,"column":9,"nodeType":"608","endLine":111,"endColumn":4,"suggestions":"609"},{"ruleId":"494","severity":1,"message":"610","line":108,"column":9,"nodeType":"608","endLine":111,"endColumn":4,"suggestions":"611"},{"ruleId":"488","severity":1,"message":"560","line":2,"column":18,"nodeType":"490","messageId":"491","endLine":2,"endColumn":22},{"ruleId":"488","severity":1,"message":"547","line":2,"column":24,"nodeType":"490","messageId":"491","endLine":2,"endColumn":28},{"ruleId":"488","severity":1,"message":"548","line":2,"column":37,"nodeType":"490","messageId":"491","endLine":2,"endColumn":53},{"ruleId":"488","severity":1,"message":"549","line":2,"column":55,"nodeType":"490","messageId":"491","endLine":2,"endColumn":64},{"ruleId":"488","severity":1,"message":"546","line":2,"column":66,"nodeType":"490","messageId":"491","endLine":2,"endColumn":76},{"ruleId":"488","severity":1,"message":"612","line":2,"column":128,"nodeType":"490","messageId":"491","endLine":2,"endColumn":139},{"ruleId":"488","severity":1,"message":"597","line":3,"column":10,"nodeType":"490","messageId":"491","endLine":3,"endColumn":25},{"ruleId":"500","severity":1,"message":"501","line":13,"column":61,"nodeType":"502","messageId":"503","endLine":13,"endColumn":64},{"ruleId":"535","severity":1,"message":"536","line":93,"column":62,"nodeType":"537","messageId":"538","endLine":93,"endColumn":126,"fix":"613"},{"ruleId":"488","severity":1,"message":"547","line":2,"column":18,"nodeType":"490","messageId":"491","endLine":2,"endColumn":22},{"ruleId":"488","severity":1,"message":"592","line":2,"column":24,"nodeType":"490","messageId":"491","endLine":2,"endColumn":27},{"ruleId":"488","severity":1,"message":"614","line":2,"column":35,"nodeType":"490","messageId":"491","endLine":2,"endColumn":41},{"ruleId":"494","severity":1,"message":"511","line":29,"column":6,"nodeType":"496","endLine":29,"endColumn":25,"suggestions":"615"},{"ruleId":"488","severity":1,"message":"560","line":2,"column":18,"nodeType":"490","messageId":"491","endLine":2,"endColumn":22},{"ruleId":"488","severity":1,"message":"547","line":2,"column":24,"nodeType":"490","messageId":"491","endLine":2,"endColumn":28},{"ruleId":"488","severity":1,"message":"548","line":2,"column":37,"nodeType":"490","messageId":"491","endLine":2,"endColumn":53},{"ruleId":"488","severity":1,"message":"549","line":2,"column":55,"nodeType":"490","messageId":"491","endLine":2,"endColumn":64},{"ruleId":"488","severity":1,"message":"546","line":2,"column":66,"nodeType":"490","messageId":"491","endLine":2,"endColumn":76},{"ruleId":"488","severity":1,"message":"612","line":2,"column":128,"nodeType":"490","messageId":"491","endLine":2,"endColumn":139},{"ruleId":"488","severity":1,"message":"616","line":3,"column":10,"nodeType":"490","messageId":"491","endLine":3,"endColumn":24},{"ruleId":"488","severity":1,"message":"617","line":5,"column":10,"nodeType":"490","messageId":"491","endLine":5,"endColumn":27},{"ruleId":"500","severity":1,"message":"501","line":15,"column":59,"nodeType":"502","messageId":"503","endLine":15,"endColumn":62},{"ruleId":"535","severity":1,"message":"536","line":106,"column":64,"nodeType":"537","messageId":"538","endLine":106,"endColumn":128,"fix":"618"},{"ruleId":"488","severity":1,"message":"619","line":2,"column":8,"nodeType":"490","messageId":"491","endLine":2,"endColumn":14},{"ruleId":"488","severity":1,"message":"620","line":3,"column":10,"nodeType":"490","messageId":"491","endLine":3,"endColumn":16},{"ruleId":"488","severity":1,"message":"621","line":2,"column":10,"nodeType":"490","messageId":"491","endLine":2,"endColumn":21},{"ruleId":"488","severity":1,"message":"622","line":2,"column":23,"nodeType":"490","messageId":"491","endLine":2,"endColumn":34},{"ruleId":"488","severity":1,"message":"623","line":4,"column":10,"nodeType":"490","messageId":"491","endLine":4,"endColumn":22},{"ruleId":"488","severity":1,"message":"624","line":12,"column":30,"nodeType":"490","messageId":"491","endLine":12,"endColumn":46},{"ruleId":"494","severity":1,"message":"625","line":328,"column":8,"nodeType":"496","endLine":328,"endColumn":31,"suggestions":"626"},{"ruleId":"494","severity":1,"message":"627","line":346,"column":8,"nodeType":"496","endLine":346,"endColumn":10,"suggestions":"628"},{"ruleId":"535","severity":1,"message":"536","line":519,"column":49,"nodeType":"537","messageId":"538","endLine":519,"endColumn":113,"fix":"629"},{"ruleId":"531","severity":1,"message":"532","line":528,"column":60,"nodeType":"533","messageId":"503","endLine":528,"endColumn":62},{"ruleId":"531","severity":1,"message":"532","line":529,"column":68,"nodeType":"533","messageId":"503","endLine":529,"endColumn":70},{"ruleId":"531","severity":1,"message":"532","line":534,"column":60,"nodeType":"533","messageId":"503","endLine":534,"endColumn":62},{"ruleId":"531","severity":1,"message":"532","line":535,"column":68,"nodeType":"533","messageId":"503","endLine":535,"endColumn":70},{"ruleId":"531","severity":1,"message":"532","line":540,"column":60,"nodeType":"533","messageId":"503","endLine":540,"endColumn":62},{"ruleId":"531","severity":1,"message":"532","line":541,"column":68,"nodeType":"533","messageId":"503","endLine":541,"endColumn":70},{"ruleId":"531","severity":1,"message":"630","line":17,"column":28,"nodeType":"533","messageId":"503","endLine":17,"endColumn":30},{"ruleId":"494","severity":1,"message":"511","line":28,"column":5,"nodeType":"496","endLine":28,"endColumn":31,"suggestions":"631"},{"ruleId":"488","severity":1,"message":"632","line":30,"column":8,"nodeType":"490","messageId":"491","endLine":30,"endColumn":23},{"ruleId":"535","severity":1,"message":"536","line":122,"column":41,"nodeType":"537","messageId":"538","endLine":122,"endColumn":105,"fix":"633"},{"ruleId":"488","severity":1,"message":"634","line":5,"column":10,"nodeType":"490","messageId":"491","endLine":5,"endColumn":22},{"ruleId":"488","severity":1,"message":"635","line":5,"column":5,"nodeType":"490","messageId":"491","endLine":5,"endColumn":11},{"ruleId":"488","severity":1,"message":"636","line":7,"column":5,"nodeType":"490","messageId":"491","endLine":7,"endColumn":10},{"ruleId":"488","severity":1,"message":"551","line":8,"column":5,"nodeType":"490","messageId":"491","endLine":8,"endColumn":10},{"ruleId":"488","severity":1,"message":"637","line":10,"column":5,"nodeType":"490","messageId":"491","endLine":10,"endColumn":21},{"ruleId":"535","severity":1,"message":"536","line":174,"column":29,"nodeType":"537","messageId":"538","endLine":174,"endColumn":93,"fix":"638"},{"ruleId":"488","severity":1,"message":"639","line":4,"column":10,"nodeType":"490","messageId":"491","endLine":4,"endColumn":21},{"ruleId":"535","severity":1,"message":"536","line":42,"column":41,"nodeType":"537","messageId":"538","endLine":42,"endColumn":115,"fix":"640"},"no-native-reassign",["641"],"no-negated-in-lhs",["642"],"@typescript-eslint/no-unused-vars","'bsc' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["643"],"React Hook useEffect has a missing dependency: 'refreshBalance'. Either include it or remove the dependency array.",["644"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["645"],"'pulse' is assigned a value but never used.","'connector' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refreshGlqPrice'. Either include it or remove the dependency array.",["646"],"'StatusIcon' is defined but never used.","'Alert' is defined but never used.","new-parens","Missing '()' invoking a constructor.","missing",{"range":"647","text":"648"},"React Hook useEffect has a missing dependency: 'applyCss'. Either include it or remove the dependency array.",["649"],"'setAccess' is assigned a value but never used.","'setAddr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'contract'. Either include it or remove the dependency array.",["650"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["651"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'setFileUpload' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"652","text":"653"},{"range":"654","text":"653"},"'compressedTemplate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'decompTemplate?.nodes' and 'handleChange'. Either include them or remove the dependency array.",["655"],"'Editable' is defined but never used.","'EditableInput' is defined but never used.","'AlertTitle' is defined but never used.","'Text' is defined but never used.","'AlertDescription' is defined but never used.","'AlertIcon' is defined but never used.","'EditablePreview' is defined but never used.","'Input' is defined but never used.","'propNames' is defined but never used.","'SimpleGrid' is defined but never used.","'Stack' is defined but never used.","'Tab' is defined but never used.","'TabList' is defined but never used.","'TabPanel' is defined but never used.","'TabPanels' is defined but never used.","'Tabs' is defined but never used.","'Icon' is defined but never used.","'Flex' is defined but never used.","'TemplateCard' is defined but never used.","'BlankCard' is defined but never used.","'TemplateVariables' is defined but never used.","'RadioCard' is defined but never used.","'FiEdit' is defined but never used.","'getRadioProps' is assigned a value but never used.","'group' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'ErrorResponse' is defined but never used.","'AuthResponse' is defined but never used.","'GraphStateRequest' is defined but never used.","'Badge' is defined but never used.","'useRadio' is defined but never used.","'Portal' is defined but never used.","'LinkOverlay' is defined but never used.","'LinkBox' is defined but never used.","'MenuDivider' is defined but never used.","'HiOutlineEye' is defined but never used.","'useInterval' is defined but never used.","'Cookies' is defined but never used.","'secDiff' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tickLogs'. Either include it or remove the dependency array.",["656"],"'result' is assigned a value but never used.","'FormLabel' is defined but never used.","'Grid' is defined but never used.","'Heading' is defined but never used.","'Box' is defined but never used.","'AnyAction' is defined but never used.","'StyledIdenticonContainer' is assigned a value but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'FiArrowDownLeft' is defined but never used.","'UnsupportedChainIdError' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshBalanceContract'. Either include it or remove the dependency array.",["657"],"'Modal' is defined but never used.","'library' is assigned a value but never used.","'binanceWalletSign' is assigned a value but never used.","'firstChain' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activate', 'connector', 'dispatch', and 'history'. Either include them or remove the dependency array.",["658"],"The 'toggleWalletModal' function makes the dependencies of useEffect Hook (at line 118) change on every render. To fix this, wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.","VariableDeclarator",["659"],"The 'toggleWalletModal' function makes the dependencies of useEffect Hook (at line 183) change on every render. To fix this, wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.",["660"],"'ModalHeader' is defined but never used.",{"range":"661","text":"653"},"'Spacer' is defined but never used.",["662"],"'FiArrowUpRight' is defined but never used.","'getDecimalsAmount' is defined but never used.",{"range":"663","text":"653"},"'styled' is defined but never used.","'darken' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'useWeb3React' is defined but never used.","'useTokenContract' is defined but never used.","React Hook useEffect has missing dependencies: 'calcAhead', 'loadDatas', and 'refreshBalance'. Either include them or remove the dependency array.",["664"],"React Hook useEffect has missing dependencies: 'refreshBalance' and 'refreshTotalStakers'. Either include them or remove the dependency array.",["665"],{"range":"666","text":"653"},"Expected '!==' and instead saw '!='.",["667"],"'refreshTiersAPY' is assigned a value but never used.",{"range":"668","text":"653"},"'ToastWarning' is defined but never used.","'chakra' is defined but never used.","'Image' is defined but never used.","'InputLeftElement' is defined but never used.",{"range":"669","text":"653"},"'isLineBreak' is defined but never used.",{"range":"670","text":"653"},"no-global-assign","no-unsafe-negation",{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},[584,584],"()",{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"683","fix":"684"},[4998,4998]," rel=\"noreferrer\"",[5291,5291],{"desc":"685","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"693","fix":"695"},[4011,4011],{"desc":"696","fix":"697"},[5229,5229],{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},[21473,21473],{"desc":"702","fix":"703"},[4696,4696],[7243,7243],[1208,1208],"Update the dependencies array to be: [account, history]",{"range":"704","text":"705"},"Update the dependencies array to be: [chainId, account, refreshBalance]",{"range":"706","text":"707"},"Update the dependencies array to be: [account, dispatch, tokenContract]",{"range":"708","text":"709"},"Update the dependencies array to be: [refreshGlqPrice]",{"range":"710","text":"711"},"Update the dependencies array to be: [applyCss]",{"range":"712","text":"713"},"Update the dependencies array to be: [account, access, contract]",{"range":"714","text":"715"},"Update the dependencies array to be: [account, dispatch]",{"range":"716","text":"717"},"Update the dependencies array to be: [decompTemplate?.nodes, handleChange]",{"range":"718","text":"719"},"Update the dependencies array to be: [inLogs, tickLogs]",{"range":"720","text":"721"},"Update the dependencies array to be: [account, refreshBalanceContract]",{"range":"722","text":"723"},"Update the dependencies array to be: [account, activate, connector, dispatch, history]",{"range":"724","text":"725"},"Wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.",{"range":"726","text":"727"},{"range":"728","text":"727"},"Update the dependencies array to be: [account, contract, dispatch]",{"range":"729","text":"730"},"Update the dependencies array to be: [tx, stakers, glqPrice, refreshBalance, loadDatas, calcAhead]",{"range":"731","text":"732"},"Update the dependencies array to be: [refreshBalance, refreshTotalStakers]",{"range":"733","text":"734"},"Update the dependencies array to be: [account, dispatch, stakingContract]",{"range":"735","text":"736"},[581,590],"[account, history]",[1353,1371],"[chainId, account, refreshBalance]",[963,987],"[account, dispatch, tokenContract]",[2107,2109],"[refreshGlqPrice]",[2754,2756],"[applyCss]",[1901,1918],"[account, access, contract]",[1484,1493],"[account, dispatch]",[9604,9606],"[decompTemplate?.nodes, handleChange]",[2812,2820],"[inLogs, tickLogs]",[688,697],"[account, refreshBalanceContract]",[3224,3233],"[account, activate, connector, dispatch, history]",[3264,3420],"useCallback(() => {\n    if (walletModalOpen) dispatch({ type: CLOSE_MODAL, name: \"walletManager\" });\n    else dispatch({ type: OPEN_MODAL, name: \"walletManager\" });\n  })",[3264,3420],[1021,1040],"[account, contract, dispatch]",[11280,11303],"[tx, stakers, glqPrice, refreshBalance, loadDatas, calcAhead]",[11851,11853],"[refreshBalance, refreshTotalStakers]",[976,1002],"[account, dispatch, stakingContract]"]