[{"/mnt/f/eth/graphlinq/graphlinq-frontend/src/constants/index.tsx":"1","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/index.tsx":"2","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/SuspenseSpinner.tsx":"3","/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/fortmatic.tsx":"4","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/actions/index.ts":"5","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Graphs.tsx":"6","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/BlankCard.tsx":"7","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Graphs/GraphCard.tsx":"8","/mnt/f/eth/graphlinq/graphlinq-frontend/src/reportWebVitals.js":"9","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/Option.tsx":"10","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ModalWithdraw.tsx":"11","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateCard.tsx":"12","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/PendingView.tsx":"13","/mnt/f/eth/graphlinq/graphlinq-frontend/src/utils/getLibrary.tsx":"14","/mnt/f/eth/graphlinq/graphlinq-frontend/src/containers/Layout.tsx":"15","/mnt/f/eth/graphlinq/graphlinq-frontend/src/theme/components/tooltip.ts":"16","/mnt/f/eth/graphlinq/graphlinq-frontend/src/containers/Main.tsx":"17","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Sidebar.tsx":"18","/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/index.tsx":"19","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/constants/actions.ts":"20","/mnt/f/eth/graphlinq/graphlinq-frontend/src/assets/icons/index.tsx":"21","/mnt/f/eth/graphlinq/graphlinq-frontend/src/enums/graphState.tsx":"22","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/WalletManager.tsx":"23","/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/types.tsx":"24","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/diagrams.ts":"25","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useContract.tsx":"26","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/usePrevious.tsx":"27","/mnt/f/eth/graphlinq/graphlinq-frontend/src/App.tsx":"28","/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/index.tsx":"29","/mnt/f/eth/graphlinq/graphlinq-frontend/src/sagas/modals.tsx":"30","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Auth.tsx":"31","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/404.tsx":"32","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/modals.ts":"33","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Header/identicon.tsx":"34","/mnt/f/eth/graphlinq/graphlinq-frontend/src/mock/mocks.tsx":"35","/mnt/f/eth/graphlinq/graphlinq-frontend/src/providers/manager.tsx":"36","/mnt/f/eth/graphlinq/graphlinq-frontend/src/index.tsx":"37","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/RadioCard.tsx":"38","/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/sidebar.tsx":"39","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ModalDeposit.tsx":"40","/mnt/f/eth/graphlinq/graphlinq-frontend/src/web3/web3Manager.tsx":"41","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useBalance.tsx":"42","/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/networkConnector.tsx":"43","/mnt/f/eth/graphlinq/graphlinq-frontend/src/utils/index.tsx":"44","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ContractCard.tsx":"45","/mnt/f/eth/graphlinq/graphlinq-frontend/src/services/graphService.tsx":"46","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useWalletContract.tsx":"47","/mnt/f/eth/graphlinq/graphlinq-frontend/src/theme/colors.ts":"48","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Home.tsx":"49","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/GraphCreation.tsx":"50","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Graphs/GraphStatus.tsx":"51","/mnt/f/eth/graphlinq/graphlinq-frontend/src/services/walletService.tsx":"52","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Header/Header.tsx":"53","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/index.ts":"54","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateVariables.tsx":"55","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/MotionBox.tsx":"56","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/store.ts":"57","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateFile.tsx":"58","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Presale.tsx":"59"},{"size":1943,"mtime":1615835465013,"results":"60","hashOfConfig":"61"},{"size":2746,"mtime":1612815854201,"results":"62","hashOfConfig":"61"},{"size":492,"mtime":1614285127145,"results":"63","hashOfConfig":"61"},{"size":1402,"mtime":1612815854198,"results":"64","hashOfConfig":"61"},{"size":622,"mtime":1614542538803,"results":"65","hashOfConfig":"61"},{"size":5773,"mtime":1616857857611,"results":"66","hashOfConfig":"61"},{"size":996,"mtime":1614878772395,"results":"67","hashOfConfig":"61"},{"size":11184,"mtime":1616858287124,"results":"68","hashOfConfig":"61"},{"size":375,"mtime":1612815854206,"results":"69","hashOfConfig":"61"},{"size":1166,"mtime":1614461293756,"results":"70","hashOfConfig":"61"},{"size":6921,"mtime":1615851536818,"results":"71","hashOfConfig":"61"},{"size":1128,"mtime":1615156399515,"results":"72","hashOfConfig":"61"},{"size":2600,"mtime":1614285127143,"results":"73","hashOfConfig":"61"},{"size":225,"mtime":1612815854208,"results":"74","hashOfConfig":"61"},{"size":1755,"mtime":1614285127145,"results":"75","hashOfConfig":"61"},{"size":194,"mtime":1614103901613,"results":"76","hashOfConfig":"61"},{"size":280,"mtime":1614252578486,"results":"77","hashOfConfig":"61"},{"size":2527,"mtime":1614826291290,"results":"78","hashOfConfig":"61"},{"size":713,"mtime":1615673408756,"results":"79","hashOfConfig":"61"},{"size":138,"mtime":1612815854204,"results":"80","hashOfConfig":"61"},{"size":544,"mtime":1615673408752,"results":"81","hashOfConfig":"61"},{"size":142,"mtime":1613409098539,"results":"82","hashOfConfig":"61"},{"size":10549,"mtime":1615836910471,"results":"83","hashOfConfig":"61"},{"size":907,"mtime":1614268099202,"results":"84","hashOfConfig":"61"},{"size":440,"mtime":1612911508114,"results":"85","hashOfConfig":"61"},{"size":1404,"mtime":1615675278696,"results":"86","hashOfConfig":"61"},{"size":557,"mtime":1612815854201,"results":"87","hashOfConfig":"61"},{"size":824,"mtime":1614267977079,"results":"88","hashOfConfig":"61"},{"size":2119,"mtime":1615835220473,"results":"89","hashOfConfig":"61"},{"size":590,"mtime":1612822498007,"results":"90","hashOfConfig":"61"},{"size":2996,"mtime":1614254938834,"results":"91","hashOfConfig":"61"},{"size":426,"mtime":1614032567223,"results":"92","hashOfConfig":"61"},{"size":1589,"mtime":1614543486732,"results":"93","hashOfConfig":"61"},{"size":1035,"mtime":1614252578483,"results":"94","hashOfConfig":"61"},{"size":8555,"mtime":1612815854203,"results":"95","hashOfConfig":"61"},{"size":10773,"mtime":1615702230272,"results":"96","hashOfConfig":"61"},{"size":1226,"mtime":1614262791842,"results":"97","hashOfConfig":"61"},{"size":1377,"mtime":1615156169993,"results":"98","hashOfConfig":"61"},{"size":605,"mtime":1615673408757,"results":"99","hashOfConfig":"61"},{"size":7204,"mtime":1615851536078,"results":"100","hashOfConfig":"61"},{"size":1435,"mtime":1612911508116,"results":"101","hashOfConfig":"61"},{"size":1061,"mtime":1614565652862,"results":"102","hashOfConfig":"61"},{"size":4551,"mtime":1612815854199,"results":"103","hashOfConfig":"61"},{"size":3201,"mtime":1614547717477,"results":"104","hashOfConfig":"61"},{"size":1716,"mtime":1614569132980,"results":"105","hashOfConfig":"61"},{"size":5413,"mtime":1615165558433,"results":"106","hashOfConfig":"61"},{"size":1122,"mtime":1614548394180,"results":"107","hashOfConfig":"61"},{"size":1402,"mtime":1614103901612,"results":"108","hashOfConfig":"61"},{"size":599,"mtime":1614541062619,"results":"109","hashOfConfig":"61"},{"size":32012,"mtime":1615166298056,"results":"110","hashOfConfig":"61"},{"size":2135,"mtime":1614374018560,"results":"111","hashOfConfig":"61"},{"size":2524,"mtime":1614648367052,"results":"112","hashOfConfig":"61"},{"size":5134,"mtime":1615673408754,"results":"113","hashOfConfig":"61"},{"size":120,"mtime":1612911508114,"results":"114","hashOfConfig":"61"},{"size":824,"mtime":1614877556557,"results":"115","hashOfConfig":"61"},{"size":128,"mtime":1614032567216,"results":"116","hashOfConfig":"61"},{"size":672,"mtime":1612815854206,"results":"117","hashOfConfig":"61"},{"size":742,"mtime":1615156379587,"results":"118","hashOfConfig":"61"},{"size":12563,"mtime":1615914705915,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"119h5yz",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"128"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"183"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"124"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"136"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"124"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"128"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"148"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"128"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"193"},"/mnt/f/eth/graphlinq/graphlinq-frontend/src/constants/index.tsx",["282"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/index.tsx",[],["283","284"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/SuspenseSpinner.tsx",["285","286","287"],"import { AbsoluteCenter, Center, Flex, Spinner } from '@chakra-ui/react';\r\nimport React from 'react'\r\n\r\ninterface SuspenseSpinnerProps {\r\n\r\n}\r\n\r\nexport const SuspenseSpinner: React.FC<SuspenseSpinnerProps> = ({ }) => {\r\n    return (\r\n        <Center h=\"full\">\r\n            <Spinner\r\n                thickness=\"5px\"\r\n                speed=\"0.65s\"\r\n                emptyColor=\"gray.200\"\r\n                color=\"brand.500\"\r\n                size=\"xl\"\r\n            />\r\n        </Center>\r\n    );\r\n}",["288","289"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/fortmatic.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/actions/index.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Graphs.tsx",["290","291","292","293","294","295","296","297"],"import React, { useState, useEffect } from 'react';\r\nimport { Grid, Heading, VStack, Box, Flex, Text, Spacer, HStack, IconButton, Icon, Button, Alert, AlertIcon, Center } from '@chakra-ui/react';\r\nimport { GraphCard } from '../components/Graphs/GraphCard';\r\nimport { HiPlus } from 'react-icons/hi';\r\nimport { GraphResponse } from '../providers/responses/graph';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport GraphService from '../services/graphService';\r\nimport { GRAPH_UPDATE } from '../redux/actions';\r\nimport { GraphStateEnum } from '../enums/graphState';\r\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\r\nimport { GraphCreation } from '../components/GraphCreation/GraphCreation';\r\n\r\ninterface GraphsProps {\r\n\r\n}\r\n\r\nconst Graphs: React.FC<GraphsProps> = ({ }) => {\r\n\r\n    const [reachable, setReacheable] = useState(true)\r\n    const { account } = useWeb3React();\r\n    const dispatch = useDispatch();\r\n\r\n    const graphsList: GraphResponse[] = useSelector(\r\n        (state: any) => state.modals.graphs.list\r\n    );\r\n\r\n    const loaded: boolean = useSelector(\r\n        (state: any) => state.modals.graphs.loaded\r\n    );\r\n\r\n    useEffect(() => {\r\n        const refreshfnc = async () => {\r\n            const graphs: GraphResponse[] | undefined = await GraphService.listGraphs();\r\n            if (graphs === undefined) {\r\n                return setReacheable(false)\r\n             }\r\n\r\n            dispatch({\r\n                name: \"graphs\",\r\n                type: GRAPH_UPDATE,\r\n                payload: { graphs, loaded: true },\r\n            })\r\n\r\n            setTimeout(refreshfnc, 10000)\r\n        };\r\n\r\n        refreshfnc()\r\n    }, [account])\r\n\r\n    return (\r\n        <Grid px={24}>\r\n            <Heading as=\"h1\" size=\"lg\" fontWeight=\"semibold\" textColor=\"gray.700\" my={12}>Graphs</Heading>\r\n            <Box\r\n                w=\"full\" py={2} px={6}\r\n                bgColor=\"brand.500\"\r\n                borderRadius=\"md\"\r\n                mb={6}\r\n            >\r\n                <Flex alignItems=\"center\">\r\n                    <Text fontSize=\"md\" textColor=\"brand.50\">\r\n                        Below is the list of your Graphs. You can view logs, stop or delete each one of them.\r\n                        </Text>\r\n                    <Spacer />\r\n                    <GraphCreation\r\n                        colorScheme=\"brand\"\r\n                        rightIcon={<Icon w={5} h={5} as={HiPlus} />}\r\n                    >\r\n                        New Graph\r\n                    </GraphCreation>\r\n                </Flex>\r\n            </Box>\r\n\r\n            {reachable && !loaded &&\r\n            <SuspenseSpinner/>}\r\n\r\n            {!reachable &&\r\n             <Alert status=\"error\" variant=\"left-accent\" whiteSpace=\"pre-wrap\">\r\n             <AlertIcon />\r\n             The engine main-net network can't be reached, please try again later or contact the <i>GraphLinq Support</i>.\r\n         </Alert>}\r\n\r\n            {graphsList.length == 0 && loaded &&\r\n                <Alert status=\"warning\" variant=\"left-accent\" whiteSpace=\"pre-wrap\">\r\n                    <AlertIcon />\r\n                    You don't have created or deployed any graph yet, refer to our \r\n                    <Box\r\n                        as=\"a\"\r\n                        target=\"_blank\"\r\n                        marginStart=\"1\"\r\n                        href=\"https://docs.graphlinq.io/graph\"\r\n                        color='amber.600'\r\n                        _hover={{ color: 'amber.700' }}\r\n                        display={{ base: 'block', sm: 'revert' }}\r\n                    >documentation</Box> to start your journey.\r\n                </Alert>\r\n            }\r\n\r\n            {graphsList.length > 0 &&\r\n            <div>\r\n                <Box py={3} px={8}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Box flex=\"1 1 0%\" display=\"flex\" px={2}>\r\n                            <Text fontSize=\"xs\" textColor=\"gray.500\">Name :</Text>\r\n                            <Spacer />\r\n                        </Box>\r\n                        <Box display=\"flex\" width=\"48px\" minH=\"48px\" justifyContent=\"center\" px={2} />\r\n                        <Box display=\"flex\" width=\"200px\" px={2}>\r\n                            <Text fontSize=\"xs\" textColor=\"gray.500\">Hosted API :</Text>\r\n                            <Spacer />\r\n                        </Box>\r\n                        <Box display=\"flex\" width=\"200px\" px={2}>\r\n                            <Text fontSize=\"xs\" textColor=\"gray.500\">Execution cost :</Text>\r\n                            <Spacer />\r\n                        </Box>\r\n                        <Box display=\"flex\" width=\"160px\" px={2}>\r\n                            <Text fontSize=\"xs\" textColor=\"gray.500\">Running since :</Text>\r\n                            <Spacer />\r\n                        </Box>\r\n                        <Box display=\"flex\" width=\"160px\" px={2}>\r\n                            <Text fontSize=\"xs\" textColor=\"gray.500\">Created :</Text>\r\n                            <Spacer />\r\n                        </Box>\r\n                        <Box display=\"flex\" width=\"135px\" minH=\"48px\" justifyContent=\"center\" px={2} />\r\n                        <Box display=\"flex\" width=\"40px\" minH=\"48px\" justifyContent=\"center\" />\r\n                    </Flex>\r\n                </Box>\r\n                <VStack spacing={8} mb={4}>\r\n                    {graphsList.sort((a: GraphResponse, b: GraphResponse) => { return b.state - a.state }).map((x: GraphResponse, i: number) => {\r\n                        return <GraphCard key={`graph-${i}`} GraphInfo={x} />\r\n                    })}\r\n                </VStack>\r\n            </div>\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Graphs;",["298","299"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/BlankCard.tsx",["300","301"],"import React, {useEffect} from 'react'\r\nimport { Box, useRadio, Icon, Flex } from '@chakra-ui/react';\r\nimport { FiFile } from 'react-icons/fi';\r\n\r\ninterface BlankCardProps {\r\n\r\n}\r\n\r\nexport const BlankCard: React.FC<BlankCardProps> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\" h=\"90px\" maxH=\"90px\" w=\"full\" color=\"gray.600\">\r\n                <Icon as={FiFile} w=\"10\" h=\"10\" strokeWidth=\"1\" />\r\n            </Flex>\r\n\r\n            <Box p=\"2\">\r\n                <Box d=\"flex\" alignItems=\"baseline\">\r\n                    <Box\r\n                        color=\"gray.600\"\r\n                        fontWeight=\"semibold\"\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"xs\"\r\n                        textTransform=\"capitalize\"\r\n                        ml=\"2\"\r\n                    >\r\n                        Blank\r\n                        </Box>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Graphs/GraphCard.tsx",["302","303","304","305","306","307","308"],"import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Text, Link, Spacer, Button, Icon, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Menu, MenuButton, IconButton, MenuList, MenuItem, useDisclosure, Portal, Box, LinkOverlay, LinkBox, MenuDivider, Skeleton } from '@chakra-ui/react';\r\nimport { HiOutlineEye, HiOutlineDotsHorizontal } from 'react-icons/hi';\r\nimport { MotionBox } from '../MotionBox'\r\nimport { GraphStatus } from './GraphStatus';\r\nimport { GraphResponse } from '../../providers/responses/graph';\r\nimport { GraphStateEnum } from '../../enums/graphState';\r\nimport GraphService from '../../services/graphService';\r\nimport { Log } from '../../providers/responses/logs';\r\nimport useInterval from '../../hooks/useInterval'\r\nimport Cookies from 'js-cookie'\r\n\r\ninterface GraphCardProps {\r\n    GraphInfo: GraphResponse,\r\n    GraphName?: string,\r\n    GraphIDELink?: string,\r\n    GraphExecCost?: number,\r\n    GraphExecTime?: string,\r\n    GraphCreation?: string,\r\n    Status?: number\r\n}\r\n\r\nfunction timeSinceExecution(date: any): string {\r\n    var now: Date = new Date();\r\n\r\n    var timeStart = date.getTime();\r\n    var timeEnd = now.getTime();\r\n    var hourDiff = timeEnd - timeStart; //in ms\r\n    var secDiff = hourDiff / 1000; //in s\r\n    var minDiff = hourDiff / 60 / 1000; //in minutes\r\n    var hDiff = hourDiff / 3600 / 1000; //in hours\r\n\r\n    const hours = Math.floor(hDiff);\r\n    const minutes = (minDiff - 60 * hours).toFixed(2)\r\n\r\n    return `${hours} hours, ${minutes} minutes.`\r\n}\r\n\r\nexport const GraphCard: React.FC<GraphCardProps> = ({\r\n    GraphInfo = undefined,\r\n    GraphName = \"Default\",\r\n    GraphIDELink = \"https://ide.graphlinq.io/graphId\",\r\n    GraphExecCost = null,\r\n    GraphExecTime = \"—\",\r\n    GraphCreation = \"—\",\r\n    Status = 0,\r\n    ...props\r\n}) => {\r\n\r\n    const [logs, setLogs] = React.useState([])\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [inLogs, setInLogs] = React.useState<boolean>(false);\r\n\r\n    const bottomRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [])\r\n\r\n    const scrollToBottom = () => {\r\n        if (bottomRef && bottomRef.current) {\r\n            bottomRef.current.scrollIntoView({\r\n                behavior: \"smooth\",\r\n                block: \"start\",\r\n            });\r\n        }\r\n    };\r\n\r\n    async function tickLogs() {\r\n        setLogs((await GraphService.graphLogs(GraphInfo?.hashGraph ?? \"\")) as any)\r\n        scrollToBottom()\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval: NodeJS.Timeout | null;\r\n\r\n        if (inLogs) {\r\n            tickLogs()\r\n            interval = setInterval(async () => {\r\n                if (interval) {\r\n                    tickLogs()\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        return () => {\r\n            if (interval) clearInterval(interval);\r\n        };\r\n    }, [inLogs]);\r\n\r\n    function onLogsOpen() {\r\n        onOpen()\r\n        setInLogs(true)\r\n    }\r\n\r\n    function onLogsClose() {\r\n        onClose()\r\n        setInLogs(false)\r\n    }\r\n\r\n    function getColorLog(type: string): string {\r\n        switch (type) {\r\n            case \"info\":\r\n                return \"blue.400\"\r\n            case \"success\":\r\n                return \"emerald.500\"\r\n            case \"warn\":\r\n                return \"amber.500\"\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    async function changeGraphState(state: GraphStateEnum) {\r\n        setIsLoading(true)\r\n        const result: boolean = await GraphService.setGraphState(state, GraphInfo?.hashGraph ?? \"\")\r\n        if (result && GraphInfo !== undefined) {\r\n            GraphInfo.state = state\r\n        }\r\n        setIsLoading(false)\r\n    }\r\n\r\n    async function removeGraph() {\r\n        setIsLoading(true)\r\n        const result: boolean = await GraphService.removeGraph(GraphInfo?.hashGraph ?? \"\")\r\n        setIsLoading(false)\r\n    }\r\n\r\n    async function deployGraph() {\r\n        setIsLoading(true)\r\n        const hash: String | undefined = await GraphService.deployGraph({\r\n            state: GraphStateEnum.Starting,\r\n            bytes: GraphInfo?.lastLoadedBytes ?? \"\",\r\n            alias: GraphInfo?.alias ?? \"Unnamed\",\r\n            hash: GraphInfo?.hashGraph\r\n        })\r\n        if (hash !== undefined && GraphInfo !== undefined) {\r\n            GraphInfo.state = GraphStateEnum.Starting\r\n        }\r\n        setIsLoading(false)\r\n    }\r\n\r\n    async function exportGlqFile()\r\n    {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([(GraphInfo?.lastLoadedBytes as any)], \r\n                    {type: 'text/plain;charset=utf-8'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = `${GraphInfo?.alias}.glq`;\r\n        document.body.appendChild(element);\r\n        element.click();\r\n    }\r\n\r\n    return (\r\n        <MotionBox\r\n            as=\"article\"\r\n            w=\"full\"\r\n            bgColor=\"gray.50\"\r\n            border=\"1px\"\r\n            borderColor=\"gray.300\"\r\n            borderRadius=\"md\"\r\n            py={4} px={8}\r\n            transition={{\r\n                type: 'spring',\r\n                duration: 2,\r\n                bounce: 0.5,\r\n            }}\r\n            whileHover={{ scale: 1.03, backgroundColor: \"white\", boxShadow: 'rgb(238 238 255 / 50%) 0px 2px 14px 8px' }}\r\n            _hover={{ borderColor: \"brand.800\" }}\r\n        >\r\n            <Flex alignItems=\"center\">\r\n                <Box flex=\"1 1 0%\" display=\"flex\" alignItems=\"center\" px={2}>\r\n                    <GraphStatus state={GraphInfo?.state ?? 0} />\r\n                    <Flex flexDirection=\"column\">\r\n                        <Link fontWeight=\"semibold\" textColor=\"brand.800\" href={GraphIDELink} isExternal>\r\n                            {GraphInfo?.alias}\r\n                        </Link>\r\n                        <Text as=\"samp\" fontSize=\"xs\" textColor=\"gray.400\" maxWidth=\"200px\" isTruncated>{GraphInfo?.hashGraph}</Text>\r\n                    </Flex>\r\n                    <Spacer />\r\n                </Box>\r\n\r\n                <Box display=\"flex\" width=\"48px\" minH=\"48px\" justifyContent=\"center\" px={2} />\r\n                {GraphInfo?.hostedApi &&\r\n                <Box display=\"flex\" width=\"200px\" px={2}>\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                    \r\n                        <Link fontSize=\"xs\" fontWeight=\"semibold\" textColor=\"brand.800\" href={`https://api-hosted.graphlinq.io/${GraphInfo?.hashGraph}`} isExternal>\r\n                        api-hosted.graphlinq.io/{GraphInfo?.hashGraph.substr(0, 6)}..\r\n                        </Link>\r\n                          \r\n                        <Spacer />\r\n                    </Skeleton>\r\n                </Box>\r\n                }\r\n                <Box display=\"flex\" width=\"200px\" px={2}>\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                        <Text fontSize=\"sm\" textColor=\"gray.600\">{GraphInfo?.lastExecutionCost || \"—\"} GLQ</Text>\r\n                        <Spacer />\r\n                    </Skeleton>\r\n                </Box>\r\n                <Box display=\"flex\" width=\"160px\" px={2}>\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                        <Text fontSize=\"sm\" textColor=\"gray.600\">{(GraphInfo?.state === GraphStateEnum.Started) ? timeSinceExecution(GraphInfo?.loadedAt) : \"—\"}</Text>\r\n                        <Spacer />\r\n                    </Skeleton>\r\n                </Box>\r\n                <Box display=\"flex\" width=\"160px\" px={2}>\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                        <Text fontSize=\"sm\" textColor=\"gray.600\">{GraphInfo?.createdAt.toLocaleString()}</Text>\r\n                    </Skeleton>\r\n                    <Spacer />\r\n                </Box>\r\n                <Button\r\n                    leftIcon={<Icon as={HiOutlineEye} w={5} h={5} />}\r\n                    onClick={onLogsOpen}\r\n                    mr={3}\r\n                    textColor=\"gray.700\"\r\n                    size=\"md\"\r\n                    variant=\"outline\"\r\n                    px={2}\r\n                >\r\n                    View Logs\r\n                </Button>\r\n\r\n                <Modal onClose={onClose} isOpen={isOpen} scrollBehavior=\"inside\" size=\"full\">\r\n                    <ModalOverlay />\r\n                    <ModalContent mx={8}>\r\n                        <ModalHeader bgColor=\"gray.800\" textColor=\"white\" borderTopRadius=\"md\">Logs</ModalHeader>\r\n                        <ModalCloseButton color=\"white\" />\r\n                        <ModalBody bgColor=\"gray.900\" textColor=\"gray.200\">\r\n                            {logs === undefined && <Text textColor=\"amber.500\">No logs available...</Text>}\r\n                            {logs !== undefined && logs.map((x: Log, i: number) => {\r\n                                return <Text textColor={getColorLog(x.type)} key={`txt-${i}`}>[{x.type}] ({new Date(x.timestamp).toLocaleString()}):<br /> {x.message}</Text>\r\n                            })}\r\n                            <div ref={bottomRef}></div>\r\n                        </ModalBody>\r\n                        <ModalFooter bgColor=\"gray.800\" textColor=\"white\" borderBottomRadius=\"md\">\r\n                            <Button colorScheme=\"blackAlpha\" onClick={onLogsClose}>Close</Button>\r\n                        </ModalFooter>\r\n                    </ModalContent>\r\n                </Modal>\r\n                <Menu>\r\n                    <MenuButton\r\n                        as={IconButton}\r\n                        aria-label=\"Options\"\r\n                        icon={<Icon as={HiOutlineDotsHorizontal} w={5} h={5} />}\r\n                        textColor=\"gray.700\"\r\n                        size=\"md\"\r\n                        variant=\"outline\"\r\n                        isLoading={isLoading}\r\n                        disabled={isLoading}\r\n                    />\r\n                    <Portal>\r\n                        <MenuList>\r\n                            <MenuItem textColor=\"emerald.500\" onClick={() => { deployGraph() }}>Start</MenuItem>\r\n                            <MenuItem onClick={() => { changeGraphState(GraphStateEnum.Restarting) }}>Force restart</MenuItem>\r\n                            <MenuItem onClick={() => { changeGraphState(GraphStateEnum.Stopped) }}>Stop</MenuItem>\r\n                            <MenuItem onClick={() => { removeGraph() }} textColor=\"red.500\">Delete</MenuItem>\r\n                            <MenuDivider />\r\n                            {/* <MenuItem onClick={() => {\r\n                                var host = window.location.hostname.replace('app.', '')\r\n                                Cookies.set('graph', GraphInfo?.lastLoadedBytes ?? \"\", { domain: host });\r\n                                window.open(`https://ide.graphlinq.io/?loadGraph`, \"_blank\")\r\n                            }}>Edit</MenuItem> */}\r\n                            <MenuItem onClick={() => { exportGlqFile() }}textColor=\"amber.500\">Export as .GLQ File</MenuItem>\r\n                        </MenuList>\r\n                    </Portal>\r\n                </Menu>\r\n            </Flex>\r\n        </MotionBox>\r\n    );\r\n}\r\n\r\nexport default GraphCard;","/mnt/f/eth/graphlinq/graphlinq-frontend/src/reportWebVitals.js",[],["309","310"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/Option.tsx",[],["311","312"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ModalWithdraw.tsx",["313","314"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateCard.tsx",["315","316","317"],"import React from 'react'\r\nimport { Box, Image, Badge, useRadio } from '@chakra-ui/react';\r\nimport TemplateLogo from \"../../assets/template_logo.png\"\r\n\r\ninterface TemplateCardProps {\r\n    TemplateImageUrl: string,\r\n    TemplateImageAlt: string,\r\n    TemplateTitle: string,\r\n}\r\n\r\nexport const TemplateCard: React.FC<TemplateCardProps> = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                h=\"90px\"\r\n                maxH=\"90px\"\r\n                bgImage={\"url('\" + TemplateLogo + \"')\"}\r\n                bgPosition=\"center\"\r\n                bgRepeat=\"no-repeat\"\r\n            />\r\n\r\n            <Box p=\"2\">\r\n                <Box d=\"flex\" alignItems=\"baseline\">\r\n                    <Box\r\n                        color=\"gray.600\"\r\n                        fontWeight=\"semibold\"\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"xs\"\r\n                        textTransform=\"capitalize\"\r\n                        ml=\"2\"\r\n                    >\r\n                        {props.TemplateTitle}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n}",["318","319"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/PendingView.tsx",["320","321"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { darken } from 'polished'\r\nimport { SUPPORTED_WALLETS } from '../../constants/index'\r\nimport { injected } from '../../connectors/index'\r\nimport Option from './Option'\r\nimport { Alert, AlertIcon, Button, Spacer } from '@chakra-ui/react'\r\n\r\nexport default function PendingView({\r\n    connector,\r\n    error = false,\r\n    setPendingError,\r\n    tryActivation\r\n}: any) {\r\n    const isMetamask = (window as any)?.ethereum?.isMetaMask\r\n\r\n    return (\r\n        <>\r\n                {error ? (\r\n                    <Alert variant=\"left-accent\" status=\"error\" mb={3} py={2} borderRadius=\"md\">\r\n                        <AlertIcon />\r\n                            Error connecting.\r\n                        <Spacer />\r\n                        <Button\r\n                            variant=\"ghost\"\r\n                            colorScheme=\"red\"\r\n                            onClick={() => {\r\n                                setPendingError(false)\r\n                                connector && tryActivation(connector)\r\n                            }}>\r\n                            Try Again\r\n                            </Button>\r\n                    </Alert>\r\n                ) : (\r\n                <Alert variant=\"left-accent\" status=\"warning\" mb={3} py={2} borderRadius=\"md\">\r\n                    <AlertIcon />\r\n                    Initializing...\r\n                    </Alert>\r\n                    )}\r\n            {\r\n                Object.keys(SUPPORTED_WALLETS).map(key => {\r\n                    const option = (SUPPORTED_WALLETS as any)[key]\r\n                    if (option.connector === connector) {\r\n                        if (option.connector === injected) {\r\n                            if (isMetamask && option.name !== 'MetaMask') {\r\n                                return null\r\n                            }\r\n                            if (!isMetamask && option.name === 'MetaMask') {\r\n                                return null\r\n                            }\r\n                        }\r\n                        return (\r\n                            <Option\r\n                                id={`connect-${key}`}\r\n                                key={key}\r\n                                clickable={false}\r\n                                header={option.name}\r\n                                subheader={option.description}\r\n                                icon={option.iconName} />\r\n                        )\r\n                    }\r\n                    return null\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n",["322","323"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/utils/getLibrary.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/containers/Layout.tsx",["324"],"import React, { Suspense } from 'react'\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport { Flex, Box } from '@chakra-ui/react';\r\nimport { Header } from '../components/Header/Header';\r\nimport { Sidebar } from '../components/Sidebar';\r\nimport { Main } from './Main';\r\n\r\nimport routes from '../routes';\r\nimport Page404 from '../pages/404';\r\nimport { SuspenseSpinner } from '../components/SuspenseSpinner';\r\n\r\ninterface LayoutProps {\r\n\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ }) => {\r\n    return (\r\n        <Flex minH=\"100vh\" h=\"100vh\" bgColor=\"gray.50\">\r\n            <Sidebar />\r\n            <Box as=\"section\" display=\"flex\" flexDirection=\"column\" flex=\"1\" width=\"full\">\r\n                <Header />\r\n                <Main>\r\n                    <Suspense fallback={<SuspenseSpinner />}>\r\n                        <Switch>\r\n                            {routes.map((route, i) => {\r\n                                return route.component ? (\r\n                                    <Route\r\n                                        key={i}\r\n                                        exact={true}\r\n                                        path={`/app${route.path}`}\r\n                                        render={(props) => <route.component {...props} />}\r\n                                    />\r\n                                ) : null\r\n                            })}\r\n                            <Redirect exact from=\"/\" to=\"/app/home\" />\r\n                            <Redirect exact from=\"/app\" to=\"/app/home\" />\r\n                            <Route component={Page404} />\r\n                        </Switch>\r\n                    </Suspense>\r\n                </Main>\r\n            </Box>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default Layout;","/mnt/f/eth/graphlinq/graphlinq-frontend/src/theme/components/tooltip.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/containers/Main.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Sidebar.tsx",["325","326"],"import React from 'react'\r\nimport { Box, VStack, Icon, Link, Button, Text, Image, Divider, Flex } from '@chakra-ui/react';\r\nimport { NavLink, Route } from 'react-router-dom';\r\nimport routes from '../routes/sidebar'\r\nimport * as Icons from 'react-icons/hi'\r\nimport GLQLogo from \"../assets/logo.svg\"\r\nimport { ContractCard } from './ContractBalance/ContractCard';\r\nimport { GraphCreation } from './GraphCreation/GraphCreation';\r\n\r\ninterface SidebarProps {\r\n\r\n}\r\n\r\nconst IconSidebar = ({ icon, ...props }: any) => {\r\n    const iconName = (Icons as any)[icon]\r\n    return <Icon as={iconName} {...props} />\r\n}\r\n\r\nexport const Sidebar: React.FC<SidebarProps> = ({ }) => {\r\n    return (\r\n        <Box as=\"aside\" w={64} maxW={64} display=\"block\" bgColor=\"white\" flexShrink={0} overflowY=\"auto\" py={4}>\r\n            <Box py={2} px={8}>\r\n                <Image src={GLQLogo} />\r\n            </Box>\r\n            <Divider orientation=\"horizontal\" />\r\n            <Flex direction=\"column\" mt={8}>\r\n                <GraphCreation colorScheme=\"brand\" size=\"lg\" mx={2}>\r\n                    Make a Graph\r\n                </GraphCreation>\r\n                <ContractCard />\r\n            </Flex>\r\n            <VStack as=\"nav\" spacing={0} align=\"stretch\" mt={2} textColor=\"gray.500\">\r\n                {routes.map((route: any) => (\r\n                    <Link\r\n                        as={NavLink}\r\n                        exact\r\n                        to={route.path}\r\n                        px={6} py={4}\r\n                        position=\"relative\"\r\n                        bgColor=\"white\"\r\n                        textDecoration=\"none\"\r\n                        display=\"inline-flex\"\r\n                        alignItems=\"center\"\r\n                        w=\"full\"\r\n                        fontWeight=\"semibold\"\r\n                        fontSize=\"sm\"\r\n                        _activeLink={{ backgroundColor: 'indigo.50', textColor: 'brand.800' }}\r\n                        _hover={{ textColor: 'brand.800' }}\r\n                    >\r\n                        <Route path={route.path} exact={route.exact}>\r\n                            <Box as=\"span\" pos=\"absolute\" bgColor=\"brand.500\" w={1} top=\"0\" bottom=\"0\" left=\"0\" borderTopRightRadius=\"lg\" borderBottomRightRadius=\"lg\" />\r\n                        </Route>\r\n                        <IconSidebar icon={route.icon} w={5} h={5} />\r\n                        <Text as=\"span\" ml={4}>{route.name}</Text>\r\n                    </Link>\r\n                ))}\r\n            </VStack>\r\n        </Box >\r\n    );\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/index.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/constants/actions.ts",["327"],"import { AnyAction } from \"redux\";\r\n\r\nexport const RESET_REDUX_STATE = \"RESET_REDUX_STATE\"\r\nexport const DIAGRAM_UPDATE = \"DIAGRAM_UPDATE\"","/mnt/f/eth/graphlinq/graphlinq-frontend/src/assets/icons/index.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/enums/graphState.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/BrowserWallet/WalletManager.tsx",["328","329","330","331","332","333","334"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  OPEN_MODAL,\r\n  CLOSE_MODAL,\r\n  ACCOUNT_UPDATE,\r\n} from \"../../redux/actions/index\";\r\n\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { bsc, fortmatic, injected, portis } from \"../../connectors/index\";\r\nimport { OVERLAY_READY } from \"../../connectors/fortmatic\";\r\n\r\nimport { SUPPORTED_WALLETS } from \"../../constants/index\";\r\nimport usePrevious from \"../../hooks/usePrevious\";\r\n\r\nimport Option from \"./Option\";\r\nimport PendingView from \"./PendingView\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport WalletService from \"../../services/walletService\";\r\nimport Web3 from \"web3\"\r\nimport { Alert, AlertDescription, AlertIcon, AlertTitle, Box, Text, Link } from \"@chakra-ui/react\";\r\n\r\nconst WALLET_VIEWS = {\r\n  OPTIONS: \"options\",\r\n  OPTIONS_SECONDARY: \"options_secondary\",\r\n  ACCOUNT: \"account\",\r\n  PENDING: \"pending\",\r\n};\r\n\r\nconst WalletManager = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const { active, account, connector, activate, error, library } = useWeb3React();\r\n\r\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\r\n\r\n  const [pendingWallet, setPendingWallet] = useState();\r\n\r\n  const [pendingError, setPendingError] = useState(false);\r\n\r\n  const previousAccount = usePrevious(account);\r\n\r\n  const walletModalOpen = useSelector(\r\n    (state: any) => state.modals.walletManager.show\r\n  );\r\n\r\n  const binanceWalletSign = async (web3: any) => {\r\n    return new Promise<string>((res, rej) => {\r\n      web3\r\n      .request({\r\n        method: 'eth_sign',\r\n        params: [account, process.env.REACT_APP_SIGN_KEY as string],\r\n      })\r\n      .then((result: any) => {\r\n       res(result)\r\n      })\r\n      .catch((error: any) => {\r\n        rej(error)\r\n    });\r\n    })\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!account) { return }\r\n    if (WalletService.verifySessionIntegrity(account)) {\r\n      return history.push(\"/\");\r\n    }\r\n      (async () => {\r\n        console.log(activate)\r\n        let web3: any = undefined\r\n        let signature: string = \"\"\r\n        const firstChain = (connector as any).supportedChainIds[0]\r\n        // if ((window as any).BinanceChain !== undefined && firstChain !== 100) {\r\n        //   web3 = (window as any).BinanceChain\r\n        //   try {\r\n        //     signature = await binanceWalletSign(web3)\r\n        //   } catch (e) { console.error(e)}\r\n        // }\r\n        // else \r\n        if ((window as any).ethereum !== undefined) {\r\n          web3 = new Web3((window as any).ethereum)\r\n          try {\r\n            signature = await web3.eth.personal.sign(process.env.REACT_APP_SIGN_KEY as string, account, \"\")\r\n          } catch (e) { console.error(e) }\r\n        }\r\n        const result = await WalletService.authWallet(account, signature)\r\n\r\n        if (result) {\r\n          dispatch({\r\n            name: \"walletManager\",\r\n            type: ACCOUNT_UPDATE,\r\n            payload: {\r\n              account,\r\n            },\r\n          });\r\n          return history.push(\"/\");\r\n        }\r\n    })()\r\n  }, [account])\r\n\r\n  const toggleWalletModal = () => {\r\n    if (walletModalOpen) dispatch({ type: CLOSE_MODAL, name: \"walletManager\" });\r\n    else dispatch({ type: OPEN_MODAL, name: \"walletManager\" });\r\n  };\r\n\r\n  // close on connection, when logged out before\r\n  useEffect(() => {\r\n    if (account && !previousAccount && walletModalOpen) {\r\n      toggleWalletModal();\r\n    }\r\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen]);\r\n\r\n  // always reset to account view\r\n  useEffect(() => {\r\n    if (walletModalOpen) {\r\n      setPendingError(false);\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [walletModalOpen]);\r\n\r\n  // close modal when a connection is successful\r\n  const activePrevious = usePrevious(active);\r\n  const connectorPrevious = usePrevious(connector);\r\n  useEffect(() => {\r\n    if (\r\n      walletModalOpen &&\r\n      ((active && !activePrevious) ||\r\n        (connector && connector !== connectorPrevious && !error))\r\n    ) {\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [\r\n    setWalletView,\r\n    active,\r\n    error,\r\n    connector,\r\n    walletModalOpen,\r\n    activePrevious,\r\n    connectorPrevious,\r\n  ]);\r\n\r\n  const tryActivation = async (connector: any) => {\r\n    Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      if (connector === (SUPPORTED_WALLETS as any)[key].connector) {\r\n        return (SUPPORTED_WALLETS as any)[key].name;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    setPendingWallet(connector); // set wallet for pending view\r\n    setWalletView(WALLET_VIEWS.PENDING);\r\n\r\n    // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\r\n    if (\r\n      connector instanceof WalletConnectConnector &&\r\n      connector.walletConnectProvider?.wc?.uri\r\n    ) {\r\n      connector.walletConnectProvider = undefined;\r\n    }\r\n\r\n    connector &&\r\n      activate(connector, undefined, true).catch((error) => {\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          activate(connector); // a little janky...can't use setError because the connector isn't set\r\n        } else {\r\n          setPendingError(true);\r\n        }\r\n      });\r\n  };\r\n\r\n  // close wallet modal if fortmatic modal is active\r\n  useEffect(() => {\r\n    fortmatic.on(OVERLAY_READY, () => {\r\n      toggleWalletModal();\r\n    });\r\n  }, [toggleWalletModal]);\r\n\r\n  // get wallets user can switch too, depending on device/browser\r\n  function getOptions() {\r\n    const isMetamask =\r\n      (window as any).ethereum && (window as any).ethereum.isMetaMask;\r\n    return Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      const option = (SUPPORTED_WALLETS as any)[key];\r\n      // check for mobile options\r\n      if (isMobile) {\r\n        // disable portis on mobile for now\r\n        if (option.connector === portis) {\r\n          return null;\r\n        }\r\n\r\n        if (\r\n          !(window as any).web3 &&\r\n          !(window as any).ethereum &&\r\n          option.mobile\r\n        ) {\r\n          return (\r\n            <Option\r\n              onClick={() => {\r\n                option.connector !== connector &&\r\n                  !option.href &&\r\n                  tryActivation(option.connector);\r\n              }}\r\n              id={`connect-${key}`}\r\n              key={key}\r\n              active={option.connector && option.connector === connector}\r\n              link={option.href}\r\n              header={option.name}\r\n              icon={option.iconName}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n\r\n      // overwrite injected when needed\r\n      if (option.connector === injected || option.connector === bsc) {\r\n        // don't show injected if there's no injected provider\r\n        if (!((window as any).web3 || (window as any).ethereum)) {\r\n          if (option.name === \"MetaMask\") {\r\n            return (\r\n              <Option\r\n                id={`connect-${key}`}\r\n                key={key}\r\n                header=\"Install Metamask\"\r\n                subheader={undefined}\r\n                link=\"https://metamask.io/\"\r\n                icon={\"MetaMaskIcon\"}\r\n              />\r\n            );\r\n          }\r\n          else if (option.name === \"Binance Chain Wallet\") {\r\n            return (\r\n              <Option\r\n                id={`connect-${key}`}\r\n                key={key}\r\n                header=\"Install Binance Chain Wallet\"\r\n                subheader={undefined}\r\n                link=\"https://chrome.google.com/webstore/detail/binance-chain-wallet/fhbohimaelbohpjbbldcngcnapndodjp\"\r\n                icon={\"BinanceIcon\"}\r\n              />\r\n            );\r\n          }\r\n          return null; // dont want to return install twice\r\n        }\r\n        // don't return metamask if injected provider isn't metamask\r\n        if (option.name === \"MetaMask\" && !isMetamask) {\r\n          return null;\r\n        }\r\n        // likewise for generic\r\n        if (option.name === \"Injected\" && isMetamask) {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // return rest of options\r\n      return (\r\n        !isMobile &&\r\n        !option.mobileOnly && (\r\n          <Option\r\n            id={`connect-${key}`}\r\n            onClick={() => {\r\n              option.connector === connector\r\n                ? setWalletView(WALLET_VIEWS.ACCOUNT)\r\n                : !option.href && tryActivation(option.connector);\r\n            }}\r\n            key={key}\r\n            active={option.connector === connector}\r\n            link={option.href}\r\n            header={option.name}\r\n            subheader={undefined} // use option.descriptio to bring back multi-line\r\n            icon={option.iconName}\r\n          />\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  function getContent() {\r\n    if (error) {\r\n      console.log(error);\r\n      return (\r\n        <Alert\r\n          status=\"error\"\r\n          variant=\"subtle\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          textAlign=\"center\"\r\n          height=\"200px\"\r\n        >\r\n          <AlertIcon boxSize=\"40px\" mr={0} />\r\n          <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n            {error instanceof UnsupportedChainIdError\r\n              ? \"Wrong Network\"\r\n              : \"Error connecting\"}\r\n          </AlertTitle>\r\n          <AlertDescription maxWidth=\"sm\">\r\n            {error instanceof UnsupportedChainIdError ? (\r\n              <Box>\r\n                <Text>Please connect to the appropriate Ethereum network (Ropsten Or Mainnet).</Text>\r\n                <Link href=\"https://docs.graphlinq.io/wallet/1-index\" textDecoration=\"underline\" isExternal>Check out the documentation about wallet</Link>\r\n              </Box>\r\n            ) : (\r\n                \"Error connecting. Try refreshing the page.\"\r\n              )}\r\n          </AlertDescription>\r\n        </Alert>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {walletView === WALLET_VIEWS.PENDING ? (\r\n          <PendingView\r\n            connector={pendingWallet}\r\n            error={pendingError}\r\n            setPendingError={setPendingError}\r\n            tryActivation={tryActivation}\r\n          />\r\n        ) : (\r\n            <>{getOptions()}</>\r\n          )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <>{getContent()}</>;\r\n};\r\n\r\nexport default WalletManager;\r\n",["335","336"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/types.tsx",["337","338","339"],"import { Route, Redirect } from \"react-router-dom\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport WalletService from \"../services/walletService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AuthComponent from \"../pages/Auth\"\r\n\r\nexport const CustomRoute = ({ component, ...rest }: any) => {\r\n  const { account } = useWeb3React();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!account) { return }\r\n    if (!WalletService.verifySessionIntegrity(account)) {\r\n      return history.push(\"/\");\r\n    }\r\n  }, [account])\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        account === undefined || localStorage.getItem(\"session\") == null ? (\r\n          React.createElement(AuthComponent, props)\r\n        ) : (\r\n          React.createElement(component, props)\r\n        )\r\n      }\r\n    />\r\n  );\r\n};","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/diagrams.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useContract.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/usePrevious.tsx",[],["340","341"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/App.tsx",["342","343"],"import React, { lazy } from \"react\";\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { CustomRoute } from \"./routes/types\";\r\n\r\nimport { useActiveWeb3React } from \"./hooks/\";\r\nimport Web3ReactManager from \"./web3/web3Manager\";\r\nimport Auth from \"./pages/Auth\"\r\nimport Layout from \"./containers/Layout\"\r\n\r\nconst AppWrapper = () => {\r\n\r\n  useActiveWeb3React();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n        <Web3ReactManager>\r\n          <Switch>\r\n            <CustomRoute path=\"/\" component={Layout} />\r\n          </Switch>\r\n        </Web3ReactManager>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppWrapper;\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/index.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/sagas/modals.tsx",[],["344","345"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Auth.tsx",["346","347","348","349"],"import React from 'react'\r\nimport { Heading, Text, Box, Button, SimpleGrid, Tabs, TabList, Tab, TabPanels, TabPanel, Spacer, Image, Center, Icon } from '@chakra-ui/react';\r\nimport GLQLogo from \"../assets/logo.svg\"\r\nimport WalletManager from \"../components/BrowserWallet/WalletManager\"\r\n\r\ninterface AuthProps {\r\n\r\n}\r\n\r\nconst Auth: React.FC<AuthProps> = ({ }) => {\r\n    return (\r\n        <Box bg='gray.50' minH=\"100vh\" py=\"12\" px={{ sm: '6', lg: '8' }}>\r\n            <Box maxW={{ sm: 'md' }} mx={{ sm: 'auto' }} w={{ sm: 'full' }}>\r\n                <Box mb={{ base: '10', md: '10' }}>\r\n                    <Center>\r\n                        <Image w=\"200px\" src={GLQLogo} />\r\n                    </Center>\r\n                </Box>\r\n            </Box>\r\n            <Box maxW={{ sm: 'md' }} mx={{ sm: 'auto' }} mt=\"8\" w={{ sm: 'full' }}>\r\n                <Box\r\n                    bg='white'\r\n                    py=\"8\"\r\n                    shadow=\"base\"\r\n                    rounded={{ sm: 'lg' }}\r\n                >\r\n                    <Heading textAlign=\"center\" size=\"lg\" fontWeight=\"bold\">\r\n                        Dashboard Access\r\n                    </Heading>\r\n                    <Text mt=\"4\" align=\"center\" maxW=\"md\" fontWeight=\"medium\">\r\n                        Connect your wallet to access your dashboard.\r\n                    </Text>\r\n                    <Tabs mt=\"6\" isLazy w=\"full\" colorScheme=\"brand\">\r\n                        <TabList>\r\n                            <Tab>Browser Extension</Tab>\r\n                            <Tab isDisabled>Wallet Direct</Tab>\r\n                            <Tab isDisabled>Ledger USB</Tab>\r\n                        </TabList>\r\n                        <TabPanels>\r\n                            <TabPanel>\r\n                                <SimpleGrid mt=\"6\" columns={1} spacing=\"3\" px=\"6\">\r\n                                    <WalletManager />\r\n                                </SimpleGrid>\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                                <p>Wallet Direct component</p>\r\n                            </TabPanel>\r\n                            <TabPanel>\r\n                                <p>Ledger USB component</p>\r\n                            </TabPanel>\r\n                        </TabPanels>\r\n                    </Tabs>\r\n                </Box>\r\n                <Text mt=\"4\" align=\"center\" maxW=\"md\" fontWeight=\"medium\">\r\n                    <span>New to GraphLinq Wallet ?</span>\r\n                    <Box\r\n                        target=\"_blank\"\r\n                        as=\"a\"\r\n                        marginStart=\"1\"\r\n                        href=\"https://docs.graphlinq.io/wallet\"\r\n                        color='brand.500'\r\n                        _hover={{ color: 'purple.600' }}\r\n                        display={{ base: 'block', sm: 'revert' }}\r\n                    >Learn more</Box>\r\n                </Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Auth;","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/404.tsx",["350"],"import { Grid, Heading } from '@chakra-ui/react';\r\nimport React from 'react'\r\n\r\ninterface Page404Props {\r\n\r\n}\r\n\r\nconst Page404: React.FC<Page404Props> = ({}) => {\r\n        return (\r\n            <Grid px={24}>\r\n                <Heading as=\"h1\" size=\"lg\" fontWeight=\"semibold\" textColor=\"gray.700\" my={12}>\r\n                    Error 404\r\n                </Heading>\r\n            </Grid>\r\n        );\r\n}\r\n\r\nexport default Page404;","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/modals.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Header/identicon.tsx",["351"],"import React, { useEffect, useRef } from 'react';\r\nimport { Avatar, forwardRef, AvatarProps } from '@chakra-ui/react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Jazzicon from 'jazzicon';\r\nimport { useActiveWeb3React } from '../../hooks';\r\n\r\nconst StyledIdenticonContainer = styled.div`\r\n  margin:auto;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border-radius: 1.125rem;\r\n  background-color: #CED0D9;\r\n`\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef()\r\n\r\n  const { account } = useActiveWeb3React()\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      (ref as any).current.innerHTML = ''\r\n      const jazzicon = (ref as any).current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)))\r\n      jazzicon.style.display = 'block';\r\n    }\r\n  }, [account])\r\n\r\n  return (\r\n    <JazzAvatar ref={ref as any} />\r\n  )\r\n}\r\n\r\nconst JazzAvatar = forwardRef<AvatarProps, \"div\">((props, ref) => (\r\n  <Avatar\r\n    bgColor=\"white\"\r\n    size=\"xs\"\r\n    ml={-2}\r\n    mr={2}\r\n    ref={ref}\r\n    {...props}\r\n  />\r\n))\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/mock/mocks.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/providers/manager.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/index.tsx",["352"],"import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core';\r\n\r\nimport { NetworkContextName } from './constants/index';\r\nimport getLibrary from './utils/getLibrary';\r\n\r\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\"\r\nimport theme from \"./theme\"\r\n\r\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName);\r\n\r\nif ('ethereum' in window) {\r\n  (window as any).ethereum.autoRefreshOnNetworkChange = false;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n      <Web3ReactProvider getLibrary={getLibrary}>\r\n        <Web3ProviderNetwork getLibrary={getLibrary}>\r\n          <ChakraProvider theme={theme}>\r\n            <App />\r\n          </ChakraProvider>\r\n        </Web3ProviderNetwork>\r\n      </Web3ReactProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/RadioCard.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/routes/sidebar.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ModalDeposit.tsx",["353","354","355"],"import React, { useState } from 'react'\r\nimport { Button, Icon, Text, Alert, AlertDescription, AlertIcon, AlertTitle, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Stack, useDisclosure } from '@chakra-ui/react';\r\nimport { FiArrowUpRight } from 'react-icons/fi';\r\nimport { useBalanceContract, useTokenContract } from '../../hooks/useContract';\r\nimport { getDecimalsAmount } from '../../utils';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { utils } from 'ethers';\r\nimport { useBalance } from '../../hooks/useBalance';\r\nimport { useWalletContract } from '../../hooks/useWalletContract';\r\n\r\ninterface ModalDepositProps {\r\n\r\n}\r\n\r\nexport const ModalDeposit: React.FC<ModalDepositProps> = ({ }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const finalRef = React.useRef()\r\n    const contract = useBalanceContract(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\r\n    const tokenContract = useTokenContract(process.env.REACT_APP_GRAPHLINQ_TOKEN_CONTRACT)\r\n\r\n\r\n    const {balance, refreshBalance} =  useBalance();\r\n    const {refreshBalanceContract} =  useWalletContract();\r\n    \r\n    const { account } = useActiveWeb3React()\r\n    const [amountDeposit, setAmountDeposit] = useState(\"0.0\");\r\n    const [error, setError] = useState(\"\");\r\n    const [pending, setPending] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n\r\n\r\n    const format = (val: string) => val + ` GLQ`;\r\n    const parse = (val: string) => val.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1');\r\n\r\n    async function doDeposit()\r\n    {\r\n        if (contract == null || tokenContract == null) { return }\r\n        refreshBalance()\r\n\r\n        const asNumber: number = parseFloat(amountDeposit)\r\n        if (asNumber <= 0) {\r\n            setError(`Invalid amount to deposit on the balance contract: ${asNumber} GLQ`)\r\n            return \r\n        }\r\n        \r\n        const decimalAmount: any = utils.parseEther(amountDeposit)\r\n        try {\r\n            const allowance = await tokenContract.allowance(account, process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\r\n            const wei = utils.parseEther('10000000')\r\n            if (parseFloat(allowance) < parseFloat(decimalAmount)) {\r\n                console.log(`${allowance} vs ${decimalAmount}`)\r\n                setPending(\"Allowance pending, please allow the use of your token balance for the contract...\")\r\n                const approveTx = await tokenContract.approve(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT, wei.toString());\r\n                setPending(\"Waiting for confirmations...\")\r\n                await approveTx.wait()\r\n                setPending(\"Allowance successfully increased, waiting for deposit transaction...\")\r\n            }\r\n            const currentBalanceDecimal: any = utils.parseEther(balance.amount.toString())\r\n            if (parseFloat(decimalAmount) > parseFloat(currentBalanceDecimal)) {\r\n                setPending(\"\"); setError(`You only have ${balance.amount} GLQ in your wallet.`);\r\n                return;\r\n            }\r\n\r\n            setPending(\"Pending, check your wallet extension to execute the chain transaction...\")\r\n            const result = await contract.addBalance(decimalAmount.toString())\r\n            setPending(\"Waiting for confirmations...\")\r\n            await result.wait()\r\n            setSuccess(result.hash)\r\n\r\n            refreshBalanceContract()\r\n        }\r\n        catch (e)\r\n        {\r\n            console.error(e)\r\n            if (e.data?.message) { setPending(\"\"); setError(`Error: ${e.data?.message}`);return; }\r\n            if (e.message) { setPending(\"\"); setError(`Error: ${e.message}`); }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button ref={finalRef as any} onClick={onOpen} rightIcon={<Icon as={FiArrowUpRight} />}>Deposit</Button>\r\n            <Modal finalFocusRef={finalRef as any} isOpen={isOpen} onClose={onClose} key=\"test\" isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader bgColor=\"brand.50\" borderTopRadius=\"md\">Deposit</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody bgColor=\"brand.100\" borderBottomRadius=\"md\">\r\n                        <Stack spacing={3} p=\"4\">\r\n                            {error &&\r\n                            <Alert status=\"error\">\r\n                                <AlertIcon />{error}\r\n                            </Alert>\r\n                            }\r\n                            {!success && pending &&\r\n                            <Alert status=\"info\">\r\n                                <AlertIcon />{pending}\r\n                            </Alert>\r\n                            }\r\n                            {success &&\r\n                             <Alert\r\n                                status=\"success\"\r\n                                variant=\"subtle\"\r\n                                flexDirection=\"column\"\r\n                                alignItems=\"center\"\r\n                                justifyContent=\"center\"\r\n                                textAlign=\"center\"\r\n                                height=\"200px\"\r\n                            >\r\n                                <AlertIcon boxSize=\"40px\" mr={0} />\r\n                                <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                                    Deposit successfully completed !\r\n                                </AlertTitle>\r\n                                <AlertDescription maxWidth=\"sm\">\r\n                                    Transaction hash :\r\n                            <Text fontSize=\"xs\" isTruncated px=\"2\">\r\n                                        <a style={{color: 'blue'}} href={`https://etherscan.com/tx/${success}`} target=\"_blank\">{success}</a>\r\n                            </Text>\r\n                                </AlertDescription>\r\n                            </Alert>\r\n                            }\r\n                            <NumberInput\r\n                                placeholder=\"GLQ Amount\"\r\n                                onChange={(value) => { setAmountDeposit(parse(value)) }}\r\n                                value={format(amountDeposit)}\r\n                                size=\"lg\"\r\n                                defaultValue={0}\r\n                                min={0}\r\n                                borderColor=\"brand.300\"\r\n                                focusBorderColor=\"brand.500\"\r\n                                step={0.1}>\r\n\r\n                                <NumberInputField />\r\n                                <NumberInputStepper>\r\n                                    <NumberIncrementStepper color=\"brand.500\" />\r\n                                    <NumberDecrementStepper color=\"brand.500\" />\r\n                                </NumberInputStepper>\r\n                            </NumberInput>\r\n                            <Button onClick={doDeposit} colorScheme=\"brand\" size=\"lg\"> Deposit</Button>\r\n                        </Stack>\r\n                    </ModalBody>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/web3/web3Manager.tsx",["356"],"import { useEffect } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport { network } from \"../connectors\";\r\nimport { useEagerConnect, useInactiveListener } from \"../hooks\";\r\n// import { useHornBalance } from 'src/hooks/useHornBalance'\r\nimport { useBalance } from \"../hooks/useBalance\";\r\n\r\nimport { NetworkContextName } from \"../constants\";\r\n\r\nexport default function Web3ReactManager({ children }: any) {\r\n  const { active, chainId, account } = useWeb3React();\r\n  const {\r\n    active: networkActive,\r\n    error: networkError,\r\n    activate: activateNetwork,\r\n  } = useWeb3React(NetworkContextName);\r\n  const { refreshBalance }: any = useBalance();\r\n\r\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect();\r\n\r\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\r\n  useEffect(() => {\r\n    if (triedEager && !networkActive && !networkError && !active) {\r\n      activateNetwork(network);\r\n    }\r\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\r\n\r\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\r\n  useInactiveListener(!triedEager);\r\n\r\n  useEffect(() => {\r\n    // setting account and refreshing glq balance\r\n    refreshBalance();\r\n  }, [chainId, account]);\r\n\r\n  return children;\r\n}\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useBalance.tsx",["357"],"import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { utils } from 'ethers';\r\nimport { UPDATE_BALANCE } from '../redux/actions/index';\r\nimport { useActiveWeb3React } from '.';\r\nimport { useTokenContract } from './useContract';\r\n\r\nexport function useBalance() {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const balance = useSelector(state => (state as any).modals.balance);\r\n\r\n  const tokenContract = useTokenContract(process.env.REACT_APP_GRAPHLINQ_TOKEN_CONTRACT);\r\n\r\n  const refreshBalance = useCallback(async () => {\r\n      if (!account || !tokenContract) {\r\n        return;\r\n      }\r\n      try {\r\n      const balanceOf = await tokenContract.balanceOf(account);\r\n      if (!balanceOf) return;\r\n  \r\n      const balance = parseFloat(utils.formatUnits(balanceOf, 18));\r\n      dispatch({ type: UPDATE_BALANCE, payload: {balance}, name: 'balance'});\r\n      } catch (e) { console.error(e) }\r\n\r\n  }, [account, tokenContract]);\r\n\r\n return { balance, refreshBalance }\r\n}\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/connectors/networkConnector.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/utils/index.tsx",[],["358","359"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/ContractBalance/ContractCard.tsx",["360","361","362","363","364","365","366"],"import { Box, Button, ButtonGroup, Icon, Text } from '@chakra-ui/react';\r\nimport { FiArrowDownLeft } from 'react-icons/fi';\r\nimport { ModalDeposit } from './ModalDeposit';\r\nimport { ModalWithdraw } from './ModalWithdraw';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { useWalletContract } from \"../../hooks/useWalletContract\"\r\n\r\ninterface ContractCardProps {\r\n\r\n}\r\n\r\nexport const ContractCard: React.FC<ContractCardProps> = ({ }) => {\r\n\r\n    const { account } = useWeb3React();\r\n    const {balance, refreshBalanceContract} =  useWalletContract();\r\n\r\n    useEffect(()  => {\r\n        refreshBalanceContract();\r\n    }, [account])\r\n\r\n    return (\r\n        <Box mx={2} my={2} borderWidth=\"0px\" borderRadius=\"lg\" bgColor=\"brand.400\" color=\"white\">\r\n            <Box py=\"2\" px=\"4\">\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontSize=\"md\"\r\n                    fontWeight=\"medium\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                    color=\"gray.50\"\r\n                >\r\n                    Cloud Contract Balance\r\n                </Box>\r\n                <Text fontSize=\"2xl\" fontWeight=\"bold\" lineHeight=\"10\" whiteSpace=\"pre-wrap\">\r\n                    {balance.amount}\r\n                    <Box as=\"span\" color=\"gray.100\" fontWeight=\"semibold\" fontSize=\"sm\">\r\n                        {\" GLQ\"}\r\n                    </Box>\r\n                </Text>\r\n                <ButtonGroup size=\"sm\" colorScheme=\"whiteAlpha\">\r\n                    <ModalDeposit />\r\n                    <ModalWithdraw />\r\n                </ButtonGroup>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/services/graphService.tsx",["367","368","369","370"],"import { GraphStateEnum } from \"../enums/graphState\";\r\nimport { ErrorResponse } from \"../providers/error\";\r\nimport ManagerProvider from \"../providers/manager\"\r\nimport { DeployGraphRequest } from \"../providers/requests/deploy\";\r\nimport AuthResponse from \"../providers/responses/auth\"\r\nimport { DeployGraphResponse } from \"../providers/responses/deploy\";\r\nimport { GraphResponse } from \"../providers/responses/graph\";\r\nimport { GraphLogs, Log } from \"../providers/responses/logs\";\r\nimport { GraphStateResponse } from \"../providers/responses/state\";\r\nimport { GraphStateRequest } from \"../providers/requests/state\"\r\nimport { ResponseSuccess } from \"../providers/responses/success\";\r\nimport { CompressGraphResponse } from \"../providers/responses/compress\";\r\nimport { DecompressGraphResponse } from \"../providers/responses/decompress\";\r\nimport { GraphTemplate, TemplateGraphResponse } from \"../providers/responses/templateGraph\";\r\n\r\nexport default class GraphService {\r\n    public static async deployGraph(request: DeployGraphRequest): Promise<String | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: DeployGraphResponse = await ManagerProvider.deployGraph(request, session.token)\r\n            return new String(result.hash)\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async listGraphs(): Promise<GraphResponse[] | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: GraphResponse[] = await ManagerProvider.listGraphs(session.token)\r\n            \r\n            result.forEach(x => { x.loadedAt = new Date(x.loadedAt); x.createdAt = new Date(x.createdAt) })\r\n            return result\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async graphState(hash: string): Promise<GraphStateResponse | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: GraphStateResponse = await ManagerProvider.fetchGraphState({ hash }, session.token)\r\n            return result\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async graphLogs(hash: string): Promise<Log[] | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: GraphLogs = await ManagerProvider.fetchGraphLogs({ hash }, session.token)\r\n            return result.logs\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async setGraphState(state: GraphStateEnum, hash: string): Promise<boolean>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: ResponseSuccess = await ManagerProvider.updateGraphState({ state, hash }, session.token)\r\n            return result.success\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static async compressGraph(toCompress: any): Promise<string | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: CompressGraphResponse = await ManagerProvider.compressGraphData({ data: toCompress }, session.token)\r\n            return result.compressed\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async decompressGraph(toDecompress: any): Promise<string | undefined>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: DecompressGraphResponse = await ManagerProvider.decompressGraphData({ data: toDecompress }, session.token)\r\n            return result.decompressed\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public static async removeGraph(hash: string): Promise<boolean>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: ResponseSuccess = await ManagerProvider.stopAndDeleteGraph({ state: GraphStateEnum.Stopped, hash }, session.token)\r\n            return result.success\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return false;\r\n        }\r\n    }\r\n    public static async listGraphsTemplates(): Promise<GraphTemplate[]>\r\n    {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: TemplateGraphResponse = await ManagerProvider.getGraphsTemplates(session.token)\r\n            if (result.success) {\r\n                return result.templates\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error)    \r\n        }\r\n        return []\r\n    }\r\n}",["371","372"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/hooks/useWalletContract.tsx",["373"],"import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { utils } from 'ethers';\r\nimport { UPDATE_BALANCE_CONTRACT } from '../redux/actions/index';\r\nimport { useActiveWeb3React } from '.';\r\nimport { useBalanceContract } from './useContract';\r\n\r\nexport function useWalletContract() {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const balance = useSelector(state => (state as any).modals.balanceContract);\r\n\r\n  const contract = useBalanceContract(process.env.REACT_APP_GRAPHLINQ_BALANCE_CONTRACT);\r\n\r\n  const refreshBalanceContract = useCallback(async () => {\r\n      if (!account || !contract) {\r\n        return;\r\n      }\r\n      try {\r\n      const balanceOf = await contract.getBalance(account);\r\n      if (!balanceOf) return;\r\n  \r\n      const balance = parseFloat(utils.formatUnits(balanceOf, 18));\r\n      dispatch({ type: UPDATE_BALANCE_CONTRACT, payload: {balanceContract: balance}, name: 'balanceContract'});\r\n      } catch (e) { console.error(e) }\r\n\r\n  }, [account, contract]);\r\n\r\n return { balance, refreshBalanceContract }\r\n}\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/theme/colors.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Home.tsx",["374"],"import React from 'react'\r\nimport { Alert, AlertIcon, Grid, Heading } from '@chakra-ui/react';\r\n\r\ninterface HomeProps {\r\n\r\n}\r\n\r\nconst Home: React.FC<HomeProps> = ({}) => {\r\n        return (\r\n            <Grid px={24}>\r\n                <Heading as=\"h1\" size=\"lg\" fontWeight=\"semibold\" textColor=\"gray.700\" my={12}>\r\n                    Home page\r\n                </Heading>\r\n\r\n                <Alert status=\"info\">\r\n                    <AlertIcon /> Welcome on the Beta release of the GraphLinq Protocol interface!\r\n                </Alert>\r\n            </Grid>\r\n        );\r\n}\r\n\r\nexport default Home;","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/GraphCreation.tsx",["375","376","377","378","379","380","381","382","383","384","385","386","387"],"import React, { useState, useEffect } from 'react'\r\nimport { Box, Button, Editable, EditableInput, Alert, AlertTitle, Text, AlertDescription, AlertIcon, EditablePreview, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, propNames, SimpleGrid, Stack, Tab, TabList, TabPanel, TabPanels, Tabs, useDisclosure, useRadioGroup, Icon, Flex } from '@chakra-ui/react';\r\nimport { TemplateCard } from './TemplateCard';\r\nimport { BlankCard } from './BlankCard';\r\nimport { TemplateVariables } from './TemplateVariables';\r\nimport { RadioCard } from './RadioCard';\r\nimport { TemplateFile } from './TemplateFile';\r\nimport GraphService from '../../services/graphService';\r\nimport { GraphStateEnum } from '../../enums/graphState';\r\nimport { FiEdit } from 'react-icons/fi';\r\nimport Cookies from 'js-cookie'\r\nimport { GraphTemplate } from '../../providers/responses/templateGraph';\r\n\r\ninterface GraphCreationProps {\r\n\r\n}\r\n\r\nexport const GraphCreation = (props: any) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [fileUpload, setFileUpload] = useState({ loaded: false, file: {} })\r\n    const [graphName, setGraphName] = useState(\"Unnamed Graph\")\r\n    const [template, selectedTemplate] = useState({ loaded: false, template: {bytes: \"\", idgraphsTemplates: 0} })\r\n\r\n    const inputFileRef = React.createRef()\r\n    const [templates, setTemplates] = useState<GraphTemplate[]>([])\r\n    // const templates = [\r\n    //     {\r\n    //         imageUrl: \"https://via.placeholder.com/200x100.png\",\r\n    //         imageAlt: \"Watch over bitcoin price on Coingecko\",\r\n    //         templateTitle: \"Watcher Coingecko Bitcoin Price\",\r\n    //         radioValue: \"watcher-coingecko-btc-price\",\r\n    //         bytes: \"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\"\r\n    //     },\r\n    //     {\r\n    //         imageUrl: \"https://via.placeholder.com/200x100.png\",\r\n    //         imageAlt: \"Watch ethereum gas price in real time\",\r\n    //         templateTitle: \"Watcher Gas price From Ethereum Chain\",\r\n    //         radioValue: \"watcher-eth-gas-fees\",\r\n    //         bytes: \"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\"\r\n    //     },\r\n    //     {\r\n    //         imageUrl: \"https://via.placeholder.com/200x100.png\",\r\n    //         imageAlt: \"Watch events from every new blocks received on the Ethereum Chain\",\r\n    //         templateTitle: \"Watch New Ethereum Blocks\",\r\n    //         radioValue: \"watcher-eth-new-blocks\",\r\n    //         bytes: \"Fg8AAB+LCAAAAAAAAAPcVtuO2zYQ/RVDz6ZBSqRIGtiXboIWaJA1mk1eisAYksONEFkOdNnGCPrvHdnyZddxoqR5yAYGDIu0yJkz55yZT0kFK0zmyU01eYn/TH4r1/59k0yTah2wSeZ/f0qKQNuAOkStUya94ExqpZjtH6PBLEofszTL6a1286E/7Hn77npdVejbYl3R8rprl/2BybzqynKaeKiWDpf4EX3XIp0foWxwtz4sJvO27mgp1gVWodwshzjpaKyxW02GC9Y1ne/6qJfD5f5kY/kxmQth6ccmmedymhTV8gPUdFSL9Ul6GNNUBi6YyjgymfGMGZVnTCMGQ5vcq9CDsouhq8tjrq82TYur2au2Lqq76WR4XNTFPbQ4u17X+KJw08kbuo/AuJIz3n+mk+uubLsaryrs2hrK6WTRubLwf+Lmdv0eqyvt0RsVtEPQ2hqkG++h7A4YQtMUd9UKq5aCSE6fB6iT/RvLolnWGAm2yuOA9b/TIXOdGpciB+ZAUHW58AxEDoxnFqUHJW1qj5k3hDO2r3+B/N/uWPk5MvDceA8BmPL0JbUnrhvrmAwpFxacC+4EEn9K9AGTlxTAVkmzRdndFdVsz9pZv9PMHuhjOrn49yNsYixsPTg/GqoDWSSILA0ERaYFIaNIMFQZxYRAUNGkItfhiMJNRY6yzev5Pd3VZ/nACxIRorEEKRM8EvcyC8xYUAwyLjHaTAXVm8r/cAtytYNhbCN5bBbYRzYYhcz5ziiMvWgUgexABYHMWshJLpYzJzgnozCGbMPmHMyXufFT6GUkxc+JMrIPfJfuUkhzH4RjGDNBdICMOe09U6kX0hoXjfZHbN1Qzr3kcC+xvxbXvYBmz25vmtm26KSw090juNnMjAPX6NyAslKbHBzIH25GB4VFh8Gi54x6TiSF9YXJ0TLNIQad5RSHPCb9O7bbBG9rqBrYEm1xAPZMb9/Qe4e1x3Ki+3Yymhyveayo2FV7xveiyu3QfYXJL6qKFBVchlRq6SSxymnmXCqZ8GQRyCWBYp5C5Ucy+JwdI431u2QVwZC/5hSUIlwl5oaBd56FmLqIOc9QwxHcO2heNxjO/OoZ+mLV4/NUGvz0MLkGB15LxsETtNw4GnAsMqqnttoCSmUfpP+iWBXtr5O/7hls8sCCBN53LOKkolEvKim1CDyk1j3S1h/QvHv6ABxNdeScMeRLiX1mWLlgnruxY8Qksj31K14puFQ7s5T8oleCySJQp2UAvVcC0MCOJGxOJgWKK+7EiZxX2DRwhz/Z+DGSk+cFH9kev80n3/arfr3qL9o9/wcAAP//AwB9nA4pFg8AAA==\"\r\n    //     },\r\n    //     {\r\n    //         imageUrl: \"https://via.placeholder.com/200x100.png\",\r\n    //         imageAlt: \"Watch over a pair on pancake and get notified on new swaps\",\r\n    //         templateTitle: \"Pancake Swap Pair Watcher\",\r\n    //         radioValue: \"watcher-pancake-pair-watcher\",\r\n    //         bytes: \"RykAAB+LCAAAAAAAAAPcWttuG0cS/RWCz2q67xcBflgrQRDsIjYgbfZhsSCqq6strqkZgRxa1gb5960RhyJjyfLINhDGECSYQ09fTp06dapnfps2cEXT0+k1NO/gHc3XN3A9v4EOL6cn06YttJ6e/vu36aLw/3E+u+SiFdLJJGwGEqlGJUJINQcV+Eriu7rb637EV+dnZ23TEHbt6hceiL9pN928H5O/rS5gdrWKbDMJSzmJ7H0V4LTSSkWyMvAdCM0805w+EG464kVUWK5pe324OD3tVhu+VFcLasrydj7s6NWigQZpcn4Fq25ydgmLZnK/IB46L1t8Nx8WiwdfzD9MT3XU/I/b6alT9mS6aObXsOJhO1od4KFSZUhKECilExYgi6izE2SKd0UFj+h7FLfr2ayWe3DOb9cdXc3Ou9WieXsyGT6+WS3eQ0ezs3ZF/1jkk8mvPN+ibV7amex/TiZnm2W3WdHLhjbdCpYnkzebvFzg3+n2on1HzcuAhNGVkAk4KrEH/T0sNzxls1kuT6awXi/eNlfUdLwIo4u0oUShq7fCSrQiUpKCPFSvYw0U+vXv79kFL1bLM/CNqgATIUQvImAUBaoCE5WFUHYzzxfr+YoqrYiDMcTv95MBQZOrKVaj0AUYQZVAJMNDRm+s9BEiAO4RXHPAqPvn0eFY0Cig6IQMQQpbgxEp5CBCtB4Dk9l48yiOFDBJnkdUUJ5vrEaANiCsD84qNMlU/ySO/9nm1KPktMWkUFHkzLy03kkRo3GiWHQakKfItId24D9jtMe2T9pXfZLM3iw3bxfN7MfukqffXM36b9YzTvDZx0l+MvnkXfsoqLFR6LF+EvlHUX0asXvujSTxjmh3DHugY9s1jVKp4drHMrUd+GM9eg+rBeQlDXJkzVaNbAoP1egJEozM8GEpW5z/xNyaXnbd9fr0xYu8Ro5DB2uiMstbIZ+1q7cvpt+QACOz7zgIMJQjL92zCDBSmo6GADfrXfhv1qJHeNYwEO2HPvin1ppvGf+RFmQHBnW/7mPyWQJsPckIm8LjTg6C/QcS1E2z0+SeBM7GnSkxnzQlVUoVeB8sZkxoa5H3R8ULypoQsrXSwGHEtzP/0n88rqqakZx2LrMQAG8kptxrFwnULtXKTjQoetydhJANYhGp9JUPEwoosggNjIgOWFS1o9wJkFTJUGGB0JqhtFJkpaqopZKF4jwY+bnkeZ3/y8Xxz8JwpAl4iOFIq/88Z3JQe8eF6Cik10g7aK+Kz9LekQQ+Gu1l1f2m5bUmxd4ehFGSS09hHoFFJRIklVzWweq43+9Pz5PXZwT5p2cIrHbbUGuvPymwwWhZJGgupH3XRywISTneV9TRRESq8NcQWEg1+MTeQDETOUDJcxKGIoz2BXRk8avyUQJYlT2rgxRcPtk4JTYVYNBwG2ylMzn54tSXti3WeEfgQbiSIneEBrkZ5FmSNNkqV5XP+bg192tyZiSyR6GLOvonkuWJEI/k3feqi8ACqNl6iqghcFkwkXUxMtctWZI+cfzzfr+vmzfbk7nzG7jufx8epakgq2XohA+J8Uxs7yHHJAJCklBT0Jq+7ijtdTPhVeCwikn/52Ny0PsemS0zgkwDM4L8pIwWXdk+EbspZdgC2FLYXHF5MA6I/XfSxZSnzyeOIttH6tUjZz/jyuPnXSrbei+N9SLYypqRPduMYi3bjBBDrgT1TjP2QPKmsftbKStar4+sJGFN1vCSBURuxCwGLzK6ItBTztI6BvRxNAPGQoYiN7a+TyqNImWuzN4FT8GrRHdW/YtKUkAppWep0j5wiKUyDLDmXqCgzD4GcnhQktacObQ6Mlyfr1cH7AqqwLYrFha8ExAKZ60EmTAG1PbAxHbtd7NxKNwo8ZeCZHJ91ElkU7UwrFTFB0MS7H7jcNVumk7+/FCefmh5+fTX23+2RiYZtCjKU380r0VOSCJKbn1VYRjwwf7Vd7T/EPsWjYmPSheWosxSRNoJjNpmo7VVGB7E//Wm+24A4Cg7p8mIQv3RYWJBjob/VBYCKQ0E48sDAnwPAOyt2siqchR23Ca1NV3GPM+Oj6y5R2PH5QcuRQE8215TolYm1QjSZzRSpoCYEECX6uCPzy6/kgojTfYAy1nbvKdV13Phov0BOnjo2p0sRseMwknL+uqADYWTXsiijE1O+ajwMdc++mB5WMPkop30K/jM0UcK993c8065qgWbjCEBJFknU8y8D2VFdJqvA4fFHxyHlO1KjsnBfw0rRgbx/hFCU/pQXLT/onzZtu/GasUzHiY05S7ak66dDJN8JvCK1XyIfPz0U4VYZEGuer0SshvyxrIhdEbk6kvN1ToO9/SIX3XQiIZCNIKqYiVHByIRoEDAXLjTNOWumj/SWCRXMTOpvQfOe1QgIkkeAiigRy6LNO5VB8mNIk+CokjFeQLcSmRJfdogFs4YRFWOOk9GJvpDCEdK55c+SxgZoaMo0ikMzxKMV89S2ZH8PZoivXuQf7PVoNl60dGLvmfyzrLJyMULG1QSkAoJnXMg7ikC7/Fb1GzGEdur/oZDBbMUreLUi+C5izdgRfbsbr3UIeesHG6PVulDP+3PzaJbwHLxP5q8Oj/bnXiaMLyGoeW+BETkZK6e87pk3pmOInHnIKRi78RNlHZk9uMeHOZN1ttjtH5kPwwc3f247C6LllgFke9pjVoAQyRc0AolZnY7cT9u20xgcg2L3ftrfnhSrJTeP+9mQ+cj93GcHTxillLExETyFFPI/Bkp7Ue8KyVcRW7uq8hdtVBqYLAKZt8q+MQaZkHIGvr3J1gfItbMSzeMbNReVrcf+XVzt/0fD04Mvde7UdX+MFwarqWMQLDW8npTFRkq11qUysSCOdeDiF1cLtaTtyu4vpysL9ubyW27+QhcHfdQaFVIesnNDHLQZH/4BhYF1zVlpa0lVNwP3Q/HSFy1TIr7NwT9cMbpAjPu/wAAAP//AwCkFdEVRykAAA==\"\r\n    //     },\r\n    //     {\r\n    //         imageUrl: \"https://via.placeholder.com/200x100.png\",\r\n    //         imageAlt: \"Watch new deposit on UniCrypt platform\",\r\n    //         templateTitle: \"Watch Unicrypt New Deposit\",\r\n    //         radioValue: \"watcher-unicrypt-new-deposit\",\r\n    //         bytes: \"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\"\r\n    //     },\r\n    // ];\r\n\r\n    useEffect(() => {\r\n        const fetchTemplates = async () => {\r\n            const templates: GraphTemplate[] = await GraphService.listGraphsTemplates()\r\n            setTemplates(templates)\r\n        }\r\n        fetchTemplates()\r\n    }, [])\r\n\r\n    const { getRootProps, getRadioProps } = useRadioGroup({\r\n        name: \"template\",\r\n        defaultValue: \"blank\",\r\n        onChange: (e) => {\r\n            const template = templates.find(x => x.key === e)\r\n            if (template !== undefined) {\r\n                selectedTemplate({ loaded: true, template: template })\r\n            }\r\n        },\r\n    })\r\n\r\n    const group = getRootProps()\r\n\r\n    const [step, setStep] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n\r\n    async function onFileChange(e: any) {\r\n        console.log(e.target.files[0])\r\n        setFileUpload({ loaded: true, file: e.target.files[0] })\r\n        setGraphName(e.target.files[0].name.toUpperCase().split('.GLQ')[0])\r\n    }\r\n\r\n    function resetEntry() {\r\n        selectedTemplate({ loaded: false, template: {bytes: \"\", idgraphsTemplates: 0} })\r\n        setFileUpload({ loaded: false, file: {} })\r\n        setStep(true)\r\n    }\r\n\r\n    function onInputClick(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        const element = event.target as HTMLInputElement\r\n        element.value = ''\r\n    }\r\n\r\n    function readFileDataAsBase64(file: File) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (event: any) => {\r\n                resolve(event.target.result);\r\n            };\r\n\r\n            reader.onerror = (err) => {\r\n                reject(err);\r\n            };\r\n\r\n            reader.readAsBinaryString(file);\r\n        });\r\n    }\r\n\r\n    async function deployFileGraph(file: File) {\r\n        try {\r\n            const data: any = await readFileDataAsBase64(file)\r\n            const result: String | undefined = await GraphService.deployGraph({\r\n                state: GraphStateEnum.Starting,\r\n                bytes: data,\r\n                alias: graphName,\r\n                hash: undefined\r\n            })\r\n\r\n            if (result instanceof String) {\r\n                setSuccess(`${result}`)\r\n            } else {\r\n                setError('Your graph file was incomplete or invalid, please check it on the IDE')\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e)\r\n            setError('An error occured while trying to parse your file, please try again')\r\n        }\r\n    }\r\n\r\n\r\n    function updateStep() {\r\n        if (!step && fileUpload.loaded) {\r\n            deployFileGraph(fileUpload.file as File)\r\n            return\r\n        }\r\n        setStep(!step)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={onOpen} {...props}>{props.children}</Button>\r\n            <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\" scrollBehavior=\"inside\">\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader bgColor=\"gray.50\" borderTopRadius=\"md\">\r\n                        {step ?\r\n                            <Flex align=\"center\">\r\n                                <Icon as={FiEdit} w=\"5\" h=\"5\" mr=\"2\" />\r\n                                <Editable defaultValue={graphName} w=\"lg\">\r\n                                    <EditablePreview />\r\n                                    <EditableInput value={graphName} onChange={(e) => { setGraphName(e.target.value) }} />\r\n                                </Editable>\r\n                            </Flex>\r\n                            :\r\n                            <Box>\r\n                                Settings Deployment\r\n                            </Box>\r\n                        }\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        {success &&\r\n                            <Alert\r\n                                style={{ marginBottom: \"15px\", marginTop: \"15px\" }}\r\n                                status=\"success\"\r\n                                variant=\"subtle\"\r\n                                flexDirection=\"column\"\r\n                                alignItems=\"center\"\r\n                                justifyContent=\"center\"\r\n                                textAlign=\"center\"\r\n                                height=\"200px\"\r\n                            >\r\n                                <AlertIcon boxSize=\"40px\" mr={0} />\r\n                                <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                                    Graph Successfully started, Congratulations!\r\n                                </AlertTitle>\r\n                                <AlertDescription maxWidth=\"sm\">\r\n                                    {graphName} execution unique hash :\r\n                                    <Text fontSize=\"xs\" px=\"2\">\r\n                                        <span style={{ color: \"blue\" }}>{success}</span>\r\n                                    </Text>\r\n                                </AlertDescription>\r\n                            </Alert>\r\n                        }\r\n                        {error &&\r\n                            <Alert style={{ marginBottom: \"15px\", marginTop: \"15px\" }} status=\"error\">\r\n                                <AlertIcon />{error}\r\n                            </Alert>\r\n                        }\r\n                        {step &&\r\n                            <SimpleGrid columns={3} spacing=\"40px\" {...group}>\r\n                                <RadioCard clickable={true} key=\"blank\" {...getRadioProps({ value: \"blank\" })}>\r\n                                    <div onClick={() => { window.open(\"https://ide.graphlinq.io\", \"_blank\") }}><BlankCard /></div>\r\n                                </RadioCard>\r\n                                {templates.map((template) => {\r\n                                    const radio = getRadioProps({ value: template.key })\r\n                                    return (\r\n                                        <RadioCard clickable={false} fileLoaded={fileUpload.loaded} key={template.key} {...radio}>\r\n                                            <TemplateCard TemplateImageUrl={\"none\"} TemplateImageAlt={template.description} TemplateTitle={template.title} />\r\n                                        </RadioCard>\r\n                                    )\r\n                                })}\r\n                            </SimpleGrid>}\r\n                        {/* {!step && !fileUpload.loaded &&\r\n                            <TemplateVariables />} */}\r\n\r\n                        {!step && fileUpload.loaded &&\r\n                            <TemplateFile name={graphName} file={fileUpload.file as any} />}\r\n\r\n                        <Alert style={{ marginTop: 15, marginBottom: 15 }} status=\"info\">\r\n                            <AlertIcon />\r\n                            <p>Template system are still in development, you can import a GLQ file generated directly from our <a style={{ color: 'blue' }} target=\"_blank\" href=\"https://ide.graphlinq.io\">IDE</a> (File -&gt; Save Graph). </p>\r\n                        </Alert>\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter bgColor=\"gray.50\" borderBottomRadius=\"md\">\r\n                        {fileUpload.loaded &&\r\n                            <Box>\r\n                                <Text fontSize=\"xs\">Graph file uploaded successfully: size of <b>{(fileUpload.file as any).size} bytes</b> (name: {(fileUpload.file as any).name})</Text>\r\n                            </Box>\r\n                        }\r\n\r\n                        {!fileUpload.loaded && template.loaded &&\r\n                            <Box>\r\n                                <Text fontSize=\"xs\"><b>{(template.template as any).title}</b> selected, go to IDE to setup variables and deploy the graph here by importing the file.</Text>\r\n                            </Box>\r\n                        }\r\n\r\n                        <input ref={inputFileRef as any} id=\"files\" hidden={true} type=\"file\" onClick={onInputClick} onChange={onFileChange} />\r\n                        {!fileUpload.loaded && <Button onClick={() => { (inputFileRef as any).current.click() }} htmlFor=\"files\" variant=\"outline\" colorScheme=\"brand\" mr={3} hidden={!step}>Import .GLQ</Button>}\r\n\r\n                        {!step || fileUpload.loaded &&\r\n                            <Button onClick={() => { resetEntry() }} variant=\"outline\" colorScheme=\"brand\" mr={3}>Reset</Button>}\r\n\r\n                        {!step &&\r\n                            <Button variant=\"outline\" colorScheme=\"brand\" mr={3} onClick={() => { setSuccess(\"\"); setStep(!step); }}>Previous</Button>\r\n                        }\r\n                        {!success &&\r\n                        <div>\r\n                             {fileUpload.loaded && !step &&\r\n                             <Button colorScheme=\"brand\" onClick={() => updateStep()}>Next</Button>}\r\n                             {fileUpload.loaded && step &&\r\n                             <Button colorScheme=\"brand\" onClick={() => updateStep()}>Create</Button>}\r\n\r\n                            {!fileUpload.loaded && template.loaded &&\r\n                             <Button colorScheme=\"brand\" onClick={() =>  {\r\n                                var host = window.location.hostname.replace('app.', '')\r\n                                console.log(host)\r\n                                Cookies.set('graph', template.template.bytes, { domain: host });\r\n                                window.open(`https://ide.graphlinq.io/?loadGraph=${template.template.idgraphsTemplates}`, \"_blank\")\r\n                             }}>Go to IDE</Button>}\r\n\r\n                        </div>}\r\n\r\n                        {/* {!success &&\r\n                            <Button colorScheme=\"brand\" onClick={() => updateStep()}>\r\n                                {fileUpload.loaded && !step &&\r\n                                <span>Next</span>}\r\n                                {fileUpload.loaded && step &&\r\n                                <span>Deploy</span>}\r\n                                \r\n                                {!fileUpload.loaded && step &&\r\n                                <span>Go to IDE</span>}\r\n                                { {step ? \"Next\" : \"Create\"} }\r\n                            </Button>\r\n                        } */}\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Graphs/GraphStatus.tsx",[],["388","389"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/services/walletService.tsx",["390"],"import ManagerProvider from \"../providers/manager\"\r\nimport AuthResponse from \"../providers/responses/auth\"\r\nimport { WalletBalanceResponse } from \"../providers/responses/balance\";\r\nimport { ResponseSuccess } from \"../providers/responses/success\";\r\n\r\n\r\nexport default class WalletService {\r\n    public static async authWallet(addr: string, sign: string): Promise<boolean>\r\n    {\r\n        try\r\n        {\r\n            const result: AuthResponse = await ManagerProvider.authRequest({\r\n                address: addr,\r\n                signature: sign\r\n            })\r\n        \r\n            if (result) {\r\n                localStorage.setItem('session', JSON.stringify({token: result.accessToken, addr: addr}))\r\n            }\r\n            return result.auth;\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static verifySessionIntegrity(currAcc: string): boolean {\r\n        if (localStorage.getItem(\"session\") != null) {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            if (session.addr !== currAcc) { \r\n              localStorage.removeItem('session')\r\n              return false;\r\n            }\r\n          }\r\n        else if (localStorage.getItem(\"session\") == null) { return false; }\r\n        \r\n        return true;\r\n    }\r\n\r\n    public static async getBalance(addr: string): Promise<WalletBalanceResponse | undefined> {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: WalletBalanceResponse = await ManagerProvider.fetchBalanceWallet({address: addr}, session.token)\r\n            return result\r\n        }\r\n        catch (error)\r\n        {\r\n            console.error(error)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n\r\n    public static async withdraw(amount: number): Promise<ResponseSuccess | String > {\r\n        try\r\n        {\r\n            const session = JSON.parse(localStorage.getItem(\"session\") as string)\r\n            const result: ResponseSuccess = await ManagerProvider.withdrawBalanceWallet({amount}, session.token)\r\n            return result\r\n        }\r\n        catch (error)\r\n        {\r\n            if (!error.success) {\r\n                var errorMsg: String = new String(error.msg)\r\n                return errorMsg\r\n            }\r\n            console.error(JSON.stringify(error))\r\n            return \"An internal server error occured, please try again later\";\r\n        }\r\n    }\r\n\r\n\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/Header/Header.tsx",["391","392","393","394"],"import React from 'react'\r\nimport { Flex, Spacer, Box, Avatar, Tag, TagLabel, Icon, IconButton, Menu, MenuButton, MenuItem, MenuList, Portal, Link, Button, keyframes } from '@chakra-ui/react';\r\n\r\nimport { WalletConnectIcon, CoinbaseWalletIcon, FortmaticIcon, PortisIcon } from \"../../assets/icons\";\r\nimport Identicon from \"./identicon\";\r\n\r\nimport {\r\n    fortmatic,\r\n    injected,\r\n    portis,\r\n    walletconnect,\r\n    walletlink,\r\n} from \"../../connectors\";\r\n\r\nimport { shortenAddress } from \"../../utils/index\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { HiOutlineDatabase, HiOutlineDotsHorizontal } from 'react-icons/hi';\r\nimport { FiGithub, FiMessageCircle, FiMessageSquare, FiBookOpen, FiExternalLink } from \"react-icons/fi\";\r\nimport { GraphStateEnum } from '../../enums/graphState';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ninterface HeaderProps {\r\n\r\n}\r\n\r\nconst pulse = keyframes({\r\n    \"0%\": { transform: \"scale(0.95)\", boxShadow: \"0 0 0 0 rgba(139, 92, 246, 0.7)\" },\r\n    \"70%\": { transform: \"scale(1)\", boxShadow: \"0 0 0 10px rgba(139, 92, 246, 0)\" },\r\n    \"100%\": { transform: \"scale(0.95)\", boxShadow: \"0 0 0 0 rgba(139, 92, 246, 0)\" }\r\n})\r\n\r\nexport const Header: React.FC<HeaderProps> = ({ }) => {\r\n    const { account, connector } = useWeb3React();\r\n    let amountBalance = useSelector((state: any) => state.modals.balance.amount);\r\n    return (\r\n        <Flex as=\"header\" bgColor=\"white\" py={4} px={6} boxShadow=\"0 5px 6px -7px rgb(0 0 0 / 60%), 0 2px 4px -5px rgb(0 0 0 / 6%)\">\r\n            <Spacer />\r\n            {account !== undefined && (\r\n                <Box mr={2}>\r\n                    <Button\r\n                    as={NavLink}\r\n                    exact\r\n                    to=\"private-sale\"\r\n                    leftIcon={<HiOutlineDatabase />}\r\n                    size=\"sm\"\r\n                    colorScheme=\"brand\"\r\n                    bgGradient=\"linear(to-r, indigo.500,brand.500)\"\r\n                    variant=\"solid\"\r\n                    px={4}\r\n                    mr={2}\r\n                    rounded=\"full\"\r\n                    animation={`${pulse} 2s cubic-bezier(.4,0,.6,1) infinite`}\r\n                    >\r\n                        Private Sale\r\n                    </Button>\r\n                    <Tag size=\"lg\" colorScheme=\"brand\" borderRadius=\"full\" mr={2}>\r\n                        <TagLabel>{amountBalance} GLQ</TagLabel>\r\n                    </Tag>\r\n                    <Tag size=\"lg\" colorScheme=\"brand\" borderRadius=\"full\">\r\n                        {connector && <StatusIcon connector={connector} />}\r\n                        <TagLabel>{shortenAddress(account)}</TagLabel>\r\n                    </Tag>\r\n                </Box>\r\n            )}\r\n            <Menu>\r\n                <MenuButton\r\n                    as={IconButton}\r\n                    colorScheme=\"gray\"\r\n                    aria-label=\"Links\"\r\n                    icon={<Icon as={HiOutlineDotsHorizontal} w={5} h={5} />}\r\n                    textColor=\"gray.700\"\r\n                    size=\"sm\"\r\n                />\r\n                <MenuList>\r\n                    <MenuItem as={Link} icon={<FiBookOpen />} href=\"https://docs.graphlinq.io/\" isExternal>\r\n                        Documentation\r\n                    </MenuItem>\r\n                    <MenuItem as={Link} icon={<FiMessageCircle />} href=\"https://discord.gg/k3tqWzub\" isExternal>\r\n                        Discord\r\n                    </MenuItem>\r\n                    <MenuItem as={Link} icon={<FiMessageSquare />} href=\"https://t.me/graphlinq\" isExternal>\r\n                        Telegram\r\n                    </MenuItem>\r\n                    <MenuItem as={Link} icon={<FiGithub />} href=\"https://github.com/GraphLinq/GraphLinq\" isExternal>\r\n                        Github\r\n                    </MenuItem>\r\n                </MenuList>\r\n            </Menu>\r\n        </Flex>\r\n    );\r\n}\r\n\r\n// eslint-disable-next-line react/prop-types\r\nfunction StatusIcon({ connector }: any) {\r\n    if (connector === injected) {\r\n        return <Identicon />;\r\n    }\r\n    if (connector === walletconnect) {\r\n        return (\r\n            <Avatar\r\n                bgColor=\"white\"\r\n                as={WalletConnectIcon}\r\n                size=\"xs\"\r\n                ml={-2}\r\n                mr={2}\r\n            />\r\n        );\r\n    }\r\n    if (connector === walletlink) {\r\n        return (\r\n            <Avatar\r\n                bgColor=\"white\"\r\n                as={CoinbaseWalletIcon}\r\n                size=\"xs\"\r\n                ml={-2}\r\n                mr={2}\r\n            />\r\n\r\n        );\r\n    }\r\n    if (connector === fortmatic) {\r\n        return (\r\n            <Avatar\r\n                bgColor=\"white\"\r\n                as={FortmaticIcon}\r\n                size=\"xs\"\r\n                ml={-2}\r\n                mr={2}\r\n            />\r\n        );\r\n    }\r\n    if (connector === portis) {\r\n        return (\r\n            <Avatar\r\n                bgColor=\"white\"\r\n                as={PortisIcon}\r\n                size=\"xs\"\r\n                ml={-2}\r\n                mr={2}\r\n            />\r\n        );\r\n    }\r\n    return null;\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/reducers/index.ts",["395"],"import {diagrams} from './diagrams';\r\nimport {modals} from './modals';\r\n\r\nexport default {\r\n  modals,\r\n  diagrams,\r\n};\r\n","/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateVariables.tsx",["396","397"],"import React from 'react'\r\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react'\r\n\r\ninterface TemplateVariablesProps {\r\n}\r\n\r\nexport const TemplateVariables: React.FC<TemplateVariablesProps> = ({ }) => {\r\n\r\n    const firstFieldRef = React.useRef(null)\r\n\r\n    return (\r\n        <>\r\n            <FormControl id=\"binance-api-key\" isRequired>\r\n                <FormLabel>Binance API Key</FormLabel>\r\n                <Input focusBorderColor=\"brand.400\" type=\"text\" />\r\n                {/* <FormHelperText>additionnal informations</FormHelperText> */}\r\n            </FormControl>\r\n            <FormControl id=\"binance-api-key\" isRequired>\r\n                <FormLabel>Smart Contract Address</FormLabel>\r\n                <Input focusBorderColor=\"brand.400\" type=\"text\" />\r\n            </FormControl>\r\n        </>\r\n    )\r\n}",["398","399"],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/MotionBox.tsx",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/redux/store.ts",[],"/mnt/f/eth/graphlinq/graphlinq-frontend/src/components/GraphCreation/TemplateFile.tsx",["400","401","402","403"],"import React from 'react'\r\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react'\r\nimport { Alert, AlertIcon, Grid, Heading } from '@chakra-ui/react';\r\n\r\ninterface TemplateFileProps {\r\n    file: File\r\n    name: string\r\n}\r\n\r\nexport const TemplateFile: React.FC<TemplateFileProps> = (props: TemplateFileProps) => {\r\n\r\n    return (\r\n        <>\r\n            <FormControl isRequired>\r\n            <Alert status=\"info\">\r\n                    <AlertIcon /> You're about to deploy a new graph named \"{props.name}\" based on the file {props.file.name} you uploaded,\r\n                it will be directly launched with the STARTING state over the Engine.\r\n            </Alert>\r\n                \r\n            </FormControl>\r\n        </>\r\n    )\r\n}","/mnt/f/eth/graphlinq/graphlinq-frontend/src/pages/Presale.tsx",["404","405","406","407","408","409","410"],"import { Alert, AlertTitle, AlertDescription, AlertIcon, Box, Button, Divider, Flex, Heading, Input, Progress, Spacer, Stat, StatHelpText, StatLabel, StatNumber, Text, useClipboard, VStack } from '@chakra-ui/react';\r\nimport React, { useEffect } from 'react'\r\nimport { usePresaleContract } from '../hooks/useContract';\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { getDecimalsAmount } from '../utils';\r\nimport { utils } from 'ethers';\r\nimport ManagerProvider from '../providers/manager';\r\n\r\ninterface PresaleProps {\r\n\r\n}\r\n\r\nconst GLQRate = 715000\r\n\r\nconst Presale: React.FC<PresaleProps> = ({ }) => {\r\n\r\n    const [value, setValue] = React.useState(\"\");\r\n    const [access, setAccess] = React.useState(true);\r\n    const [error, setError] = React.useState(\"\");\r\n    const [pending, setPending] = React.useState(\"\");\r\n    const [success, setSuccess] = React.useState(\"\");\r\n\r\n    const handleChange = (event: any) => setValue(event.target.value)\r\n    const checkAccess = async () => {\r\n        const data = await ManagerProvider.checkPresalePwd(value)\r\n        console.log(data)\r\n        if (data.success) {\r\n            setError(\"\")\r\n            setAccess(true)\r\n        } else {\r\n            setError(\"Invalid password access for the Private Sale round, please try again.\")\r\n        }\r\n    };\r\n\r\n\r\n    const { account } = useWeb3React();\r\n    const contract = usePresaleContract(process.env.REACT_APP_PRIVATE_PRESALE_CONTRACT);\r\n    const [addr, setAddr] = React.useState(process.env.REACT_APP_PRIVATE_PRESALE_CONTRACT ?? \"\")\r\n    const { hasCopied, onCopy } = useClipboard(addr)\r\n    const [raised, setRaised] = React.useState(0)\r\n    const [invested, setInvested] = React.useState(0)\r\n    const [progressRaise, setProgressRaise] = React.useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        const refreshRaisedFunds = async () => {\r\n            if (contract == null || !access) return\r\n            try {\r\n                const currentRaised = await contract.getTotalRaisedEth()\r\n                const amount = Number(utils.formatUnits(currentRaised.toString(), 'ether'))\r\n                const progress = (amount / 70) * 100\r\n\r\n                const currentInvestment = await contract.getAddressInvestment(account)\r\n                const amountInvested = Number(utils.formatUnits(currentInvestment.toString(), 'ether'))\r\n                \r\n                setRaised(Number(amount))\r\n                setInvested(Number(amountInvested))\r\n                setProgressRaise(progress)\r\n            } catch (e) { console.error(e) }\r\n\r\n            setTimeout(refreshRaisedFunds, 10000)\r\n        }\r\n        refreshRaisedFunds()\r\n\r\n    }, [account, access])\r\n    \r\n    const claimToken = async () => {\r\n        if (contract == null || !access) return\r\n        setError(\"\"); setSuccess(\"\");\r\n        try {\r\n            setPending(\"Pending, check your wallet extension to execute the chain transaction...\")\r\n            const result = await contract.claimGlq({from: account})\r\n            setPending(\"Waiting for Ethereum confirmations...\")\r\n            await result.wait()\r\n            setSuccess(result.hash)\r\n        }\r\n        catch (e)\r\n        {\r\n            if (e.data?.message) { setPending(\"\"); setError(`Error: ${e.data?.message}`);return; }\r\n            if (e.error?.message) {\r\n                setPending(\"\"); setError(`Error: ${e.error.message}`); return;}\r\n            if (e.message) { setPending(\"\"); setError(`Error: ${e.message}`); }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {error &&\r\n            <Alert style={{marginTop: 20}} status=\"error\">\r\n                <AlertIcon />\r\n                <Box\r\n                    target=\"_blank\"\r\n                    as=\"a\"\r\n                    marginStart=\"1\"\r\n                    textColor=\"gray.700\"\r\n                    _hover={{ textColor: \"gray.900\", textDecoration: \"underline\" }}\r\n                    display={{ base: 'block', sm: 'revert' }}\r\n                >{error}</Box>\r\n            </Alert>}\r\n\r\n            {!success && pending &&\r\n            <Alert style={{marginTop: 20}}status=\"info\">\r\n                <AlertIcon />{pending}\r\n            </Alert>\r\n            }\r\n            {success &&\r\n                <Alert style={{marginTop: 20}}\r\n                status=\"success\"\r\n                variant=\"subtle\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                textAlign=\"center\"\r\n                height=\"200px\"\r\n            >\r\n                <AlertIcon boxSize=\"40px\" mr={0} />\r\n                <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                    You successfully claimed your GLQ tokens from the Private sale, Congratulations!\r\n                </AlertTitle>\r\n                <AlertDescription maxWidth=\"sm\">\r\n                    Transaction hash :\r\n            <Text fontSize=\"xs\" isTruncated px=\"2\">\r\n                        <a style={{color: 'blue'}} href={`https://etherscan.com/tx/${success}`} target=\"_blank\">{success}</a>\r\n            </Text>\r\n                </AlertDescription>\r\n            </Alert>\r\n            }\r\n\r\n            <Box bg='gray.50' h=\"max\" py=\"12\" px={{ sm: '6', lg: '8' }}>\r\n                <Box maxW={{ sm: 'xl' }} mx={{ sm: 'auto' }} mt=\"8\" w={{ sm: 'full' }}>\r\n                    <Box\r\n                        bg='white'\r\n                        py=\"8\"\r\n                        shadow=\"base\"\r\n                        rounded={{ sm: 'lg' }}\r\n                        border=\"1px\"\r\n                        borderColor={access ? \"brand.300\" : \"brand.500\"}\r\n                    >\r\n                        <Heading textAlign=\"center\" size=\"lg\" fontWeight=\"bold\" textColor=\"gray.700\">\r\n                            {access ? \"Private Pre-sale Round\" : \"Private Pre-sale Round Access\"}\r\n                        </Heading>\r\n                        <Box px={8} mt=\"8\" maxW=\"xl\" align=\"center\" hidden={access}>\r\n                            <Text fontWeight=\"medium\" textColor=\"gray.600\" textAlign=\"left\">\r\n                                Enter the pre-sale access code :\r\n                            </Text>\r\n                            <Flex mt={2}>\r\n                                <Input\r\n                                    focusBorderColor=\"brand.400\"\r\n                                    type=\"password\"\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <Button\r\n                                    colorScheme=\"brand\"\r\n                                    variant=\"solid\"\r\n                                    ml={2}\r\n                                    onClick={checkAccess}\r\n                                >\r\n                                    Access\r\n                            </Button>\r\n                            </Flex>\r\n                        </Box>\r\n                        <VStack\r\n                            spacing={4}\r\n                            align=\"stretch\"\r\n                            px={8}\r\n                            mt=\"8\"\r\n                            mx=\"auto\"\r\n                            maxW=\"xl\"\r\n                            hidden={!access}\r\n                        >\r\n                            <Flex bgGradient=\"linear(to-r, indigo.500,brand.500)\" rounded=\"md\" px={2} py={4} align=\"center\">\r\n                                    <Box textColor=\"white\" ml={2}>\r\n                                    <Text  fontWeight=\"medium\">Claim GLQ Token</Text>\r\n                                    <Divider my={2} />\r\n                                    <Text mb={1} fontSize=\"sm\">You can claim <Box as=\"span\" fontSize=\"md\" fontWeight=\"high\">{(invested *  GLQRate).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} GLQ = {invested} ETH </Box></Text>\r\n                                    <Text fontSize=\"sm\" textColor=\"gray.200\">After sending ETH to the Presale Contract, Claim your GLQ Token (will be released at Uniswap listing time).</Text>\r\n                                </Box>\r\n                                <Spacer />\r\n                                <Button\r\n                                flexShrink={0}\r\n                                    size=\"md\"\r\n                                    colorScheme=\"whiteAlpha\"\r\n\r\n                                    variant=\"solid\"\r\n                                    px={4}\r\n                                    mr={2}\r\n                                    rounded=\"full\"\r\n                                    onClick={claimToken}\r\n                                >\r\n                                    Claim Token\r\n                            </Button>\r\n                            </Flex>\r\n                            <Stat border=\"1px\" borderColor=\"gray.200\" bgColor=\"gray.50\" px=\"4\" py=\"2\" rounded=\"lg\">\r\n                                <StatLabel>1 ETH equals</StatLabel>\r\n                                <StatNumber>~ {GLQRate.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} GLQ</StatNumber>\r\n                                <StatHelpText>~ 0.002464$ per GLQ</StatHelpText>\r\n                            </Stat>\r\n                            <Alert status=\"warning\" rounded=\"lg\" colorScheme=\"brand\">\r\n                                <AlertIcon />\r\n                                Limited to 1 ETH per wallet\r\n                            </Alert>\r\n                            <Text fontSize=\"md\" fontWeight=\"medium\" textColor=\"gray.600\" textAlign=\"left\">\r\n                                The below address is the contract hosted on ETH network for our private presale,\r\n                                you can send ETH on it and will receive automatically the GLQ back.\r\n                            </Text>\r\n                            <Divider />\r\n                            <span style={{ paddingTop: 10, float: 'right', color: 'blue' }}>\r\n                                <a target=\"_blank\" href=\"https://graphlinq.io/Cybersecurity_Audit_CTDSEC_GraphLinq_Presale.pdf\">\r\n                                    &gt; Review the full contract audit here\r\n                                    </a>\r\n                                <a style={{marginLeft: \"4rem\"}} target=\"_blank\" href=\"https://github.com/GraphLinq/GraphLinq/blob/master/NodeBlock.GraphLinqPrivateSaleContract/contracts/GraphLinqPrivateSale.sol\">\r\n                                    &gt; View contract github\r\n                                    </a>\r\n                            </span>\r\n                                <Flex>\r\n                                <Input variant=\"flushed\" value={addr} focusBorderColor=\"brand.400\" isReadOnly />\r\n                                <Button onClick={onCopy} variant=\"outline\" ml={2}>\r\n                                    {hasCopied ? \"Copied\" : \"Copy\"}\r\n                                </Button>\r\n                            </Flex>\r\n                            <Box>\r\n                                <Progress value={progressRaise} height=\"32px\" colorScheme=\"brand\" rounded=\"md\" />\r\n                                <Text align=\"center\" color=\"gray.600\">\r\n                                    <b>{raised} / 70</b> ETH raised.\r\n                                </Text>\r\n                            </Box>\r\n                            <Text align=\"center\" color=\"gray.500\">\r\n                                Do not send ETH from exchange address or you may lose your GLQ token!\r\n                            </Text>\r\n                            {/* <Alert status=\"error\" rounded=\"lg\">\r\n                                <AlertIcon />\r\n                                Do not send ETH from exchange address or you may lose your GLQ token!\r\n                            </Alert> */}\r\n                        </VStack>\r\n                    </Box>\r\n                    <Alert style={{marginBottom: 20}} status=\"warning\" rounded=\"lg\" my=\"4\" maxW=\"xl\" mx=\"auto\">\r\n                        <AlertIcon />\r\n                        <Box\r\n                            target=\"_blank\"\r\n                            as=\"a\"\r\n                            marginStart=\"1\"\r\n                            href=\"https://docs.graphlinq.io/token/3-tokenomics\"\r\n                            textColor=\"gray.700\"\r\n                            _hover={{ textColor: \"gray.900\", textDecoration: \"underline\" }}\r\n                            display={{ base: 'block', sm: 'revert' }}\r\n                        >Read our documentation to learn more about the pre-sale process.</Box>\r\n                    </Alert>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Presale;",{"ruleId":"411","severity":1,"message":"412","line":2,"column":66,"nodeType":"413","messageId":"414","endLine":2,"endColumn":69},{"ruleId":"415","replacedBy":"416"},{"ruleId":"417","replacedBy":"418"},{"ruleId":"411","severity":1,"message":"419","line":1,"column":10,"nodeType":"413","messageId":"414","endLine":1,"endColumn":24},{"ruleId":"411","severity":1,"message":"420","line":1,"column":34,"nodeType":"413","messageId":"414","endLine":1,"endColumn":38},{"ruleId":"421","severity":1,"message":"422","line":8,"column":65,"nodeType":"423","messageId":"424","endLine":8,"endColumn":68},{"ruleId":"415","replacedBy":"425"},{"ruleId":"417","replacedBy":"426"},{"ruleId":"411","severity":1,"message":"427","line":2,"column":58,"nodeType":"413","messageId":"414","endLine":2,"endColumn":64},{"ruleId":"411","severity":1,"message":"428","line":2,"column":66,"nodeType":"413","messageId":"414","endLine":2,"endColumn":76},{"ruleId":"411","severity":1,"message":"429","line":2,"column":84,"nodeType":"413","messageId":"414","endLine":2,"endColumn":90},{"ruleId":"411","severity":1,"message":"430","line":2,"column":110,"nodeType":"413","messageId":"414","endLine":2,"endColumn":116},{"ruleId":"411","severity":1,"message":"431","line":11,"column":10,"nodeType":"413","messageId":"414","endLine":11,"endColumn":24},{"ruleId":"421","severity":1,"message":"422","line":19,"column":40,"nodeType":"423","messageId":"424","endLine":19,"endColumn":43},{"ruleId":"432","severity":1,"message":"433","line":50,"column":8,"nodeType":"434","endLine":50,"endColumn":17,"suggestions":"435"},{"ruleId":"436","severity":1,"message":"437","line":84,"column":32,"nodeType":"438","messageId":"424","endLine":84,"endColumn":34},{"ruleId":"415","replacedBy":"439"},{"ruleId":"417","replacedBy":"440"},{"ruleId":"411","severity":1,"message":"441","line":1,"column":16,"nodeType":"413","messageId":"414","endLine":1,"endColumn":25},{"ruleId":"411","severity":1,"message":"442","line":2,"column":15,"nodeType":"413","messageId":"414","endLine":2,"endColumn":23},{"ruleId":"411","severity":1,"message":"443","line":2,"column":218,"nodeType":"413","messageId":"414","endLine":2,"endColumn":229},{"ruleId":"411","severity":1,"message":"444","line":2,"column":231,"nodeType":"413","messageId":"414","endLine":2,"endColumn":238},{"ruleId":"411","severity":1,"message":"445","line":10,"column":8,"nodeType":"413","messageId":"414","endLine":10,"endColumn":19},{"ruleId":"411","severity":1,"message":"446","line":11,"column":8,"nodeType":"413","messageId":"414","endLine":11,"endColumn":15},{"ruleId":"411","severity":1,"message":"447","line":29,"column":9,"nodeType":"413","messageId":"414","endLine":29,"endColumn":16},{"ruleId":"432","severity":1,"message":"448","line":89,"column":8,"nodeType":"434","endLine":89,"endColumn":16,"suggestions":"449"},{"ruleId":"411","severity":1,"message":"450","line":126,"column":15,"nodeType":"413","messageId":"414","endLine":126,"endColumn":30},{"ruleId":"415","replacedBy":"451"},{"ruleId":"417","replacedBy":"452"},{"ruleId":"415","replacedBy":"453"},{"ruleId":"417","replacedBy":"454"},{"ruleId":"421","severity":1,"message":"422","line":13,"column":61,"nodeType":"423","messageId":"424","endLine":13,"endColumn":64},{"ruleId":"455","severity":1,"message":"456","line":104,"column":113,"nodeType":"457","endLine":104,"endColumn":128},{"ruleId":"411","severity":1,"message":"458","line":2,"column":15,"nodeType":"413","messageId":"414","endLine":2,"endColumn":20},{"ruleId":"411","severity":1,"message":"459","line":2,"column":22,"nodeType":"413","messageId":"414","endLine":2,"endColumn":27},{"ruleId":"411","severity":1,"message":"442","line":2,"column":29,"nodeType":"413","messageId":"414","endLine":2,"endColumn":37},{"ruleId":"415","replacedBy":"460"},{"ruleId":"417","replacedBy":"461"},{"ruleId":"411","severity":1,"message":"462","line":2,"column":8,"nodeType":"413","messageId":"414","endLine":2,"endColumn":14},{"ruleId":"411","severity":1,"message":"463","line":3,"column":10,"nodeType":"413","messageId":"414","endLine":3,"endColumn":16},{"ruleId":"415","replacedBy":"464"},{"ruleId":"417","replacedBy":"465"},{"ruleId":"421","severity":1,"message":"422","line":16,"column":40,"nodeType":"423","messageId":"424","endLine":16,"endColumn":43},{"ruleId":"411","severity":1,"message":"429","line":2,"column":35,"nodeType":"413","messageId":"414","endLine":2,"endColumn":41},{"ruleId":"421","severity":1,"message":"422","line":19,"column":49,"nodeType":"423","messageId":"424","endLine":19,"endColumn":52},{"ruleId":"411","severity":1,"message":"466","line":1,"column":10,"nodeType":"413","messageId":"414","endLine":1,"endColumn":19},{"ruleId":"411","severity":1,"message":"467","line":2,"column":10,"nodeType":"413","messageId":"414","endLine":2,"endColumn":15},{"ruleId":"411","severity":1,"message":"468","line":39,"column":56,"nodeType":"413","messageId":"414","endLine":39,"endColumn":63},{"ruleId":"411","severity":1,"message":"469","line":53,"column":9,"nodeType":"413","messageId":"414","endLine":53,"endColumn":26},{"ruleId":"411","severity":1,"message":"470","line":79,"column":15,"nodeType":"413","messageId":"414","endLine":79,"endColumn":25},{"ruleId":"432","severity":1,"message":"471","line":106,"column":6,"nodeType":"434","endLine":106,"endColumn":15,"suggestions":"472"},{"ruleId":"432","severity":1,"message":"473","line":108,"column":9,"nodeType":"474","endLine":111,"endColumn":4,"suggestions":"475"},{"ruleId":"432","severity":1,"message":"476","line":108,"column":9,"nodeType":"474","endLine":111,"endColumn":4,"suggestions":"477"},{"ruleId":"415","replacedBy":"478"},{"ruleId":"417","replacedBy":"479"},{"ruleId":"411","severity":1,"message":"480","line":1,"column":17,"nodeType":"413","messageId":"414","endLine":1,"endColumn":25},{"ruleId":"411","severity":1,"message":"481","line":3,"column":28,"nodeType":"413","messageId":"414","endLine":3,"endColumn":36},{"ruleId":"432","severity":1,"message":"482","line":17,"column":6,"nodeType":"434","endLine":17,"endColumn":15,"suggestions":"483"},{"ruleId":"415","replacedBy":"484"},{"ruleId":"417","replacedBy":"485"},{"ruleId":"411","severity":1,"message":"486","line":1,"column":17,"nodeType":"413","messageId":"414","endLine":1,"endColumn":21},{"ruleId":"411","severity":1,"message":"487","line":9,"column":8,"nodeType":"413","messageId":"414","endLine":9,"endColumn":12},{"ruleId":"415","replacedBy":"488"},{"ruleId":"417","replacedBy":"489"},{"ruleId":"411","severity":1,"message":"429","line":2,"column":30,"nodeType":"413","messageId":"414","endLine":2,"endColumn":36},{"ruleId":"411","severity":1,"message":"490","line":2,"column":91,"nodeType":"413","messageId":"414","endLine":2,"endColumn":97},{"ruleId":"411","severity":1,"message":"491","line":2,"column":114,"nodeType":"413","messageId":"414","endLine":2,"endColumn":118},{"ruleId":"421","severity":1,"message":"422","line":10,"column":36,"nodeType":"423","messageId":"424","endLine":10,"endColumn":39},{"ruleId":"421","severity":1,"message":"422","line":8,"column":42,"nodeType":"423","messageId":"424","endLine":8,"endColumn":44},{"ruleId":"411","severity":1,"message":"492","line":9,"column":7,"nodeType":"413","messageId":"414","endLine":9,"endColumn":31},{"ruleId":"411","severity":1,"message":"493","line":1,"column":17,"nodeType":"413","messageId":"414","endLine":1,"endColumn":25},{"ruleId":"411","severity":1,"message":"494","line":5,"column":10,"nodeType":"413","messageId":"414","endLine":5,"endColumn":27},{"ruleId":"421","severity":1,"message":"422","line":15,"column":59,"nodeType":"423","messageId":"424","endLine":15,"endColumn":62},{"ruleId":"455","severity":1,"message":"456","line":117,"column":113,"nodeType":"457","endLine":117,"endColumn":128},{"ruleId":"432","severity":1,"message":"495","line":36,"column":6,"nodeType":"434","endLine":36,"endColumn":24,"suggestions":"496"},{"ruleId":"432","severity":1,"message":"497","line":29,"column":6,"nodeType":"434","endLine":29,"endColumn":30,"suggestions":"498"},{"ruleId":"415","replacedBy":"499"},{"ruleId":"417","replacedBy":"500"},{"ruleId":"411","severity":1,"message":"429","line":1,"column":15,"nodeType":"413","messageId":"414","endLine":1,"endColumn":21},{"ruleId":"411","severity":1,"message":"491","line":1,"column":36,"nodeType":"413","messageId":"414","endLine":1,"endColumn":40},{"ruleId":"411","severity":1,"message":"501","line":2,"column":10,"nodeType":"413","messageId":"414","endLine":2,"endColumn":25},{"ruleId":"411","severity":1,"message":"481","line":5,"column":28,"nodeType":"413","messageId":"414","endLine":5,"endColumn":36},{"ruleId":"411","severity":1,"message":"502","line":6,"column":10,"nodeType":"413","messageId":"414","endLine":6,"endColumn":33},{"ruleId":"421","severity":1,"message":"422","line":13,"column":59,"nodeType":"423","messageId":"424","endLine":13,"endColumn":62},{"ruleId":"432","severity":1,"message":"503","line":20,"column":8,"nodeType":"434","endLine":20,"endColumn":17,"suggestions":"504"},{"ruleId":"411","severity":1,"message":"505","line":2,"column":10,"nodeType":"413","messageId":"414","endLine":2,"endColumn":23},{"ruleId":"411","severity":1,"message":"506","line":5,"column":8,"nodeType":"413","messageId":"414","endLine":5,"endColumn":20},{"ruleId":"411","severity":1,"message":"507","line":10,"column":10,"nodeType":"413","messageId":"414","endLine":10,"endColumn":27},{"ruleId":"508","severity":1,"message":"509","line":23,"column":20,"nodeType":"510","messageId":"511","endLine":23,"endColumn":43},{"ruleId":"415","replacedBy":"451"},{"ruleId":"417","replacedBy":"452"},{"ruleId":"432","severity":1,"message":"497","line":29,"column":6,"nodeType":"434","endLine":29,"endColumn":25,"suggestions":"512"},{"ruleId":"421","severity":1,"message":"422","line":8,"column":36,"nodeType":"423","messageId":"424","endLine":8,"endColumn":38},{"ruleId":"411","severity":1,"message":"513","line":2,"column":119,"nodeType":"413","messageId":"414","endLine":2,"endColumn":124},{"ruleId":"411","severity":1,"message":"514","line":2,"column":216,"nodeType":"413","messageId":"414","endLine":2,"endColumn":225},{"ruleId":"411","severity":1,"message":"515","line":2,"column":239,"nodeType":"413","messageId":"414","endLine":2,"endColumn":244},{"ruleId":"411","severity":1,"message":"516","line":2,"column":246,"nodeType":"413","messageId":"414","endLine":2,"endColumn":249},{"ruleId":"411","severity":1,"message":"517","line":2,"column":251,"nodeType":"413","messageId":"414","endLine":2,"endColumn":258},{"ruleId":"411","severity":1,"message":"518","line":2,"column":260,"nodeType":"413","messageId":"414","endLine":2,"endColumn":268},{"ruleId":"411","severity":1,"message":"519","line":2,"column":270,"nodeType":"413","messageId":"414","endLine":2,"endColumn":279},{"ruleId":"411","severity":1,"message":"520","line":2,"column":281,"nodeType":"413","messageId":"414","endLine":2,"endColumn":285},{"ruleId":"411","severity":1,"message":"521","line":5,"column":10,"nodeType":"413","messageId":"414","endLine":5,"endColumn":27},{"ruleId":"411","severity":1,"message":"522","line":14,"column":11,"nodeType":"413","messageId":"414","endLine":14,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":228,"column":157,"nodeType":"457","endLine":228,"endColumn":172},{"ruleId":"523","severity":1,"message":"524","line":248,"column":32,"nodeType":"525","messageId":"526","endLine":248,"endColumn":34},{"ruleId":"523","severity":1,"message":"524","line":248,"column":53,"nodeType":"525","messageId":"526","endLine":248,"endColumn":55},{"ruleId":"415","replacedBy":"527"},{"ruleId":"417","replacedBy":"528"},{"ruleId":"508","severity":1,"message":"509","line":67,"column":40,"nodeType":"510","messageId":"511","endLine":67,"endColumn":61},{"ruleId":"411","severity":1,"message":"529","line":2,"column":108,"nodeType":"413","messageId":"414","endLine":2,"endColumn":114},{"ruleId":"411","severity":1,"message":"530","line":19,"column":66,"nodeType":"413","messageId":"414","endLine":19,"endColumn":80},{"ruleId":"411","severity":1,"message":"431","line":20,"column":10,"nodeType":"413","messageId":"414","endLine":20,"endColumn":24},{"ruleId":"421","severity":1,"message":"422","line":34,"column":47,"nodeType":"423","messageId":"424","endLine":34,"endColumn":50},{"ruleId":"531","severity":1,"message":"532","line":4,"column":1,"nodeType":"533","endLine":7,"endColumn":3},{"ruleId":"421","severity":1,"message":"422","line":7,"column":69,"nodeType":"423","messageId":"424","endLine":7,"endColumn":72},{"ruleId":"411","severity":1,"message":"534","line":9,"column":11,"nodeType":"413","messageId":"414","endLine":9,"endColumn":24},{"ruleId":"415","replacedBy":"535"},{"ruleId":"417","replacedBy":"536"},{"ruleId":"411","severity":1,"message":"537","line":2,"column":23,"nodeType":"413","messageId":"414","endLine":2,"endColumn":32},{"ruleId":"411","severity":1,"message":"513","line":2,"column":34,"nodeType":"413","messageId":"414","endLine":2,"endColumn":39},{"ruleId":"411","severity":1,"message":"538","line":3,"column":28,"nodeType":"413","messageId":"414","endLine":3,"endColumn":32},{"ruleId":"411","severity":1,"message":"539","line":3,"column":34,"nodeType":"413","messageId":"414","endLine":3,"endColumn":41},{"ruleId":"411","severity":1,"message":"494","line":5,"column":10,"nodeType":"413","messageId":"414","endLine":5,"endColumn":27},{"ruleId":"421","severity":1,"message":"422","line":15,"column":42,"nodeType":"423","messageId":"424","endLine":15,"endColumn":45},{"ruleId":"411","severity":1,"message":"540","line":38,"column":18,"nodeType":"413","messageId":"414","endLine":38,"endColumn":25},{"ruleId":"432","severity":1,"message":"541","line":65,"column":8,"nodeType":"434","endLine":65,"endColumn":25,"suggestions":"542"},{"ruleId":"455","severity":1,"message":"456","line":123,"column":97,"nodeType":"457","endLine":123,"endColumn":112},{"ruleId":"455","severity":1,"message":"456","line":209,"column":36,"nodeType":"457","endLine":209,"endColumn":51},{"ruleId":"455","severity":1,"message":"456","line":212,"column":65,"nodeType":"457","endLine":212,"endColumn":80},"@typescript-eslint/no-unused-vars","'bsc' is defined but never used.","Identifier","unusedVar","no-native-reassign",["543"],"no-negated-in-lhs",["544"],"'AbsoluteCenter' is defined but never used.","'Flex' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["543"],["544"],"'HStack' is defined but never used.","'IconButton' is defined but never used.","'Button' is defined but never used.","'Center' is defined but never used.","'GraphStateEnum' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["545"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["543"],["544"],"'useEffect' is defined but never used.","'useRadio' is defined but never used.","'LinkOverlay' is defined but never used.","'LinkBox' is defined but never used.","'useInterval' is defined but never used.","'Cookies' is defined but never used.","'secDiff' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tickLogs'. Either include it or remove the dependency array.",["546"],"'result' is assigned a value but never used.",["543"],["544"],["543"],["544"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Image' is defined but never used.","'Badge' is defined but never used.",["543"],["544"],"'styled' is defined but never used.","'darken' is defined but never used.",["543"],["544"],"'AnyAction' is defined but never used.","'Modal' is defined but never used.","'library' is assigned a value but never used.","'binanceWalletSign' is assigned a value but never used.","'firstChain' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activate', 'connector', 'dispatch', and 'history'. Either include them or remove the dependency array.",["547"],"The 'toggleWalletModal' function makes the dependencies of useEffect Hook (at line 118) change on every render. To fix this, wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.","VariableDeclarator",["548"],"The 'toggleWalletModal' function makes the dependencies of useEffect Hook (at line 183) change on every render. To fix this, wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.",["549"],["543"],["544"],"'Redirect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["550"],["543"],["544"],"'lazy' is defined but never used.","'Auth' is defined but never used.",["543"],["544"],"'Spacer' is defined but never used.","'Icon' is defined but never used.","'StyledIdenticonContainer' is assigned a value but never used.","'Suspense' is defined but never used.","'getDecimalsAmount' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshBalance'. Either include it or remove the dependency array.",["551"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["552"],["543"],["544"],"'FiArrowDownLeft' is defined but never used.","'UnsupportedChainIdError' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshBalanceContract'. Either include it or remove the dependency array.",["553"],"'ErrorResponse' is defined but never used.","'AuthResponse' is defined but never used.","'GraphStateRequest' is defined but never used.","no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor",["554"],"'Input' is defined but never used.","'propNames' is defined but never used.","'Stack' is defined but never used.","'Tab' is defined but never used.","'TabList' is defined but never used.","'TabPanel' is defined but never used.","'TabPanels' is defined but never used.","'Tabs' is defined but never used.","'TemplateVariables' is defined but never used.","'GraphCreationProps' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["543"],["544"],"'Portal' is defined but never used.","'FiExternalLink' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'firstFieldRef' is assigned a value but never used.",["543"],["544"],"'FormLabel' is defined but never used.","'Grid' is defined but never used.","'Heading' is defined but never used.","'setAddr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'contract'. Either include it or remove the dependency array.",["555"],"no-global-assign","no-unsafe-negation",{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"desc":"562","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},"Update the dependencies array to be: [account, dispatch]",{"range":"577","text":"578"},"Update the dependencies array to be: [inLogs, tickLogs]",{"range":"579","text":"580"},"Update the dependencies array to be: [account, activate, connector, dispatch, history]",{"range":"581","text":"582"},"Wrap the definition of 'toggleWalletModal' in its own useCallback() Hook.",{"range":"583","text":"584"},{"range":"585","text":"584"},"Update the dependencies array to be: [account, history]",{"range":"586","text":"587"},"Update the dependencies array to be: [chainId, account, refreshBalance]",{"range":"588","text":"589"},"Update the dependencies array to be: [account, dispatch, tokenContract]",{"range":"590","text":"591"},"Update the dependencies array to be: [account, refreshBalanceContract]",{"range":"592","text":"593"},"Update the dependencies array to be: [account, contract, dispatch]",{"range":"594","text":"595"},"Update the dependencies array to be: [account, access, contract]",{"range":"596","text":"597"},[1721,1730],"[account, dispatch]",[2907,2915],"[inLogs, tickLogs]",[3329,3338],"[account, activate, connector, dispatch, history]",[3371,3530],"useCallback(() => {\r\n    if (walletModalOpen) dispatch({ type: CLOSE_MODAL, name: \"walletManager\" });\r\n    else dispatch({ type: OPEN_MODAL, name: \"walletManager\" });\r\n  })",[3371,3530],[597,606],"[account, history]",[1388,1406],"[chainId, account, refreshBalance]",[991,1015],"[account, dispatch, tokenContract]",[707,716],"[account, refreshBalanceContract]",[1049,1068],"[account, contract, dispatch]",[2636,2653],"[account, access, contract]"]